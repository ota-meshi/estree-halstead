// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`test for extractTokens /js/fn.js BlockStatement\`
{}
\` 1`] = `
Object {
  "operands": Array [],
  "operators": Array [
    "{}",
  ],
}
`;

exports[`test for extractTokens /js/fn.js FunctionDeclaration\`
function fn1() {}
\` 1`] = `
Object {
  "operands": Array [
    "fn1",
  ],
  "operators": Array [
    "function",
    "()",
    "{}",
  ],
}
`;

exports[`test for extractTokens /js/fn.js FunctionDeclaration\`
function fn2(a) {}
\` 1`] = `
Object {
  "operands": Array [
    "fn2",
    "a",
  ],
  "operators": Array [
    "function",
    "()",
    "{}",
  ],
}
`;

exports[`test for extractTokens /js/fn.js FunctionDeclaration\`
function fn3(a, a2) {}
\` 1`] = `
Object {
  "operands": Array [
    "fn3",
    "a",
    "a2",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    "{}",
  ],
}
`;

exports[`test for extractTokens /js/fn.js FunctionExpression\`
() {}
\` 1`] = `
Object {
  "operands": Array [],
  "operators": Array [
    "function",
    "()",
    "{}",
  ],
}
`;

exports[`test for extractTokens /js/fn.js FunctionExpression\`
(a) {}
\` 1`] = `
Object {
  "operands": Array [
    "a",
  ],
  "operators": Array [
    "function",
    "()",
    "{}",
  ],
}
`;

exports[`test for extractTokens /js/fn.js FunctionExpression\`
(a, a2) {}
\` 1`] = `
Object {
  "operands": Array [
    "a",
    "a2",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    "{}",
  ],
}
`;

exports[`test for extractTokens /js/fn.js ObjectExpression\`
{
    fn1() {},
    fn2(a) {},
    fn3(a, a2) {}
}
\` 1`] = `
Object {
  "operands": Array [
    "fn1",
    "fn2",
    "a",
    "fn3",
    "a",
    "a2",
  ],
  "operators": Array [
    "{}",
    ",",
    ",",
    "()",
    "{}",
    "()",
    "{}",
    "()",
    ",",
    "{}",
  ],
}
`;

exports[`test for extractTokens /js/fn.js Program\`
function fn1() {}
function fn2(a) {}
function fn3(a, a2) {}
const object = {
    fn1() {},
    fn2(a) {},
    fn3(a, a2) {}
}

\` 1`] = `
Object {
  "operands": Array [
    "fn1",
    "fn2",
    "a",
    "fn3",
    "a",
    "a2",
    "object",
    "fn1",
    "fn2",
    "a",
    "fn3",
    "a",
    "a2",
  ],
  "operators": Array [
    "function",
    "()",
    "{}",
    "function",
    "()",
    "{}",
    "function",
    "()",
    ",",
    "{}",
    "const",
    "=",
    "{}",
    ",",
    ",",
    "()",
    "{}",
    "()",
    "{}",
    "()",
    ",",
    "{}",
  ],
}
`;

exports[`test for extractTokens /js/fn.js Property\`
fn1() {}
\` 1`] = `
Object {
  "operands": Array [
    "fn1",
  ],
  "operators": Array [
    "()",
    "{}",
  ],
}
`;

exports[`test for extractTokens /js/fn.js Property\`
fn2(a) {}
\` 1`] = `
Object {
  "operands": Array [
    "fn2",
    "a",
  ],
  "operators": Array [
    "()",
    "{}",
  ],
}
`;

exports[`test for extractTokens /js/fn.js Property\`
fn3(a, a2) {}
\` 1`] = `
Object {
  "operands": Array [
    "fn3",
    "a",
    "a2",
  ],
  "operators": Array [
    "()",
    ",",
    "{}",
  ],
}
`;

exports[`test for extractTokens /js/fn.js VariableDeclaration\`
const object = {
    fn1() {},
    fn2(a) {},
    fn3(a, a2) {}
}
\` 1`] = `
Object {
  "operands": Array [
    "object",
    "fn1",
    "fn2",
    "a",
    "fn3",
    "a",
    "a2",
  ],
  "operators": Array [
    "const",
    "=",
    "{}",
    ",",
    ",",
    "()",
    "{}",
    "()",
    "{}",
    "()",
    ",",
    "{}",
  ],
}
`;

exports[`test for extractTokens /js/fn.js VariableDeclarator\`
object = {
    fn1() {},
    fn2(a) {},
    fn3(a, a2) {}
}
\` 1`] = `
Object {
  "operands": Array [
    "object",
    "fn1",
    "fn2",
    "a",
    "fn3",
    "a",
    "a2",
  ],
  "operators": Array [
    "=",
    "{}",
    ",",
    ",",
    "()",
    "{}",
    "()",
    "{}",
    "()",
    ",",
    "{}",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts BinaryExpression\`
b + (c + d)
\` 1`] = `
Object {
  "operands": Array [
    "b",
    "c",
    "d",
  ],
  "operators": Array [
    "+",
    "()",
    "+",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts BinaryExpression\`
b + c
\` 1`] = `
Object {
  "operands": Array [
    "b",
    "c",
  ],
  "operators": Array [
    "+",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts BinaryExpression\`
b + c + d
\` 1`] = `
Object {
  "operands": Array [
    "b",
    "c",
    "d",
  ],
  "operators": Array [
    "+",
    "+",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts BinaryExpression\`
c + d
\` 1`] = `
Object {
  "operands": Array [
    "c",
    "d",
  ],
  "operators": Array [
    "+",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts BlockStatement\`
{}
\` 1`] = `
Object {
  "operands": Array [],
  "operators": Array [
    "{}",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts ClassBody\`
{
    abstract m(this: Abs, a: number): void {}

    abstract me(this: Abs, a: string): void

    static abstract sm(this: Abs, a: boolean): void {}

    static abstract sme(this: Abs, a: null): void

    abstract x: number
    // abstract xv: number = 42

    static abstract sx: number
    // static abstract sxv: number = 42
}
\` 1`] = `
Object {
  "operands": Array [
    "m",
    "this",
    "Abs",
    "a",
    "number",
    "void",
    "me",
    "this",
    "Abs",
    "a",
    "string",
    "void",
    "sm",
    "this",
    "Abs",
    "a",
    "boolean",
    "void",
    "sme",
    "this",
    "Abs",
    "a",
    "null",
    "void",
    "x",
    "number",
    "sx",
    "number",
  ],
  "operators": Array [
    "{}",
    "abstract",
    "()",
    ",",
    ":",
    ":",
    ":",
    "{}",
    "abstract",
    "()",
    ",",
    ":",
    ":",
    ":",
    "abstract",
    "static",
    "()",
    ",",
    ":",
    ":",
    ":",
    "{}",
    "abstract",
    "static",
    "()",
    ",",
    ":",
    ":",
    ":",
    "abstract",
    ":",
    "abstract",
    "static",
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts ClassBody\`
{
    constructor(private a)
}
\` 1`] = `
Object {
  "operands": Array [
    "constructor",
    "a",
  ],
  "operators": Array [
    "{}",
    "()",
    "private",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts ClassDeclaration\`
abstract class Abs {
    abstract m(this: Abs, a: number): void {}

    abstract me(this: Abs, a: string): void

    static abstract sm(this: Abs, a: boolean): void {}

    static abstract sme(this: Abs, a: null): void

    abstract x: number
    // abstract xv: number = 42

    static abstract sx: number
    // static abstract sxv: number = 42
}
\` 1`] = `
Object {
  "operands": Array [
    "Abs",
    "m",
    "this",
    "Abs",
    "a",
    "number",
    "void",
    "me",
    "this",
    "Abs",
    "a",
    "string",
    "void",
    "sm",
    "this",
    "Abs",
    "a",
    "boolean",
    "void",
    "sme",
    "this",
    "Abs",
    "a",
    "null",
    "void",
    "x",
    "number",
    "sx",
    "number",
  ],
  "operators": Array [
    "class",
    "abstract",
    "{}",
    "abstract",
    "()",
    ",",
    ":",
    ":",
    ":",
    "{}",
    "abstract",
    "()",
    ",",
    ":",
    ":",
    ":",
    "abstract",
    "static",
    "()",
    ",",
    ":",
    ":",
    ":",
    "{}",
    "abstract",
    "static",
    "()",
    ",",
    ":",
    ":",
    ":",
    "abstract",
    ":",
    "abstract",
    "static",
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts ClassDeclaration\`
class Class {
    constructor(private a)
}
\` 1`] = `
Object {
  "operands": Array [
    "Class",
    "constructor",
    "a",
  ],
  "operators": Array [
    "class",
    "{}",
    "()",
    "private",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts ClassDeclaration\`
class IMPL implements T, T2 {}
\` 1`] = `
Object {
  "operands": Array [
    "IMPL",
    "T",
    "T2",
  ],
  "operators": Array [
    "class",
    "implements",
    ",",
    "{}",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts ExpressionStatement\`
a = b + (c + d)
\` 1`] = `
Object {
  "operands": Array [
    "a",
    "b",
    "c",
    "d",
  ],
  "operators": Array [
    "=",
    "+",
    "()",
    "+",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts ExpressionStatement\`
a = b + c + d
\` 1`] = `
Object {
  "operands": Array [
    "a",
    "b",
    "c",
    "d",
  ],
  "operators": Array [
    "=",
    "+",
    "+",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts FunctionDeclaration\`
function fn(): void {}
\` 1`] = `
Object {
  "operands": Array [
    "fn",
    "void",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts FunctionExpression\`
(this: Abs, a: boolean): void {}
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "Abs",
    "a",
    "boolean",
    "void",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ":",
    "{}",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts FunctionExpression\`
(this: Abs, a: number): void {}
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "Abs",
    "a",
    "number",
    "void",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ":",
    "{}",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts Literal\`
"C"
\` 1`] = `
Object {
  "operands": Array [
    "\\"C\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/input.ts Literal\`
"foo"
\` 1`] = `
Object {
  "operands": Array [
    "\\"foo\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/input.ts Literal\`
42
\` 1`] = `
Object {
  "operands": Array [
    "42",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/input.ts Literal\`
42n
\` 1`] = `
Object {
  "operands": Array [
    "42n",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/input.ts MethodDefinition\`
constructor(private a)
\` 1`] = `
Object {
  "operands": Array [
    "constructor",
    "a",
  ],
  "operators": Array [
    "()",
    "private",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts Program\`
a = b + c + d
a = b + (c + d)

abstract class Abs {
    abstract m(this: Abs, a: number): void {}

    abstract me(this: Abs, a: string): void

    static abstract sm(this: Abs, a: boolean): void {}

    static abstract sme(this: Abs, a: null): void

    abstract x: number
    // abstract xv: number = 42

    static abstract sx: number
    // static abstract sxv: number = 42
}
const a:any=42, b: bigint = 42n
type T = any
type T2 = {}
type T3 = { [k: string ]: void };
type T4 = T3[string]
type T5 = {key:number}
type A = T[]
type R = Array<string>
interface CallSignature { <T> (e: T): R }
interface ConstructSignature { new <T> (e: T): R }
class IMPL implements T, T2 {}
type ConditionalType<T> = T extends Foo ? T : U
type ConstructorType = new ()=>void
type FunctionType = ()=>void
function fn(a: unknown): void;
function fn(a: unknown, b: never): void;
function fn(): void {}
enum Enum {
    B,
    C = "C"
}
export = foo
import a = require("foo")
type ImportType = import("foo").B
type UnpackedPromise<T=string> = T extends Promise<infer U>
  ? U
  : T
interface I extends E implements T {}
type IntersectionType = A & B
type UnionType = A | B
type Uppercase<S extends string> = intrinsic;
type MappedType = {[key in foo]: bar}
type Required<T> = {
    [P in keyof T]-?: T[P];
};
type Readonly<T> = {
    readonly [P in keyof T]: T[P];
};
type MethodSignature = {
    fn(arg: A): R | null;
}
declare global { }
declare module "foo" { }
export
as
namespace
a
;
type NamedTuple = [a: symbol, ...b: string[]]
const foo = bar!
type OptionalType = [number?]
class Class {
    constructor(private a)
}
type QualifiedName = A.B
type TemplateLiteralType = \`A\${B}C\`
const typeAssertion = <string>"foo"
type Keyof = keyof T
type Typeof = typeof typeAssertion
type TypePredicate = (v:any)=>v is T

\` 1`] = `
Object {
  "operands": Array [
    "a",
    "b",
    "c",
    "d",
    "a",
    "b",
    "c",
    "d",
    "Abs",
    "m",
    "this",
    "Abs",
    "a",
    "number",
    "void",
    "me",
    "this",
    "Abs",
    "a",
    "string",
    "void",
    "sm",
    "this",
    "Abs",
    "a",
    "boolean",
    "void",
    "sme",
    "this",
    "Abs",
    "a",
    "null",
    "void",
    "x",
    "number",
    "sx",
    "number",
    "a",
    "any",
    "42",
    "b",
    "bigint",
    "42n",
    "T",
    "any",
    "T2",
    "T3",
    "k",
    "string",
    "void",
    "T4",
    "string",
    "T3",
    "T5",
    "number",
    "key",
    "A",
    "T",
    "R",
    "Array",
    "string",
    "CallSignature",
    "T",
    "e",
    "T",
    "R",
    "ConstructSignature",
    "T",
    "e",
    "T",
    "R",
    "IMPL",
    "T",
    "T2",
    "ConditionalType",
    "T",
    "T",
    "Foo",
    "T",
    "U",
    "ConstructorType",
    "void",
    "FunctionType",
    "void",
    "fn",
    "a",
    "unknown",
    "void",
    "fn",
    "a",
    "unknown",
    "b",
    "never",
    "void",
    "fn",
    "void",
    "Enum",
    "B",
    "C",
    "\\"C\\"",
    "foo",
    "a",
    "require",
    "\\"foo\\"",
    "ImportType",
    "\\"foo\\"",
    "B",
    "UnpackedPromise",
    "T",
    "string",
    "T",
    "Promise",
    "U",
    "U",
    "T",
    "I",
    "E",
    "T",
    "IntersectionType",
    "A",
    "B",
    "UnionType",
    "A",
    "B",
    "Uppercase",
    "S",
    "string",
    "intrinsic",
    "MappedType",
    "key",
    "foo",
    "bar",
    "Required",
    "T",
    "P",
    "T",
    "P",
    "T",
    "Readonly",
    "T",
    "P",
    "T",
    "P",
    "T",
    "MethodSignature",
    "fn",
    "arg",
    "A",
    "R",
    "null",
    "global",
    "\\"foo\\"",
    "a",
    "NamedTuple",
    "symbol",
    "a",
    "string",
    "b",
    "foo",
    "bar",
    "OptionalType",
    "number",
    "Class",
    "constructor",
    "a",
    "QualifiedName",
    "A",
    "B",
    "TemplateLiteralType",
    "\`A\${",
    "}C\`",
    "B",
    "typeAssertion",
    "string",
    "\\"foo\\"",
    "Keyof",
    "T",
    "Typeof",
    "typeAssertion",
    "TypePredicate",
    "v",
    "any",
    "T",
    "v",
  ],
  "operators": Array [
    "=",
    "+",
    "+",
    "=",
    "+",
    "()",
    "+",
    "class",
    "abstract",
    "{}",
    "abstract",
    "()",
    ",",
    ":",
    ":",
    ":",
    "{}",
    "abstract",
    "()",
    ",",
    ":",
    ":",
    ":",
    "abstract",
    "static",
    "()",
    ",",
    ":",
    ":",
    ":",
    "{}",
    "abstract",
    "static",
    "()",
    ",",
    ":",
    ":",
    ":",
    "abstract",
    ":",
    "abstract",
    "static",
    ":",
    "const",
    ",",
    "=",
    ":",
    "=",
    ":",
    "type",
    "=",
    "type",
    "=",
    "{}",
    "type",
    "=",
    "{}",
    "[]",
    ":",
    ":",
    "type",
    "=",
    "[]",
    "type",
    "=",
    "{}",
    ":",
    "type",
    "=",
    "[]",
    "type",
    "=",
    "<>",
    "interface",
    "{}",
    "()",
    "<>",
    ":",
    ":",
    "interface",
    "{}",
    "new",
    "()",
    "<>",
    ":",
    ":",
    "class",
    "implements",
    ",",
    "{}",
    "type",
    "=",
    "<>",
    "extends",
    "?:",
    "type",
    "=",
    "new",
    "()",
    "=>",
    "type",
    "=",
    "()",
    "=>",
    "function",
    "()",
    ":",
    ":",
    "function",
    "()",
    ",",
    ":",
    ":",
    ":",
    "function",
    "()",
    ":",
    "{}",
    "enum",
    "{}",
    ",",
    "=",
    "export",
    "=",
    "import",
    "=",
    "()",
    "type",
    "=",
    "import",
    "()",
    ".",
    "type",
    "=",
    "<>",
    "=",
    "extends",
    "?:",
    "<>",
    "infer",
    "interface",
    "extends",
    "implements",
    "{}",
    "type",
    "=",
    "&",
    "type",
    "=",
    "|",
    "type",
    "=",
    "<>",
    "extends",
    "type",
    "=",
    "{}",
    "[]",
    ":",
    "in",
    "type",
    "=",
    "<>",
    "{}",
    "[]",
    "-",
    "?",
    ":",
    "in",
    "keyof",
    "[]",
    "type",
    "=",
    "<>",
    "{}",
    "readonly",
    "[]",
    ":",
    "in",
    "keyof",
    "[]",
    "type",
    "=",
    "{}",
    "()",
    ":",
    ":",
    "|",
    "declare",
    "{}",
    "declare",
    "module",
    "{}",
    "export",
    "as",
    "namespace",
    "type",
    "=",
    "[]",
    ",",
    ":",
    "...",
    ":",
    "[]",
    "const",
    "=",
    "!",
    "type",
    "=",
    "[]",
    "?",
    "class",
    "{}",
    "()",
    "private",
    "type",
    "=",
    ".",
    "type",
    "=",
    "const",
    "=",
    "<>",
    "type",
    "=",
    "keyof",
    "type",
    "=",
    "typeof",
    "type",
    "=",
    "()",
    ":",
    "=>",
    "is",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSAbstractMethodDefinition\`
abstract m(this: Abs, a: number): void {}
\` 1`] = `
Object {
  "operands": Array [
    "m",
    "this",
    "Abs",
    "a",
    "number",
    "void",
  ],
  "operators": Array [
    "abstract",
    "()",
    ",",
    ":",
    ":",
    ":",
    "{}",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSAbstractMethodDefinition\`
abstract me(this: Abs, a: string): void
\` 1`] = `
Object {
  "operands": Array [
    "me",
    "this",
    "Abs",
    "a",
    "string",
    "void",
  ],
  "operators": Array [
    "abstract",
    "()",
    ",",
    ":",
    ":",
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSAbstractMethodDefinition\`
static abstract sm(this: Abs, a: boolean): void {}
\` 1`] = `
Object {
  "operands": Array [
    "sm",
    "this",
    "Abs",
    "a",
    "boolean",
    "void",
  ],
  "operators": Array [
    "abstract",
    "static",
    "()",
    ",",
    ":",
    ":",
    ":",
    "{}",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSAbstractMethodDefinition\`
static abstract sme(this: Abs, a: null): void
\` 1`] = `
Object {
  "operands": Array [
    "sme",
    "this",
    "Abs",
    "a",
    "null",
    "void",
  ],
  "operators": Array [
    "abstract",
    "static",
    "()",
    ",",
    ":",
    ":",
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSAbstractPropertyDefinition\`
abstract x: number
\` 1`] = `
Object {
  "operands": Array [
    "x",
    "number",
  ],
  "operators": Array [
    "abstract",
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSAbstractPropertyDefinition\`
static abstract sx: number
\` 1`] = `
Object {
  "operands": Array [
    "sx",
    "number",
  ],
  "operators": Array [
    "abstract",
    "static",
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSAnyKeyword\`
any
\` 1`] = `
Object {
  "operands": Array [
    "any",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/input.ts TSArrayType\`
T[]
\` 1`] = `
Object {
  "operands": Array [
    "T",
  ],
  "operators": Array [
    "[]",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSArrayType\`
string[]
\` 1`] = `
Object {
  "operands": Array [
    "string",
  ],
  "operators": Array [
    "[]",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSBigIntKeyword\`
bigint
\` 1`] = `
Object {
  "operands": Array [
    "bigint",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/input.ts TSBooleanKeyword\`
boolean
\` 1`] = `
Object {
  "operands": Array [
    "boolean",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/input.ts TSCallSignatureDeclaration\`
<T> (e: T): R
\` 1`] = `
Object {
  "operands": Array [
    "T",
    "e",
    "T",
    "R",
  ],
  "operators": Array [
    "()",
    "<>",
    ":",
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSClassImplements\`
T2
\` 1`] = `
Object {
  "operands": Array [
    "T2",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/input.ts TSConditionalType\`
T extends Foo ? T : U
\` 1`] = `
Object {
  "operands": Array [
    "T",
    "Foo",
    "T",
    "U",
  ],
  "operators": Array [
    "extends",
    "?:",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSConditionalType\`
T extends Promise<infer U>
  ? U
  : T
\` 1`] = `
Object {
  "operands": Array [
    "T",
    "Promise",
    "U",
    "U",
    "T",
  ],
  "operators": Array [
    "extends",
    "?:",
    "<>",
    "infer",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSConstructSignatureDeclaration\`
new <T> (e: T): R
\` 1`] = `
Object {
  "operands": Array [
    "T",
    "e",
    "T",
    "R",
  ],
  "operators": Array [
    "new",
    "()",
    "<>",
    ":",
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSConstructorType\`
new ()=>void
\` 1`] = `
Object {
  "operands": Array [
    "void",
  ],
  "operators": Array [
    "new",
    "()",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSDeclareFunction\`
function fn(a: unknown): void;
\` 1`] = `
Object {
  "operands": Array [
    "fn",
    "a",
    "unknown",
    "void",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSDeclareFunction\`
function fn(a: unknown, b: never): void;
\` 1`] = `
Object {
  "operands": Array [
    "fn",
    "a",
    "unknown",
    "b",
    "never",
    "void",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSEmptyBodyFunctionExpression\`
(private a)
\` 1`] = `
Object {
  "operands": Array [
    "a",
  ],
  "operators": Array [
    "function",
    "()",
    "private",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSEmptyBodyFunctionExpression\`
(this: Abs, a: null): void
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "Abs",
    "a",
    "null",
    "void",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSEmptyBodyFunctionExpression\`
(this: Abs, a: string): void
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "Abs",
    "a",
    "string",
    "void",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSEnumDeclaration\`
enum Enum {
    B,
    C = "C"
}
\` 1`] = `
Object {
  "operands": Array [
    "Enum",
    "B",
    "C",
    "\\"C\\"",
  ],
  "operators": Array [
    "enum",
    "{}",
    ",",
    "=",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSEnumMember\`
B
\` 1`] = `
Object {
  "operands": Array [
    "B",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/input.ts TSEnumMember\`
C = "C"
\` 1`] = `
Object {
  "operands": Array [
    "C",
    "\\"C\\"",
  ],
  "operators": Array [
    "=",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSExportAssignment\`
export = foo
\` 1`] = `
Object {
  "operands": Array [
    "foo",
  ],
  "operators": Array [
    "export",
    "=",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSExternalModuleReference\`
require("foo")
\` 1`] = `
Object {
  "operands": Array [
    "require",
    "\\"foo\\"",
  ],
  "operators": Array [
    "()",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSFunctionType\`
()=>void
\` 1`] = `
Object {
  "operands": Array [
    "void",
  ],
  "operators": Array [
    "()",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSFunctionType\`
(v:any)=>v is T
\` 1`] = `
Object {
  "operands": Array [
    "v",
    "any",
    "T",
    "v",
  ],
  "operators": Array [
    "()",
    ":",
    "=>",
    "is",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSImportEqualsDeclaration\`
import a = require("foo")
\` 1`] = `
Object {
  "operands": Array [
    "a",
    "require",
    "\\"foo\\"",
  ],
  "operators": Array [
    "import",
    "=",
    "()",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSImportType\`
import("foo").B
\` 1`] = `
Object {
  "operands": Array [
    "\\"foo\\"",
    "B",
  ],
  "operators": Array [
    "import",
    "()",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSIndexSignature\`
[k: string ]: void
\` 1`] = `
Object {
  "operands": Array [
    "k",
    "string",
    "void",
  ],
  "operators": Array [
    "[]",
    ":",
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSIndexedAccessType\`
T[P]
\` 1`] = `
Object {
  "operands": Array [
    "P",
    "T",
  ],
  "operators": Array [
    "[]",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSIndexedAccessType\`
T3[string]
\` 1`] = `
Object {
  "operands": Array [
    "string",
    "T3",
  ],
  "operators": Array [
    "[]",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSInferType\`
infer U
\` 1`] = `
Object {
  "operands": Array [
    "U",
  ],
  "operators": Array [
    "infer",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSInterfaceBody\`
{ <T> (e: T): R }
\` 1`] = `
Object {
  "operands": Array [
    "T",
    "e",
    "T",
    "R",
  ],
  "operators": Array [
    "{}",
    "()",
    "<>",
    ":",
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSInterfaceBody\`
{ new <T> (e: T): R }
\` 1`] = `
Object {
  "operands": Array [
    "T",
    "e",
    "T",
    "R",
  ],
  "operators": Array [
    "{}",
    "new",
    "()",
    "<>",
    ":",
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSInterfaceDeclaration\`
interface CallSignature { <T> (e: T): R }
\` 1`] = `
Object {
  "operands": Array [
    "CallSignature",
    "T",
    "e",
    "T",
    "R",
  ],
  "operators": Array [
    "interface",
    "{}",
    "()",
    "<>",
    ":",
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSInterfaceDeclaration\`
interface ConstructSignature { new <T> (e: T): R }
\` 1`] = `
Object {
  "operands": Array [
    "ConstructSignature",
    "T",
    "e",
    "T",
    "R",
  ],
  "operators": Array [
    "interface",
    "{}",
    "new",
    "()",
    "<>",
    ":",
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSInterfaceDeclaration\`
interface I extends E implements T {}
\` 1`] = `
Object {
  "operands": Array [
    "I",
    "E",
    "T",
  ],
  "operators": Array [
    "interface",
    "extends",
    "implements",
    "{}",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSInterfaceHeritage\`
E
\` 1`] = `
Object {
  "operands": Array [
    "E",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/input.ts TSIntersectionType\`
A & B
\` 1`] = `
Object {
  "operands": Array [
    "A",
    "B",
  ],
  "operators": Array [
    "&",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSIntrinsicKeyword\`
intrinsic
\` 1`] = `
Object {
  "operands": Array [
    "intrinsic",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/input.ts TSMappedType\`
{
    [P in keyof T]-?: T[P];
}
\` 1`] = `
Object {
  "operands": Array [
    "P",
    "T",
    "P",
    "T",
  ],
  "operators": Array [
    "{}",
    "[]",
    "-",
    "?",
    ":",
    "in",
    "keyof",
    "[]",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSMappedType\`
{
    readonly [P in keyof T]: T[P];
}
\` 1`] = `
Object {
  "operands": Array [
    "P",
    "T",
    "P",
    "T",
  ],
  "operators": Array [
    "{}",
    "readonly",
    "[]",
    ":",
    "in",
    "keyof",
    "[]",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSMappedType\`
{[key in foo]: bar}
\` 1`] = `
Object {
  "operands": Array [
    "key",
    "foo",
    "bar",
  ],
  "operators": Array [
    "{}",
    "[]",
    ":",
    "in",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSMethodSignature\`
fn(arg: A): R | null;
\` 1`] = `
Object {
  "operands": Array [
    "fn",
    "arg",
    "A",
    "R",
    "null",
  ],
  "operators": Array [
    "()",
    ":",
    ":",
    "|",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSModuleBlock\`
{ }
\` 1`] = `
Object {
  "operands": Array [],
  "operators": Array [
    "{}",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSModuleDeclaration\`
declare global { }
\` 1`] = `
Object {
  "operands": Array [
    "global",
  ],
  "operators": Array [
    "declare",
    "{}",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSModuleDeclaration\`
declare module "foo" { }
\` 1`] = `
Object {
  "operands": Array [
    "\\"foo\\"",
  ],
  "operators": Array [
    "declare",
    "module",
    "{}",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSNamedTupleMember\`
a: symbol
\` 1`] = `
Object {
  "operands": Array [
    "symbol",
    "a",
  ],
  "operators": Array [
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSNamedTupleMember\`
b: string[]
\` 1`] = `
Object {
  "operands": Array [
    "string",
    "b",
  ],
  "operators": Array [
    ":",
    "[]",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSNamespaceExportDeclaration\`
export
as
namespace
a
;
\` 1`] = `
Object {
  "operands": Array [
    "a",
  ],
  "operators": Array [
    "export",
    "as",
    "namespace",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSNeverKeyword\`
never
\` 1`] = `
Object {
  "operands": Array [
    "never",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/input.ts TSNonNullExpression\`
bar!
\` 1`] = `
Object {
  "operands": Array [
    "bar",
  ],
  "operators": Array [
    "!",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSNullKeyword\`
null
\` 1`] = `
Object {
  "operands": Array [
    "null",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/input.ts TSNumberKeyword\`
number
\` 1`] = `
Object {
  "operands": Array [
    "number",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/input.ts TSOptionalType\`
number?
\` 1`] = `
Object {
  "operands": Array [
    "number",
  ],
  "operators": Array [
    "?",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSParameterProperty\`
private a
\` 1`] = `
Object {
  "operands": Array [
    "a",
  ],
  "operators": Array [
    "private",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSPropertySignature\`
key:number
\` 1`] = `
Object {
  "operands": Array [
    "number",
    "key",
  ],
  "operators": Array [
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSRestType\`
...b: string[]
\` 1`] = `
Object {
  "operands": Array [
    "string",
    "b",
  ],
  "operators": Array [
    "...",
    ":",
    "[]",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSStringKeyword\`
string
\` 1`] = `
Object {
  "operands": Array [
    "string",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/input.ts TSSymbolKeyword\`
symbol
\` 1`] = `
Object {
  "operands": Array [
    "symbol",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/input.ts TSTemplateLiteralType\`
\`A\${B}C\`
\` 1`] = `
Object {
  "operands": Array [
    "\`A\${",
    "}C\`",
    "B",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/input.ts TSTupleType\`
[a: symbol, ...b: string[]]
\` 1`] = `
Object {
  "operands": Array [
    "symbol",
    "a",
    "string",
    "b",
  ],
  "operators": Array [
    "[]",
    ",",
    ":",
    "...",
    ":",
    "[]",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTupleType\`
[number?]
\` 1`] = `
Object {
  "operands": Array [
    "number",
  ],
  "operators": Array [
    "[]",
    "?",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeAliasDeclaration\`
type A = T[]
\` 1`] = `
Object {
  "operands": Array [
    "A",
    "T",
  ],
  "operators": Array [
    "type",
    "=",
    "[]",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeAliasDeclaration\`
type ConditionalType<T> = T extends Foo ? T : U
\` 1`] = `
Object {
  "operands": Array [
    "ConditionalType",
    "T",
    "T",
    "Foo",
    "T",
    "U",
  ],
  "operators": Array [
    "type",
    "=",
    "<>",
    "extends",
    "?:",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeAliasDeclaration\`
type ConstructorType = new ()=>void
\` 1`] = `
Object {
  "operands": Array [
    "ConstructorType",
    "void",
  ],
  "operators": Array [
    "type",
    "=",
    "new",
    "()",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeAliasDeclaration\`
type FunctionType = ()=>void
\` 1`] = `
Object {
  "operands": Array [
    "FunctionType",
    "void",
  ],
  "operators": Array [
    "type",
    "=",
    "()",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeAliasDeclaration\`
type ImportType = import("foo").B
\` 1`] = `
Object {
  "operands": Array [
    "ImportType",
    "\\"foo\\"",
    "B",
  ],
  "operators": Array [
    "type",
    "=",
    "import",
    "()",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeAliasDeclaration\`
type IntersectionType = A & B
\` 1`] = `
Object {
  "operands": Array [
    "IntersectionType",
    "A",
    "B",
  ],
  "operators": Array [
    "type",
    "=",
    "&",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeAliasDeclaration\`
type Keyof = keyof T
\` 1`] = `
Object {
  "operands": Array [
    "Keyof",
    "T",
  ],
  "operators": Array [
    "type",
    "=",
    "keyof",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeAliasDeclaration\`
type MappedType = {[key in foo]: bar}
\` 1`] = `
Object {
  "operands": Array [
    "MappedType",
    "key",
    "foo",
    "bar",
  ],
  "operators": Array [
    "type",
    "=",
    "{}",
    "[]",
    ":",
    "in",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeAliasDeclaration\`
type MethodSignature = {
    fn(arg: A): R | null;
}
\` 1`] = `
Object {
  "operands": Array [
    "MethodSignature",
    "fn",
    "arg",
    "A",
    "R",
    "null",
  ],
  "operators": Array [
    "type",
    "=",
    "{}",
    "()",
    ":",
    ":",
    "|",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeAliasDeclaration\`
type NamedTuple = [a: symbol, ...b: string[]]
\` 1`] = `
Object {
  "operands": Array [
    "NamedTuple",
    "symbol",
    "a",
    "string",
    "b",
  ],
  "operators": Array [
    "type",
    "=",
    "[]",
    ",",
    ":",
    "...",
    ":",
    "[]",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeAliasDeclaration\`
type OptionalType = [number?]
\` 1`] = `
Object {
  "operands": Array [
    "OptionalType",
    "number",
  ],
  "operators": Array [
    "type",
    "=",
    "[]",
    "?",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeAliasDeclaration\`
type QualifiedName = A.B
\` 1`] = `
Object {
  "operands": Array [
    "QualifiedName",
    "A",
    "B",
  ],
  "operators": Array [
    "type",
    "=",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeAliasDeclaration\`
type R = Array<string>
\` 1`] = `
Object {
  "operands": Array [
    "R",
    "Array",
    "string",
  ],
  "operators": Array [
    "type",
    "=",
    "<>",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeAliasDeclaration\`
type Readonly<T> = {
    readonly [P in keyof T]: T[P];
};
\` 1`] = `
Object {
  "operands": Array [
    "Readonly",
    "T",
    "P",
    "T",
    "P",
    "T",
  ],
  "operators": Array [
    "type",
    "=",
    "<>",
    "{}",
    "readonly",
    "[]",
    ":",
    "in",
    "keyof",
    "[]",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeAliasDeclaration\`
type Required<T> = {
    [P in keyof T]-?: T[P];
};
\` 1`] = `
Object {
  "operands": Array [
    "Required",
    "T",
    "P",
    "T",
    "P",
    "T",
  ],
  "operators": Array [
    "type",
    "=",
    "<>",
    "{}",
    "[]",
    "-",
    "?",
    ":",
    "in",
    "keyof",
    "[]",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeAliasDeclaration\`
type T = any
\` 1`] = `
Object {
  "operands": Array [
    "T",
    "any",
  ],
  "operators": Array [
    "type",
    "=",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeAliasDeclaration\`
type T2 = {}
\` 1`] = `
Object {
  "operands": Array [
    "T2",
  ],
  "operators": Array [
    "type",
    "=",
    "{}",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeAliasDeclaration\`
type T3 = { [k: string ]: void };
\` 1`] = `
Object {
  "operands": Array [
    "T3",
    "k",
    "string",
    "void",
  ],
  "operators": Array [
    "type",
    "=",
    "{}",
    "[]",
    ":",
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeAliasDeclaration\`
type T4 = T3[string]
\` 1`] = `
Object {
  "operands": Array [
    "T4",
    "string",
    "T3",
  ],
  "operators": Array [
    "type",
    "=",
    "[]",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeAliasDeclaration\`
type T5 = {key:number}
\` 1`] = `
Object {
  "operands": Array [
    "T5",
    "number",
    "key",
  ],
  "operators": Array [
    "type",
    "=",
    "{}",
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeAliasDeclaration\`
type TemplateLiteralType = \`A\${B}C\`
\` 1`] = `
Object {
  "operands": Array [
    "TemplateLiteralType",
    "\`A\${",
    "}C\`",
    "B",
  ],
  "operators": Array [
    "type",
    "=",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeAliasDeclaration\`
type TypePredicate = (v:any)=>v is T
\` 1`] = `
Object {
  "operands": Array [
    "TypePredicate",
    "v",
    "any",
    "T",
    "v",
  ],
  "operators": Array [
    "type",
    "=",
    "()",
    ":",
    "=>",
    "is",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeAliasDeclaration\`
type Typeof = typeof typeAssertion
\` 1`] = `
Object {
  "operands": Array [
    "Typeof",
    "typeAssertion",
  ],
  "operators": Array [
    "type",
    "=",
    "typeof",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeAliasDeclaration\`
type UnionType = A | B
\` 1`] = `
Object {
  "operands": Array [
    "UnionType",
    "A",
    "B",
  ],
  "operators": Array [
    "type",
    "=",
    "|",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeAliasDeclaration\`
type UnpackedPromise<T=string> = T extends Promise<infer U>
  ? U
  : T
\` 1`] = `
Object {
  "operands": Array [
    "UnpackedPromise",
    "T",
    "string",
    "T",
    "Promise",
    "U",
    "U",
    "T",
  ],
  "operators": Array [
    "type",
    "=",
    "<>",
    "=",
    "extends",
    "?:",
    "<>",
    "infer",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeAliasDeclaration\`
type Uppercase<S extends string> = intrinsic;
\` 1`] = `
Object {
  "operands": Array [
    "Uppercase",
    "S",
    "string",
    "intrinsic",
  ],
  "operators": Array [
    "type",
    "=",
    "<>",
    "extends",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeAnnotation\`
: A
\` 1`] = `
Object {
  "operands": Array [
    "A",
  ],
  "operators": Array [
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeAnnotation\`
: Abs
\` 1`] = `
Object {
  "operands": Array [
    "Abs",
  ],
  "operators": Array [
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeAnnotation\`
: R
\` 1`] = `
Object {
  "operands": Array [
    "R",
  ],
  "operators": Array [
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeAnnotation\`
: R | null
\` 1`] = `
Object {
  "operands": Array [
    "R",
    "null",
  ],
  "operators": Array [
    ":",
    "|",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeAnnotation\`
: T
\` 1`] = `
Object {
  "operands": Array [
    "T",
  ],
  "operators": Array [
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeAnnotation\`
: bigint
\` 1`] = `
Object {
  "operands": Array [
    "bigint",
  ],
  "operators": Array [
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeAnnotation\`
: boolean
\` 1`] = `
Object {
  "operands": Array [
    "boolean",
  ],
  "operators": Array [
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeAnnotation\`
: never
\` 1`] = `
Object {
  "operands": Array [
    "never",
  ],
  "operators": Array [
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeAnnotation\`
: null
\` 1`] = `
Object {
  "operands": Array [
    "null",
  ],
  "operators": Array [
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeAnnotation\`
: number
\` 1`] = `
Object {
  "operands": Array [
    "number",
  ],
  "operators": Array [
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeAnnotation\`
: string
\` 1`] = `
Object {
  "operands": Array [
    "string",
  ],
  "operators": Array [
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeAnnotation\`
: unknown
\` 1`] = `
Object {
  "operands": Array [
    "unknown",
  ],
  "operators": Array [
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeAnnotation\`
: void
\` 1`] = `
Object {
  "operands": Array [
    "void",
  ],
  "operators": Array [
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeAnnotation\`
:any
\` 1`] = `
Object {
  "operands": Array [
    "any",
  ],
  "operators": Array [
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeAnnotation\`
:number
\` 1`] = `
Object {
  "operands": Array [
    "number",
  ],
  "operators": Array [
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeAnnotation\`
=>v is T
\` 1`] = `
Object {
  "operands": Array [
    "T",
    "v",
  ],
  "operators": Array [
    ":",
    "is",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeAnnotation\`
=>void
\` 1`] = `
Object {
  "operands": Array [
    "void",
  ],
  "operators": Array [
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeAssertion\`
<string>"foo"
\` 1`] = `
Object {
  "operands": Array [
    "string",
    "\\"foo\\"",
  ],
  "operators": Array [
    "<>",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeLiteral\`
{
    fn(arg: A): R | null;
}
\` 1`] = `
Object {
  "operands": Array [
    "fn",
    "arg",
    "A",
    "R",
    "null",
  ],
  "operators": Array [
    "{}",
    "()",
    ":",
    ":",
    "|",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeLiteral\`
{ [k: string ]: void }
\` 1`] = `
Object {
  "operands": Array [
    "k",
    "string",
    "void",
  ],
  "operators": Array [
    "{}",
    "[]",
    ":",
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeLiteral\`
{key:number}
\` 1`] = `
Object {
  "operands": Array [
    "number",
    "key",
  ],
  "operators": Array [
    "{}",
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeOperator\`
keyof T
\` 1`] = `
Object {
  "operands": Array [
    "T",
  ],
  "operators": Array [
    "keyof",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeParameter\`
P in keyof T
\` 1`] = `
Object {
  "operands": Array [
    "P",
    "T",
  ],
  "operators": Array [
    "extends",
    "keyof",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeParameter\`
S extends string
\` 1`] = `
Object {
  "operands": Array [
    "S",
    "string",
  ],
  "operators": Array [
    "extends",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeParameter\`
T=string
\` 1`] = `
Object {
  "operands": Array [
    "T",
    "string",
  ],
  "operators": Array [
    "=",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeParameter\`
key in foo
\` 1`] = `
Object {
  "operands": Array [
    "key",
    "foo",
  ],
  "operators": Array [
    "extends",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeParameterDeclaration\`
<S extends string>
\` 1`] = `
Object {
  "operands": Array [
    "S",
    "string",
  ],
  "operators": Array [
    "<>",
    "extends",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeParameterDeclaration\`
<T=string>
\` 1`] = `
Object {
  "operands": Array [
    "T",
    "string",
  ],
  "operators": Array [
    "<>",
    "=",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeParameterDeclaration\`
<T>
\` 1`] = `
Object {
  "operands": Array [
    "T",
  ],
  "operators": Array [
    "<>",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeParameterInstantiation\`
<infer U>
\` 1`] = `
Object {
  "operands": Array [
    "U",
  ],
  "operators": Array [
    "<>",
    "infer",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeParameterInstantiation\`
<string>
\` 1`] = `
Object {
  "operands": Array [
    "string",
  ],
  "operators": Array [
    "<>",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypePredicate\`
v is T
\` 1`] = `
Object {
  "operands": Array [
    "T",
    "v",
  ],
  "operators": Array [
    "is",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeQuery\`
typeof typeAssertion
\` 1`] = `
Object {
  "operands": Array [
    "typeAssertion",
  ],
  "operators": Array [
    "typeof",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeReference\`
A
\` 1`] = `
Object {
  "operands": Array [
    "A",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeReference\`
A.B
\` 1`] = `
Object {
  "operands": Array [
    "A",
    "B",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeReference\`
Abs
\` 1`] = `
Object {
  "operands": Array [
    "Abs",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeReference\`
Array<string>
\` 1`] = `
Object {
  "operands": Array [
    "Array",
    "string",
  ],
  "operators": Array [
    "<>",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeReference\`
Foo
\` 1`] = `
Object {
  "operands": Array [
    "Foo",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeReference\`
P
\` 1`] = `
Object {
  "operands": Array [
    "P",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeReference\`
Promise<infer U>
\` 1`] = `
Object {
  "operands": Array [
    "Promise",
    "U",
  ],
  "operators": Array [
    "<>",
    "infer",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeReference\`
R
\` 1`] = `
Object {
  "operands": Array [
    "R",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeReference\`
T
\` 1`] = `
Object {
  "operands": Array [
    "T",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeReference\`
T3
\` 1`] = `
Object {
  "operands": Array [
    "T3",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeReference\`
U
\` 1`] = `
Object {
  "operands": Array [
    "U",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeReference\`
bar
\` 1`] = `
Object {
  "operands": Array [
    "bar",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/input.ts TSTypeReference\`
foo
\` 1`] = `
Object {
  "operands": Array [
    "foo",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/input.ts TSUnionType\`
A | B
\` 1`] = `
Object {
  "operands": Array [
    "A",
    "B",
  ],
  "operators": Array [
    "|",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSUnionType\`
R | null
\` 1`] = `
Object {
  "operands": Array [
    "R",
    "null",
  ],
  "operators": Array [
    "|",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts TSUnknownKeyword\`
unknown
\` 1`] = `
Object {
  "operands": Array [
    "unknown",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/input.ts TSVoidKeyword\`
void
\` 1`] = `
Object {
  "operands": Array [
    "void",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/input.ts TemplateElement\`
\`A\${
\` 1`] = `
Object {
  "operands": Array [
    "\`A\`",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/input.ts TemplateElement\`
}C\`
\` 1`] = `
Object {
  "operands": Array [
    "\`C\`",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/input.ts VariableDeclaration\`
const a:any=42, b: bigint = 42n
\` 1`] = `
Object {
  "operands": Array [
    "a",
    "any",
    "42",
    "b",
    "bigint",
    "42n",
  ],
  "operators": Array [
    "const",
    ",",
    "=",
    ":",
    "=",
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts VariableDeclaration\`
const foo = bar!
\` 1`] = `
Object {
  "operands": Array [
    "foo",
    "bar",
  ],
  "operators": Array [
    "const",
    "=",
    "!",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts VariableDeclaration\`
const typeAssertion = <string>"foo"
\` 1`] = `
Object {
  "operands": Array [
    "typeAssertion",
    "string",
    "\\"foo\\"",
  ],
  "operators": Array [
    "const",
    "=",
    "<>",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts VariableDeclarator\`
a:any=42
\` 1`] = `
Object {
  "operands": Array [
    "a",
    "any",
    "42",
  ],
  "operators": Array [
    "=",
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts VariableDeclarator\`
b: bigint = 42n
\` 1`] = `
Object {
  "operands": Array [
    "b",
    "bigint",
    "42n",
  ],
  "operators": Array [
    "=",
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts VariableDeclarator\`
foo = bar!
\` 1`] = `
Object {
  "operands": Array [
    "foo",
    "bar",
  ],
  "operators": Array [
    "=",
    "!",
  ],
}
`;

exports[`test for extractTokens /ts/input.ts VariableDeclarator\`
typeAssertion = <string>"foo"
\` 1`] = `
Object {
  "operands": Array [
    "typeAssertion",
    "string",
    "\\"foo\\"",
  ],
  "operators": Array [
    "=",
    "<>",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ArrayExpression\`
[]
\` 1`] = `
Object {
  "operands": Array [],
  "operators": Array [
    "[]",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ArrowFunctionExpression\`
(node: TSESTree.Node, parent: TSESTree.Node | null) => {
            const extract = EXTRACT_TOKENS[node.type] as any
            if (
                extract &&
                Object.prototype.hasOwnProperty.call(EXTRACT_TOKENS, node.type)
            ) {
                extract.call(context, node, parent)
            }
        }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "Node",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "extract",
    "EXTRACT_TOKENS",
    "node",
    "type",
    "any",
    "extract",
    "Object",
    "prototype",
    "hasOwnProperty",
    "call",
    "EXTRACT_TOKENS",
    "node",
    "type",
    "extract",
    "call",
    "context",
    "node",
    "parent",
  ],
  "operators": Array [
    "()",
    ",",
    "=>",
    ":",
    ".",
    ":",
    "|",
    ".",
    "{}",
    "const",
    "=",
    "as",
    "[]",
    ".",
    "if()",
    "&&",
    "()",
    ",",
    ".",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ",",
    ",",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ArrowFunctionExpression\`
(spec) => spec.type === AST_NODE_TYPES.ImportSpecifier
\` 1`] = `
Object {
  "operands": Array [
    "spec",
    "spec",
    "type",
    "AST_NODE_TYPES",
    "ImportSpecifier",
  ],
  "operators": Array [
    "=>",
    "===",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts AssignmentPattern\`
count = 1
\` 1`] = `
Object {
  "operands": Array [
    "count",
    "1",
  ],
  "operators": Array [
    "=",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
"bigint" in node
\` 1`] = `
Object {
  "operands": Array [
    "\\"bigint\\"",
    "node",
  ],
  "operators": Array [
    "in",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
"regex" in node
\` 1`] = `
Object {
  "operands": Array [
    "\\"regex\\"",
    "node",
  ],
  "operators": Array [
    "in",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
count === 1
\` 1`] = `
Object {
  "operands": Array [
    "count",
    "1",
  ],
  "operators": Array [
    "===",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
getPrecedence(node) > getPrecedence(node.argument)
\` 1`] = `
Object {
  "operands": Array [
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "argument",
  ],
  "operators": Array [
    ">",
    "()",
    "()",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
getPrecedence(node) > getPrecedence(node.object)
\` 1`] = `
Object {
  "operands": Array [
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "object",
  ],
  "operators": Array [
    ">",
    "()",
    "()",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
getPrecedence(node) >= getPrecedence(node.argument)
\` 1`] = `
Object {
  "operands": Array [
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "argument",
  ],
  "operators": Array [
    ">=",
    "()",
    "()",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
getPrecedence(node) >= getPrecedence(node.callee)
\` 1`] = `
Object {
  "operands": Array [
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "callee",
  ],
  "operators": Array [
    ">=",
    "()",
    "()",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
getPrecedence(node) >= getPrecedence(node.right)
\` 1`] = `
Object {
  "operands": Array [
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "right",
  ],
  "operators": Array [
    ">=",
    "()",
    "()",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
getPrecedence(node) >= getPrecedence(node.test)
\` 1`] = `
Object {
  "operands": Array [
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "test",
  ],
  "operators": Array [
    ">=",
    "()",
    "()",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
index < count
\` 1`] = `
Object {
  "operands": Array [
    "index",
    "count",
  ],
  "operators": Array [
    "<",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
index < parent.quasis.length - 1
\` 1`] = `
Object {
  "operands": Array [
    "index",
    "parent",
    "quasis",
    "length",
    "1",
  ],
  "operators": Array [
    "<",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
index > 0
\` 1`] = `
Object {
  "operands": Array [
    "index",
    "0",
  ],
  "operators": Array [
    ">",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.arguments.length - 1
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "arguments",
    "length",
    "1",
  ],
  "operators": Array [
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.body.type === AST_NODE_TYPES.ObjectExpression
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "body",
    "type",
    "AST_NODE_TYPES",
    "ObjectExpression",
  ],
  "operators": Array [
    "===",
    ".",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.declarations.length - 1
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "declarations",
    "length",
    "1",
  ],
  "operators": Array [
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.elementTypes.length - 1
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "elementTypes",
    "length",
    "1",
  ],
  "operators": Array [
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.elements.length - 1
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "elements",
    "length",
    "1",
  ],
  "operators": Array [
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.exportKind === "type"
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "exportKind",
    "\\"type\\"",
  ],
  "operators": Array [
    "===",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.expressions.length - 1
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "expressions",
    "length",
    "1",
  ],
  "operators": Array [
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.extends.length - 1
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "extends",
    "length",
    "1",
  ],
  "operators": Array [
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.implements.length - 1
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "implements",
    "length",
    "1",
  ],
  "operators": Array [
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.importKind === "type"
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "importKind",
    "\\"type\\"",
  ],
  "operators": Array [
    "===",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.kind === "get"
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "kind",
    "\\"get\\"",
  ],
  "operators": Array [
    "===",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.kind === "set"
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "kind",
    "\\"set\\"",
  ],
  "operators": Array [
    "===",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.local.name !== node.exported.name
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "local",
    "name",
    "node",
    "exported",
    "name",
  ],
  "operators": Array [
    "!==",
    ".",
    ".",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.local.name !== node.imported.name
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "local",
    "name",
    "node",
    "imported",
    "name",
  ],
  "operators": Array [
    "!==",
    ".",
    ".",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.members.length - 1
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "members",
    "length",
    "1",
  ],
  "operators": Array [
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.operator === "!="
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "operator",
    "\\"!=\\"",
  ],
  "operators": Array [
    "===",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.operator === "!=="
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "operator",
    "\\"!==\\"",
  ],
  "operators": Array [
    "===",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.operator === "%"
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "operator",
    "\\"%\\"",
  ],
  "operators": Array [
    "===",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.operator === "&"
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "operator",
    "\\"&\\"",
  ],
  "operators": Array [
    "===",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.operator === "&&"
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "operator",
    "\\"&&\\"",
  ],
  "operators": Array [
    "===",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.operator === "*"
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "operator",
    "\\"*\\"",
  ],
  "operators": Array [
    "===",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.operator === "**"
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "operator",
    "\\"**\\"",
  ],
  "operators": Array [
    "===",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.operator === "+"
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "operator",
    "\\"+\\"",
  ],
  "operators": Array [
    "===",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.operator === "/"
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "operator",
    "\\"/\\"",
  ],
  "operators": Array [
    "===",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.operator === "<"
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "operator",
    "\\"<\\"",
  ],
  "operators": Array [
    "===",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.operator === "<<"
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "operator",
    "\\"<<\\"",
  ],
  "operators": Array [
    "===",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.operator === "<="
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "operator",
    "\\"<=\\"",
  ],
  "operators": Array [
    "===",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.operator === "=="
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "operator",
    "\\"==\\"",
  ],
  "operators": Array [
    "===",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.operator === "==="
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "operator",
    "\\"===\\"",
  ],
  "operators": Array [
    "===",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.operator === ">"
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "operator",
    "\\">\\"",
  ],
  "operators": Array [
    "===",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.operator === ">="
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "operator",
    "\\">=\\"",
  ],
  "operators": Array [
    "===",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.operator === ">>"
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "operator",
    "\\">>\\"",
  ],
  "operators": Array [
    "===",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.operator === ">>>"
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "operator",
    "\\">>>\\"",
  ],
  "operators": Array [
    "===",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.operator === "??"
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "operator",
    "\\"??\\"",
  ],
  "operators": Array [
    "===",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.operator === "^"
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "operator",
    "\\"^\\"",
  ],
  "operators": Array [
    "===",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.operator === "|"
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "operator",
    "\\"|\\"",
  ],
  "operators": Array [
    "===",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.operator === "||"
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "operator",
    "\\"||\\"",
  ],
  "operators": Array [
    "===",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.operator === "-"
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "operator",
    "\\"-\\"",
  ],
  "operators": Array [
    "===",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.operator === "in"
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "operator",
    "\\"in\\"",
  ],
  "operators": Array [
    "===",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.operator === "instanceof"
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "operator",
    "\\"instanceof\\"",
  ],
  "operators": Array [
    "===",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.params.length !== 1
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "params",
    "length",
    "1",
  ],
  "operators": Array [
    "!==",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.params.length - 1
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "params",
    "length",
    "1",
  ],
  "operators": Array [
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.params[0].type !== AST_NODE_TYPES.Identifier
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "params",
    "0",
    "type",
    "AST_NODE_TYPES",
    "Identifier",
  ],
  "operators": Array [
    "!==",
    ".",
    "[]",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.properties.length - 1
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "properties",
    "length",
    "1",
  ],
  "operators": Array [
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.specifiers.length - 1
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "specifiers",
    "length",
    "1",
  ],
  "operators": Array [
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.type === AST_NODE_TYPES.ArrowFunctionExpression
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "type",
    "AST_NODE_TYPES",
    "ArrowFunctionExpression",
  ],
  "operators": Array [
    "===",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.type === AST_NODE_TYPES.AssignmentExpression
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "type",
    "AST_NODE_TYPES",
    "AssignmentExpression",
  ],
  "operators": Array [
    "===",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.type === AST_NODE_TYPES.AwaitExpression
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "type",
    "AST_NODE_TYPES",
    "AwaitExpression",
  ],
  "operators": Array [
    "===",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.type === AST_NODE_TYPES.BinaryExpression
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "type",
    "AST_NODE_TYPES",
    "BinaryExpression",
  ],
  "operators": Array [
    "===",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.type === AST_NODE_TYPES.CallExpression
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "type",
    "AST_NODE_TYPES",
    "CallExpression",
  ],
  "operators": Array [
    "===",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.type === AST_NODE_TYPES.ChainExpression
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "type",
    "AST_NODE_TYPES",
    "ChainExpression",
  ],
  "operators": Array [
    "===",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.type === AST_NODE_TYPES.ConditionalExpression
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "type",
    "AST_NODE_TYPES",
    "ConditionalExpression",
  ],
  "operators": Array [
    "===",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.type === AST_NODE_TYPES.ImportExpression
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "type",
    "AST_NODE_TYPES",
    "ImportExpression",
  ],
  "operators": Array [
    "===",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.type === AST_NODE_TYPES.LogicalExpression
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "type",
    "AST_NODE_TYPES",
    "LogicalExpression",
  ],
  "operators": Array [
    "===",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.type === AST_NODE_TYPES.MemberExpression
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "type",
    "AST_NODE_TYPES",
    "MemberExpression",
  ],
  "operators": Array [
    "===",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.type === AST_NODE_TYPES.NewExpression
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "type",
    "AST_NODE_TYPES",
    "NewExpression",
  ],
  "operators": Array [
    "===",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.type === AST_NODE_TYPES.SequenceExpression
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "type",
    "AST_NODE_TYPES",
    "SequenceExpression",
  ],
  "operators": Array [
    "===",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.type === AST_NODE_TYPES.TSAsExpression
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "type",
    "AST_NODE_TYPES",
    "TSAsExpression",
  ],
  "operators": Array [
    "===",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.type === AST_NODE_TYPES.UnaryExpression
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "type",
    "AST_NODE_TYPES",
    "UnaryExpression",
  ],
  "operators": Array [
    "===",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.type === AST_NODE_TYPES.UpdateExpression
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "type",
    "AST_NODE_TYPES",
    "UpdateExpression",
  ],
  "operators": Array [
    "===",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.type === AST_NODE_TYPES.YieldExpression
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "type",
    "AST_NODE_TYPES",
    "YieldExpression",
  ],
  "operators": Array [
    "===",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
node.types.length - 1
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "types",
    "length",
    "1",
  ],
  "operators": Array [
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
parent.exported === node
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "exported",
    "node",
  ],
  "operators": Array [
    "===",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
parent.imported.name === node.name
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "imported",
    "name",
    "node",
    "name",
  ],
  "operators": Array [
    "===",
    ".",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
parent.local === node
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "local",
    "node",
  ],
  "operators": Array [
    "===",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
parent.local.name === node.name
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "local",
    "name",
    "node",
    "name",
  ],
  "operators": Array [
    "===",
    ".",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
parent.quasis.length - 1
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "quasis",
    "length",
    "1",
  ],
  "operators": Array [
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
parent.returnType === node
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "returnType",
    "node",
  ],
  "operators": Array [
    "===",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
parent.type !== AST_NODE_TYPES.MethodDefinition
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "type",
    "AST_NODE_TYPES",
    "MethodDefinition",
  ],
  "operators": Array [
    "!==",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
parent.type !== AST_NODE_TYPES.Property
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "type",
    "AST_NODE_TYPES",
    "Property",
  ],
  "operators": Array [
    "!==",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
parent.type !== AST_NODE_TYPES.TSAbstractMethodDefinition
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSAbstractMethodDefinition",
  ],
  "operators": Array [
    "!==",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
parent.type === AST_NODE_TYPES.ExportSpecifier
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "type",
    "AST_NODE_TYPES",
    "ExportSpecifier",
  ],
  "operators": Array [
    "===",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
parent.type === AST_NODE_TYPES.ImportSpecifier
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "type",
    "AST_NODE_TYPES",
    "ImportSpecifier",
  ],
  "operators": Array [
    "===",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
parent.type === AST_NODE_TYPES.Property
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "type",
    "AST_NODE_TYPES",
    "Property",
  ],
  "operators": Array [
    "===",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
parent.type === AST_NODE_TYPES.TSConstructorType
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSConstructorType",
  ],
  "operators": Array [
    "===",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
parent.type === AST_NODE_TYPES.TSFunctionType
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSFunctionType",
  ],
  "operators": Array [
    "===",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
parent.type === AST_NODE_TYPES.TSMappedType
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSMappedType",
  ],
  "operators": Array [
    "===",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
parent.type === AST_NODE_TYPES.TSTemplateLiteralType
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSTemplateLiteralType",
  ],
  "operators": Array [
    "===",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
parent.type === AST_NODE_TYPES.TSTypePredicate
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSTypePredicate",
  ],
  "operators": Array [
    "===",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
parent.type === AST_NODE_TYPES.TemplateLiteral
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TemplateLiteral",
  ],
  "operators": Array [
    "===",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
parent.typeParameter === node
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "typeParameter",
    "node",
  ],
  "operators": Array [
    "===",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
parent.value === node
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "value",
    "node",
  ],
  "operators": Array [
    "===",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
spec.type === AST_NODE_TYPES.ImportSpecifier
\` 1`] = `
Object {
  "operands": Array [
    "spec",
    "type",
    "AST_NODE_TYPES",
    "ImportSpecifier",
  ],
  "operators": Array [
    "===",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
typeof node.optional === "string"
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "optional",
    "\\"string\\"",
  ],
  "operators": Array [
    "===",
    "typeof",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BinaryExpression\`
typeof node.readonly === "string"
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "readonly",
    "\\"string\\"",
  ],
  "operators": Array [
    "===",
    "typeof",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
                close = "\${"
            }
\` 1`] = `
Object {
  "operands": Array [
    "close",
    "\\"\${\\"",
  ],
  "operators": Array [
    "{}",
    "=",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
                extract.call(context, node, parent)
            }
\` 1`] = `
Object {
  "operands": Array [
    "extract",
    "call",
    "context",
    "node",
    "parent",
  ],
  "operators": Array [
    "{}",
    "()",
    ",",
    ",",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
                open = "}"
            }
\` 1`] = `
Object {
  "operands": Array [
    "open",
    "\\"}\\"",
  ],
  "operators": Array [
    "{}",
    "=",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
                return
            }
\` 1`] = `
Object {
  "operands": Array [],
  "operators": Array [
    "{}",
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
                this.operators.add("=>")
                return
            }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"=>\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
                this.operators.add("[]")
            }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"[]\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
                this.operators.add("extends")
            }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"extends\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
                this.operators.add("in")
            }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"in\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
                this.operators.add("type")
            }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"type\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
                this.operators.add(node.optional)
            }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "node",
    "optional",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
                this.operators.add(node.readonly)
            }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "node",
    "readonly",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
                this.total.push(e)
                this.distinct.add(e)
            }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "total",
    "push",
    "e",
    "this",
    "distinct",
    "add",
    "e",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
            // It cannot actually be used.
            this.operators.add("*")
        }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"*\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
            const extract = EXTRACT_TOKENS[node.type] as any
            if (
                extract &&
                Object.prototype.hasOwnProperty.call(EXTRACT_TOKENS, node.type)
            ) {
                extract.call(context, node, parent)
            }
        }
\` 1`] = `
Object {
  "operands": Array [
    "extract",
    "EXTRACT_TOKENS",
    "node",
    "type",
    "any",
    "extract",
    "Object",
    "prototype",
    "hasOwnProperty",
    "call",
    "EXTRACT_TOKENS",
    "node",
    "type",
    "extract",
    "call",
    "context",
    "node",
    "parent",
  ],
  "operators": Array [
    "{}",
    "const",
    "=",
    "as",
    "[]",
    ".",
    "if()",
    "&&",
    "()",
    ",",
    ".",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ",",
    ",",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
            const index = parent.quasis.indexOf(node)
            if (index > 0) {
                open = "}"
            }
            if (index < parent.quasis.length - 1) {
                close = "\${"
            }
        }
\` 1`] = `
Object {
  "operands": Array [
    "index",
    "parent",
    "quasis",
    "indexOf",
    "node",
    "index",
    "0",
    "open",
    "\\"}\\"",
    "index",
    "parent",
    "quasis",
    "length",
    "1",
    "close",
    "\\"\${\\"",
  ],
  "operators": Array [
    "{}",
    "const",
    "=",
    "()",
    ".",
    ".",
    "if()",
    ">",
    "{}",
    "=",
    "if()",
    "<",
    "-",
    ".",
    ".",
    "{}",
    "=",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
            for (let index = 0; index < count; index++) {
                this.total.push(e)
                this.distinct.add(e)
            }
        }
\` 1`] = `
Object {
  "operands": Array [
    "index",
    "0",
    "index",
    "count",
    "index",
    "this",
    "total",
    "push",
    "e",
    "this",
    "distinct",
    "add",
    "e",
  ],
  "operators": Array [
    "{}",
    "for()",
    ";",
    ";",
    "let",
    "=",
    "<",
    "++",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
            if (
                parent &&
                parent.type === AST_NODE_TYPES.TSMappedType &&
                parent.typeParameter === node
            ) {
                this.operators.add("in")
            } else {
                this.operators.add("extends")
            }
        }
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSMappedType",
    "parent",
    "typeParameter",
    "node",
    "this",
    "operators",
    "add",
    "\\"in\\"",
    "this",
    "operators",
    "add",
    "\\"extends\\"",
  ],
  "operators": Array [
    "{}",
    "if()",
    "else",
    "&&",
    "&&",
    "===",
    ".",
    ".",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
            if (
                parent.type === AST_NODE_TYPES.Property &&
                parent.shorthand &&
                parent.value === node
            )
                return
            if (
                parent.type === AST_NODE_TYPES.ImportSpecifier &&
                parent.imported.name === node.name &&
                parent.local === node
            )
                return
            if (
                parent.type === AST_NODE_TYPES.ExportSpecifier &&
                parent.local.name === node.name &&
                parent.exported === node
            )
                return
        }
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "type",
    "AST_NODE_TYPES",
    "Property",
    "parent",
    "shorthand",
    "parent",
    "value",
    "node",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "ImportSpecifier",
    "parent",
    "imported",
    "name",
    "node",
    "name",
    "parent",
    "local",
    "node",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "ExportSpecifier",
    "parent",
    "local",
    "name",
    "node",
    "name",
    "parent",
    "exported",
    "node",
  ],
  "operators": Array [
    "{}",
    "if()",
    "&&",
    "&&",
    "===",
    ".",
    ".",
    ".",
    "===",
    ".",
    "return",
    "if()",
    "&&",
    "&&",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
    ".",
    "===",
    ".",
    "return",
    "if()",
    "&&",
    "&&",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
    ".",
    "===",
    ".",
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
            if (
                parent.type === AST_NODE_TYPES.TSFunctionType &&
                    parent.returnType === node ||
                parent.type === AST_NODE_TYPES.TSConstructorType &&
                    parent.returnType === node
            ) {
                this.operators.add("=>")
                return
            }
            if (parent.type === AST_NODE_TYPES.TSTypePredicate) {
                return
            }
        }
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSFunctionType",
    "parent",
    "returnType",
    "node",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSConstructorType",
    "parent",
    "returnType",
    "node",
    "this",
    "operators",
    "add",
    "\\"=>\\"",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSTypePredicate",
  ],
  "operators": Array [
    "{}",
    "if()",
    "||",
    "&&",
    "===",
    ".",
    ".",
    "===",
    ".",
    "&&",
    "===",
    ".",
    ".",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "return",
    "if()",
    "===",
    ".",
    ".",
    "{}",
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
            if (node.exportKind === "type") {
                this.operators.add("type")
            }
            this.operators.add("{}")
            this.operators.add(",", node.specifiers.length - 1)
        }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "exportKind",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "specifiers",
    "length",
    "1",
  ],
  "operators": Array [
    "{}",
    "if()",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
            if (typeof node.optional === "string") {
                this.operators.add(node.optional)
            }
            this.operators.add("?")
        }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "optional",
    "\\"string\\"",
    "this",
    "operators",
    "add",
    "node",
    "optional",
    "this",
    "operators",
    "add",
    "\\"?\\"",
  ],
  "operators": Array [
    "{}",
    "if()",
    "===",
    "typeof",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
            if (typeof node.readonly === "string") {
                this.operators.add(node.readonly)
            }
            this.operators.add("readonly")
        }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "readonly",
    "\\"string\\"",
    "this",
    "operators",
    "add",
    "node",
    "readonly",
    "this",
    "operators",
    "add",
    "\\"readonly\\"",
  ],
  "operators": Array [
    "{}",
    "if()",
    "===",
    "typeof",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
            return 4
        }
\` 1`] = `
Object {
  "operands": Array [
    "4",
  ],
  "operators": Array [
    "{}",
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
            return 5
        }
\` 1`] = `
Object {
  "operands": Array [
    "5",
  ],
  "operators": Array [
    "{}",
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
            return 6
        }
\` 1`] = `
Object {
  "operands": Array [
    "6",
  ],
  "operators": Array [
    "{}",
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
            return 7
        }
\` 1`] = `
Object {
  "operands": Array [
    "7",
  ],
  "operators": Array [
    "{}",
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
            return 8
        }
\` 1`] = `
Object {
  "operands": Array [
    "8",
  ],
  "operators": Array [
    "{}",
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
            return 9
        }
\` 1`] = `
Object {
  "operands": Array [
    "9",
  ],
  "operators": Array [
    "{}",
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
            return 10
        }
\` 1`] = `
Object {
  "operands": Array [
    "10",
  ],
  "operators": Array [
    "{}",
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
            return 11
        }
\` 1`] = `
Object {
  "operands": Array [
    "11",
  ],
  "operators": Array [
    "{}",
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
            return 12
        }
\` 1`] = `
Object {
  "operands": Array [
    "12",
  ],
  "operators": Array [
    "{}",
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
            return 13
        }
\` 1`] = `
Object {
  "operands": Array [
    "13",
  ],
  "operators": Array [
    "{}",
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
            return 14
        }
\` 1`] = `
Object {
  "operands": Array [
    "14",
  ],
  "operators": Array [
    "{}",
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
            return 15
        }
\` 1`] = `
Object {
  "operands": Array [
    "15",
  ],
  "operators": Array [
    "{}",
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
            this.operands.add(\`\${node.bigint}n\`)
        }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operands",
    "add",
    "\`\${",
    "}n\`",
    "node",
    "bigint",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
            this.operands.add(\`/\${node.regex.pattern}/\${node.regex.flags}\`)
        }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operands",
    "add",
    "\`/\${",
    "}/\${",
    "}\`",
    "node",
    "regex",
    "pattern",
    "node",
    "regex",
    "flags",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
    ".",
    ".",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
            this.operands.add(JSON.stringify(node.value))
        }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operands",
    "add",
    "JSON",
    "stringify",
    "node",
    "value",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
            this.operators.add("()")
        }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"()\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
            this.operators.add("*")
        }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"*\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
            this.operators.add(",")
        }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\",\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
            this.operators.add(".")
        }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\".\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
            this.operators.add(":")
        }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\":\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
            this.operators.add("=")
        }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"=\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
            this.operators.add("?.")
            if (node.computed) {
                this.operators.add("[]")
            }
        }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"?.\\"",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
            this.operators.add("?.")
        }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"?.\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
            this.operators.add("[]")
        }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"[]\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
            this.operators.add("{}")
            this.operators.add(",", node.specifiers.length - 1)
        }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "specifiers",
    "length",
    "1",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
            this.operators.add("abstract")
        }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"abstract\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
            this.operators.add("as")
        }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"as\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
            this.operators.add("assert")
            this.operators.add("{}")
        }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"assert\\"",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
            this.operators.add("async")
        }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"async\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
            this.operators.add("case")
        }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"case\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
            this.operators.add("default")
        }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"default\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
            this.operators.add("else")
        }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"else\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
            this.operators.add("extends")
            this.operators.add(",", node.extends.length - 1)
        }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"extends\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "extends",
    "length",
    "1",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
            this.operators.add("extends")
        }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"extends\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
            this.operators.add("finally")
        }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"finally\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
            this.operators.add("from")
        }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"from\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
            this.operators.add("function")
        }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"function\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
            this.operators.add("implements")
            this.operators.add(",", node.implements.length - 1)
        }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"implements\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "implements",
    "length",
    "1",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
            this.operators.add("implements")
        }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"implements\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
            this.operators.add("module")
        }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"module\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
            this.operators.add("type")
        }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"type\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
            this.total.push(e)
            this.distinct.add(e)
        }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "total",
    "push",
    "e",
    "this",
    "distinct",
    "add",
    "e",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        if ("bigint" in node && node.bigint) {
            this.operands.add(\`\${node.bigint}n\`)
        } else if ("regex" in node && node.regex) {
            this.operands.add(\`/\${node.regex.pattern}/\${node.regex.flags}\`)
        } else {
            this.operands.add(JSON.stringify(node.value))
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "\\"bigint\\"",
    "node",
    "node",
    "bigint",
    "this",
    "operands",
    "add",
    "\`\${",
    "}n\`",
    "node",
    "bigint",
    "\\"regex\\"",
    "node",
    "node",
    "regex",
    "this",
    "operands",
    "add",
    "\`/\${",
    "}/\${",
    "}\`",
    "node",
    "regex",
    "pattern",
    "node",
    "regex",
    "flags",
    "this",
    "operands",
    "add",
    "JSON",
    "stringify",
    "node",
    "value",
  ],
  "operators": Array [
    "{}",
    "if()",
    "else",
    "&&",
    "in",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    "if()",
    "else",
    "&&",
    "in",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        if (count === 1) {
            this.total.push(e)
            this.distinct.add(e)
        } else {
            for (let index = 0; index < count; index++) {
                this.total.push(e)
                this.distinct.add(e)
            }
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "count",
    "1",
    "this",
    "total",
    "push",
    "e",
    "this",
    "distinct",
    "add",
    "e",
    "index",
    "0",
    "index",
    "count",
    "index",
    "this",
    "total",
    "push",
    "e",
    "this",
    "distinct",
    "add",
    "e",
  ],
  "operators": Array [
    "{}",
    "if()",
    "else",
    "===",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "{}",
    "for()",
    ";",
    ";",
    "let",
    "=",
    "<",
    "++",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        if (getPrecedence(node) > getPrecedence(node.object)) {
            this.operators.add("()")
        }
        if (node.optional) {
            this.operators.add("?.")
            if (node.computed) {
                this.operators.add("[]")
            }
        } else if (node.computed) {
            this.operators.add("[]")
        } else {
            this.operators.add(".")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "object",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "node",
    "optional",
    "this",
    "operators",
    "add",
    "\\"?.\\"",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "this",
    "operators",
    "add",
    "\\".\\"",
  ],
  "operators": Array [
    "{}",
    "if()",
    ">",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "else",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "else",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        if (getPrecedence(node) >= getPrecedence(node.test)) {
            this.operators.add("()")
        }
        this.operators.add("?:")
    }
\` 1`] = `
Object {
  "operands": Array [
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "test",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\"?:\\"",
  ],
  "operators": Array [
    "{}",
    "if()",
    ">=",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        if (node.accessibility) this.operators.add(node.accessibility)
        if (node.readonly) this.operators.add("readonly")
        if (node.static) this.operators.add("static")
        if (node.export) this.operators.add("export")
        if (node.computed) this.operators.add("[]")
        if (node.optional) this.operators.add("?")
    }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "accessibility",
    "this",
    "operators",
    "add",
    "node",
    "accessibility",
    "node",
    "readonly",
    "this",
    "operators",
    "add",
    "\\"readonly\\"",
    "node",
    "static",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "node",
    "export",
    "this",
    "operators",
    "add",
    "\\"export\\"",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "optional",
    "this",
    "operators",
    "add",
    "\\"?\\"",
  ],
  "operators": Array [
    "{}",
    "if()",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        if (node.accessibility) this.operators.add(node.accessibility)
        if (node.readonly) this.operators.add("readonly")
        if (node.static) this.operators.add("static")
        if (node.export) this.operators.add("export")
        if (node.kind === "get" || node.kind === "set")
            this.operators.add(node.kind)
        if (node.computed) this.operators.add("[]")
        if (node.optional) this.operators.add("?")

        this.operators.add("()")
        this.operators.add(",", node.params.length - 1)
    }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "accessibility",
    "this",
    "operators",
    "add",
    "node",
    "accessibility",
    "node",
    "readonly",
    "this",
    "operators",
    "add",
    "\\"readonly\\"",
    "node",
    "static",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "node",
    "export",
    "this",
    "operators",
    "add",
    "\\"export\\"",
    "node",
    "kind",
    "\\"get\\"",
    "node",
    "kind",
    "\\"set\\"",
    "this",
    "operators",
    "add",
    "node",
    "kind",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "optional",
    "this",
    "operators",
    "add",
    "\\"?\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
  ],
  "operators": Array [
    "{}",
    "if()",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    "||",
    "===",
    ".",
    "===",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        if (node.accessibility) this.operators.add(node.accessibility)
        if (node.readonly) this.operators.add("readonly")
        if (node.static) this.operators.add("static")
        if (node.export) this.operators.add("export")
    }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "accessibility",
    "this",
    "operators",
    "add",
    "node",
    "accessibility",
    "node",
    "readonly",
    "this",
    "operators",
    "add",
    "\\"readonly\\"",
    "node",
    "static",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "node",
    "export",
    "this",
    "operators",
    "add",
    "\\"export\\"",
  ],
  "operators": Array [
    "{}",
    "if()",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        if (node.accessibility) this.operators.add(node.accessibility)
        if (node.static) this.operators.add("static")
        if (node.kind === "get" || node.kind === "set")
            this.operators.add(node.kind)
        if (node.computed) {
            this.operators.add("[]")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "accessibility",
    "this",
    "operators",
    "add",
    "node",
    "accessibility",
    "node",
    "static",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "node",
    "kind",
    "\\"get\\"",
    "node",
    "kind",
    "\\"set\\"",
    "this",
    "operators",
    "add",
    "node",
    "kind",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
  ],
  "operators": Array [
    "{}",
    "if()",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    "||",
    "===",
    ".",
    "===",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        if (node.accessibility) this.operators.add(node.accessibility)
        if (node.static) this.operators.add("static")
        if (node.readonly) this.operators.add("readonly")
        if (node.computed) {
            this.operators.add("[]")
        }
        if (node.value) {
            this.operators.add("=")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "accessibility",
    "this",
    "operators",
    "add",
    "node",
    "accessibility",
    "node",
    "static",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "node",
    "readonly",
    "this",
    "operators",
    "add",
    "\\"readonly\\"",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "value",
    "this",
    "operators",
    "add",
    "\\"=\\"",
  ],
  "operators": Array [
    "{}",
    "if()",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        if (node.async) {
            this.operators.add("async")
        }

        if (
            !parent ||
            parent.type !== AST_NODE_TYPES.MethodDefinition &&
                (parent.type !== AST_NODE_TYPES.Property || !parent.method) &&
                parent.type !== AST_NODE_TYPES.TSAbstractMethodDefinition
        ) {
            this.operators.add("function")
        }

        if (node.generator) {
            this.operators.add("*")
        }
        this.operators.add("()")
        this.operators.add(",", node.params.length - 1)

        if (node.declare) this.operators.add("declare")
    }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "async",
    "this",
    "operators",
    "add",
    "\\"async\\"",
    "parent",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "MethodDefinition",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "Property",
    "parent",
    "method",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSAbstractMethodDefinition",
    "this",
    "operators",
    "add",
    "\\"function\\"",
    "node",
    "generator",
    "this",
    "operators",
    "add",
    "\\"*\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
  ],
  "operators": Array [
    "{}",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "||",
    "!",
    "&&",
    "&&",
    "()",
    "!==",
    ".",
    ".",
    "||",
    "!==",
    ".",
    ".",
    "!",
    ".",
    "!==",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        if (node.async) {
            this.operators.add("async")
        }
        if (node.generator) {
            // It cannot actually be used.
            this.operators.add("*")
        }
        if (
            node.params.length !== 1 ||
            node.params[0].type !== AST_NODE_TYPES.Identifier ||
            node.params[0].typeAnnotation
        ) {
            this.operators.add("()")
        }
        this.operators.add(",", node.params.length - 1)

        this.operators.add("=>")

        if (node.body.type === AST_NODE_TYPES.ObjectExpression) {
            this.operators.add("()")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "async",
    "this",
    "operators",
    "add",
    "\\"async\\"",
    "node",
    "generator",
    "this",
    "operators",
    "add",
    "\\"*\\"",
    "node",
    "params",
    "length",
    "1",
    "node",
    "params",
    "0",
    "type",
    "AST_NODE_TYPES",
    "Identifier",
    "node",
    "params",
    "0",
    "typeAnnotation",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
    "this",
    "operators",
    "add",
    "\\"=>\\"",
    "node",
    "body",
    "type",
    "AST_NODE_TYPES",
    "ObjectExpression",
    "this",
    "operators",
    "add",
    "\\"()\\"",
  ],
  "operators": Array [
    "{}",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "||",
    "||",
    "!==",
    ".",
    ".",
    "!==",
    ".",
    "[]",
    ".",
    ".",
    ".",
    "[]",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ".",
    ".",
    "if()",
    "===",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        if (node.async) {
            this.operators.add("async")
        }
        this.operators.add("function")
        if (node.generator) {
            this.operators.add("*")
        }
        this.operators.add("()")
        this.operators.add(",", node.params.length - 1)

        if (node.declare) this.operators.add("declare")
    }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "async",
    "this",
    "operators",
    "add",
    "\\"async\\"",
    "this",
    "operators",
    "add",
    "\\"function\\"",
    "node",
    "generator",
    "this",
    "operators",
    "add",
    "\\"*\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
  ],
  "operators": Array [
    "{}",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        if (node.async) {
            this.operators.add("async")
        }
        this.operators.add("function")
        if (node.generator) {
            this.operators.add("*")
        }
        this.operators.add("()")
        this.operators.add(",", node.params.length - 1)
    }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "async",
    "this",
    "operators",
    "add",
    "\\"async\\"",
    "this",
    "operators",
    "add",
    "\\"function\\"",
    "node",
    "generator",
    "this",
    "operators",
    "add",
    "\\"*\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
  ],
  "operators": Array [
    "{}",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        if (node.computed) {
            this.operators.add("[]")
        }
        if (node.initializer) {
            this.operators.add("=")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "initializer",
    "this",
    "operators",
    "add",
    "\\"=\\"",
  ],
  "operators": Array [
    "{}",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        if (node.const) this.operators.add("const")
        this.operators.add("enum")
        this.operators.add("{}")
        this.operators.add(",", node.members.length - 1)

        if (node.declare) this.operators.add("declare")
    }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "const",
    "this",
    "operators",
    "add",
    "\\"const\\"",
    "this",
    "operators",
    "add",
    "\\"enum\\"",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "members",
    "length",
    "1",
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
  ],
  "operators": Array [
    "{}",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        if (node.constraint) {
            if (
                parent &&
                parent.type === AST_NODE_TYPES.TSMappedType &&
                parent.typeParameter === node
            ) {
                this.operators.add("in")
            } else {
                this.operators.add("extends")
            }
        }
        if (node.default) {
            this.operators.add("=")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "constraint",
    "parent",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSMappedType",
    "parent",
    "typeParameter",
    "node",
    "this",
    "operators",
    "add",
    "\\"in\\"",
    "this",
    "operators",
    "add",
    "\\"extends\\"",
    "node",
    "default",
    "this",
    "operators",
    "add",
    "\\"=\\"",
  ],
  "operators": Array [
    "{}",
    "if()",
    ".",
    "{}",
    "if()",
    "else",
    "&&",
    "&&",
    "===",
    ".",
    ".",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        if (node.declare) this.operators.add("declare")
        if (!node.global) {
            this.operators.add("module")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
    "node",
    "global",
    "this",
    "operators",
    "add",
    "\\"module\\"",
  ],
  "operators": Array [
    "{}",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    "!",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        if (node.exportKind === "type") {
            this.operators.add("type")
        }
        if (node.local.name !== node.exported.name) {
            this.operators.add("as")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "exportKind",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"type\\"",
    "node",
    "local",
    "name",
    "node",
    "exported",
    "name",
    "this",
    "operators",
    "add",
    "\\"as\\"",
  ],
  "operators": Array [
    "{}",
    "if()",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "!==",
    ".",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        if (node.importKind === "type") {
            this.operators.add("type")
        }
        if (node.local.name !== node.imported.name) {
            this.operators.add("as")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "importKind",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"type\\"",
    "node",
    "local",
    "name",
    "node",
    "imported",
    "name",
    "this",
    "operators",
    "add",
    "\\"as\\"",
  ],
  "operators": Array [
    "{}",
    "if()",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "!==",
    ".",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        if (node.init) {
            this.operators.add("=")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "init",
    "this",
    "operators",
    "add",
    "\\"=\\"",
  ],
  "operators": Array [
    "{}",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        if (node.kind === "get" || node.kind === "set")
            this.operators.add(node.kind)
        if (node.computed) {
            this.operators.add("[]")
        }
        if (!node.shorthand && !node.method) {
            this.operators.add(":")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "kind",
    "\\"get\\"",
    "node",
    "kind",
    "\\"set\\"",
    "this",
    "operators",
    "add",
    "node",
    "kind",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "shorthand",
    "node",
    "method",
    "this",
    "operators",
    "add",
    "\\":\\"",
  ],
  "operators": Array [
    "{}",
    "if()",
    "||",
    "===",
    ".",
    "===",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "&&",
    "!",
    ".",
    "!",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        if (node.operator === "|") {
            return 6
        }
        if (node.operator === "^") {
            return 7
        }
        if (node.operator === "&") {
            return 8
        }
        if (
            node.operator === "==" ||
            node.operator === "!=" ||
            node.operator === "===" ||
            node.operator === "!=="
        ) {
            return 9
        }
        if (
            node.operator === "<" ||
            node.operator === "<=" ||
            node.operator === ">" ||
            node.operator === ">=" ||
            node.operator === "in" ||
            node.operator === "instanceof"
        ) {
            return 10
        }
        if (
            node.operator === "<<" ||
            node.operator === ">>" ||
            node.operator === ">>>"
        ) {
            return 11
        }
        if (node.operator === "+" || node.operator === "-") {
            return 12
        }
        if (
            node.operator === "*" ||
            node.operator === "/" ||
            node.operator === "%"
        ) {
            return 13
        }
        if (node.operator === "**") {
            return 14
        }
        throw new Error(\`Unknown operator precedence:\${node.operator}\`)
    }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "operator",
    "\\"|\\"",
    "6",
    "node",
    "operator",
    "\\"^\\"",
    "7",
    "node",
    "operator",
    "\\"&\\"",
    "8",
    "node",
    "operator",
    "\\"==\\"",
    "node",
    "operator",
    "\\"!=\\"",
    "node",
    "operator",
    "\\"===\\"",
    "node",
    "operator",
    "\\"!==\\"",
    "9",
    "node",
    "operator",
    "\\"<\\"",
    "node",
    "operator",
    "\\"<=\\"",
    "node",
    "operator",
    "\\">\\"",
    "node",
    "operator",
    "\\">=\\"",
    "node",
    "operator",
    "\\"in\\"",
    "node",
    "operator",
    "\\"instanceof\\"",
    "10",
    "node",
    "operator",
    "\\"<<\\"",
    "node",
    "operator",
    "\\">>\\"",
    "node",
    "operator",
    "\\">>>\\"",
    "11",
    "node",
    "operator",
    "\\"+\\"",
    "node",
    "operator",
    "\\"-\\"",
    "12",
    "node",
    "operator",
    "\\"*\\"",
    "node",
    "operator",
    "\\"/\\"",
    "node",
    "operator",
    "\\"%\\"",
    "13",
    "node",
    "operator",
    "\\"**\\"",
    "14",
    "Error",
    "\`Unknown operator precedence:\${",
    "}\`",
    "node",
    "operator",
  ],
  "operators": Array [
    "{}",
    "if()",
    "===",
    ".",
    "{}",
    "return",
    "if()",
    "===",
    ".",
    "{}",
    "return",
    "if()",
    "===",
    ".",
    "{}",
    "return",
    "if()",
    "||",
    "||",
    "||",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
    "{}",
    "return",
    "if()",
    "||",
    "||",
    "||",
    "||",
    "||",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
    "{}",
    "return",
    "if()",
    "||",
    "||",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
    "{}",
    "return",
    "if()",
    "||",
    "===",
    ".",
    "===",
    ".",
    "{}",
    "return",
    "if()",
    "||",
    "||",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
    "{}",
    "return",
    "if()",
    "===",
    ".",
    "{}",
    "return",
    "throw",
    "new",
    "()",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        if (node.operator === "||" || node.operator === "??") {
            return 4
        }
        if (node.operator === "&&") {
            return 5
        }
        throw new Error(\`Unknown operator precedence:\${node.operator}\`)
    }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "operator",
    "\\"||\\"",
    "node",
    "operator",
    "\\"??\\"",
    "4",
    "node",
    "operator",
    "\\"&&\\"",
    "5",
    "Error",
    "\`Unknown operator precedence:\${",
    "}\`",
    "node",
    "operator",
  ],
  "operators": Array [
    "{}",
    "if()",
    "||",
    "===",
    ".",
    "===",
    ".",
    "{}",
    "return",
    "if()",
    "===",
    ".",
    "{}",
    "return",
    "throw",
    "new",
    "()",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        if (node.optional) {
            this.operators.add("?.")
        }
        this.operators.add("()")
        this.operators.add(",", node.arguments.length - 1)
    }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "optional",
    "this",
    "operators",
    "add",
    "\\"?.\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "arguments",
    "length",
    "1",
  ],
  "operators": Array [
    "{}",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        if (node.optional) this.operators.add("?")
        this.operators.add(":")
    }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "optional",
    "this",
    "operators",
    "add",
    "\\"?\\"",
    "this",
    "operators",
    "add",
    "\\":\\"",
  ],
  "operators": Array [
    "{}",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        if (node.prefix) {
            return 15
        }
        return 16
    }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "prefix",
    "15",
    "16",
  ],
  "operators": Array [
    "{}",
    "if()",
    ".",
    "{}",
    "return",
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        if (node.test) {
            this.operators.add("case")
        } else {
            this.operators.add("default")
        }
        this.operators.add(":")
    }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "test",
    "this",
    "operators",
    "add",
    "\\"case\\"",
    "this",
    "operators",
    "add",
    "\\"default\\"",
    "this",
    "operators",
    "add",
    "\\":\\"",
  ],
  "operators": Array [
    "{}",
    "if()",
    "else",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        if (parent) {
            if (
                parent.type === AST_NODE_TYPES.Property &&
                parent.shorthand &&
                parent.value === node
            )
                return
            if (
                parent.type === AST_NODE_TYPES.ImportSpecifier &&
                parent.imported.name === node.name &&
                parent.local === node
            )
                return
            if (
                parent.type === AST_NODE_TYPES.ExportSpecifier &&
                parent.local.name === node.name &&
                parent.exported === node
            )
                return
        }
        this.operands.add(node.name)
    }
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "Property",
    "parent",
    "shorthand",
    "parent",
    "value",
    "node",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "ImportSpecifier",
    "parent",
    "imported",
    "name",
    "node",
    "name",
    "parent",
    "local",
    "node",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "ExportSpecifier",
    "parent",
    "local",
    "name",
    "node",
    "name",
    "parent",
    "exported",
    "node",
    "this",
    "operands",
    "add",
    "node",
    "name",
  ],
  "operators": Array [
    "{}",
    "if()",
    "{}",
    "if()",
    "&&",
    "&&",
    "===",
    ".",
    ".",
    ".",
    "===",
    ".",
    "return",
    "if()",
    "&&",
    "&&",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
    ".",
    "===",
    ".",
    "return",
    "if()",
    "&&",
    "&&",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
    ".",
    "===",
    ".",
    "return",
    "()",
    ".",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        if (parent) {
            if (
                parent.type === AST_NODE_TYPES.TSFunctionType &&
                    parent.returnType === node ||
                parent.type === AST_NODE_TYPES.TSConstructorType &&
                    parent.returnType === node
            ) {
                this.operators.add("=>")
                return
            }
            if (parent.type === AST_NODE_TYPES.TSTypePredicate) {
                return
            }
        }
        this.operators.add(":")
    }
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSFunctionType",
    "parent",
    "returnType",
    "node",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSConstructorType",
    "parent",
    "returnType",
    "node",
    "this",
    "operators",
    "add",
    "\\"=>\\"",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSTypePredicate",
    "this",
    "operators",
    "add",
    "\\":\\"",
  ],
  "operators": Array [
    "{}",
    "if()",
    "{}",
    "if()",
    "||",
    "&&",
    "===",
    ".",
    ".",
    "===",
    ".",
    "&&",
    "===",
    ".",
    ".",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "return",
    "if()",
    "===",
    ".",
    ".",
    "{}",
    "return",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        let open = "\`"
        let close = "\`"
        if (
            parent &&
            (parent.type === AST_NODE_TYPES.TemplateLiteral ||
                parent.type === AST_NODE_TYPES.TSTemplateLiteralType)
        ) {
            const index = parent.quasis.indexOf(node)
            if (index > 0) {
                open = "}"
            }
            if (index < parent.quasis.length - 1) {
                close = "\${"
            }
        }
        this.operands.add(\`\${open}\${node.value.cooked}\${close}\`)
    }
\` 1`] = `
Object {
  "operands": Array [
    "open",
    "\\"\`\\"",
    "close",
    "\\"\`\\"",
    "parent",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TemplateLiteral",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSTemplateLiteralType",
    "index",
    "parent",
    "quasis",
    "indexOf",
    "node",
    "index",
    "0",
    "open",
    "\\"}\\"",
    "index",
    "parent",
    "quasis",
    "length",
    "1",
    "close",
    "\\"\${\\"",
    "this",
    "operands",
    "add",
    "\`\${",
    "}\${",
    "}\${",
    "}\`",
    "open",
    "node",
    "value",
    "cooked",
    "close",
  ],
  "operators": Array [
    "{}",
    "let",
    "=",
    "let",
    "=",
    "if()",
    "&&",
    "()",
    "||",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
    "{}",
    "const",
    "=",
    "()",
    ".",
    ".",
    "if()",
    ">",
    "{}",
    "=",
    "if()",
    "<",
    "-",
    ".",
    ".",
    "{}",
    "=",
    "()",
    ".",
    ".",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        return 1
    }
\` 1`] = `
Object {
  "operands": Array [
    "1",
  ],
  "operators": Array [
    "{}",
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        return 2
    }
\` 1`] = `
Object {
  "operands": Array [
    "2",
  ],
  "operators": Array [
    "{}",
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        return 3
    }
\` 1`] = `
Object {
  "operands": Array [
    "3",
  ],
  "operators": Array [
    "{}",
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        return 14.5
    }
\` 1`] = `
Object {
  "operands": Array [
    "14.5",
  ],
  "operators": Array [
    "{}",
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        return 15
    }
\` 1`] = `
Object {
  "operands": Array [
    "15",
  ],
  "operators": Array [
    "{}",
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        return 18
    }
\` 1`] = `
Object {
  "operands": Array [
    "18",
  ],
  "operators": Array [
    "{}",
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        return 19
    }
\` 1`] = `
Object {
  "operands": Array [
    "19",
  ],
  "operators": Array [
    "{}",
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        return this.distinct.size
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "distinct",
    "size",
  ],
  "operators": Array [
    "{}",
    "return",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        return this.total
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "total",
  ],
  "operators": Array [
    "{}",
    "return",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        return this.total.length
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "total",
    "length",
  ],
  "operators": Array [
    "{}",
    "return",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operands.add("any")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operands",
    "add",
    "\\"any\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operands.add("bigint")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operands",
    "add",
    "\\"bigint\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operands.add("boolean")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operands",
    "add",
    "\\"boolean\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operands.add("intrinsic")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operands",
    "add",
    "\\"intrinsic\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operands.add("never")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operands",
    "add",
    "\\"never\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operands.add("null")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operands",
    "add",
    "\\"null\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operands.add("number")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operands",
    "add",
    "\\"number\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operands.add("object")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operands",
    "add",
    "\\"object\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operands.add("require")
        this.operators.add("()")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operands",
    "add",
    "\\"require\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operands.add("string")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operands",
    "add",
    "\\"string\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operands.add("super")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operands",
    "add",
    "\\"super\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operands.add("symbol")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operands",
    "add",
    "\\"symbol\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operands.add("this")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operands",
    "add",
    "\\"this\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operands.add("undefined")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operands",
    "add",
    "\\"undefined\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operands.add("unknown")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operands",
    "add",
    "\\"unknown\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operands.add("void")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operands",
    "add",
    "\\"void\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operands.add(\`#\${node.name}\`)
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operands",
    "add",
    "\`#\${",
    "}\`",
    "node",
    "name",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operands.add(JSON.stringify(node.value))
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operands",
    "add",
    "JSON",
    "stringify",
    "node",
    "value",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operands.add(node.name)
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operands",
    "add",
    "node",
    "name",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("!")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"!\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("&", node.types.length - 1)
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"&\\"",
    "node",
    "types",
    "length",
    "1",
  ],
  "operators": Array [
    "{}",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("()")
        this.operators.add(",", node.params.length - 1)
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("*")
        this.operators.add("as")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"*\\"",
    "this",
    "operators",
    "add",
    "\\"as\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add(",", node.expressions.length - 1)
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "expressions",
    "length",
    "1",
  ],
  "operators": Array [
    "{}",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add(".")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\".\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("...")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"...\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add(":")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\":\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add(";")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\";\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("<")
        this.operators.add(">")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"<\\"",
    "this",
    "operators",
    "add",
    "\\">\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("</")
        this.operators.add(">")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"</\\"",
    "this",
    "operators",
    "add",
    "\\">\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("<>")
        this.operators.add(",", node.params.length - 1)
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"<>\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("<>")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"<>\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("=")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"=\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("?")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"?\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("@")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"@\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("[]")
        if (node.readonly) this.operators.add("readonly")
        if (node.static) this.operators.add("static")
        if (node.export) this.operators.add("export")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "readonly",
    "this",
    "operators",
    "add",
    "\\"readonly\\"",
    "node",
    "static",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "node",
    "export",
    "this",
    "operators",
    "add",
    "\\"export\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("[]")
        this.operators.add(",", node.elementTypes.length - 1)
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "elementTypes",
    "length",
    "1",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("[]")
        this.operators.add(",", node.elements.length - 1)
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "elements",
    "length",
    "1",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("[]")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"[]\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("{}")
        if (node.readonly) {
            if (typeof node.readonly === "string") {
                this.operators.add(node.readonly)
            }
            this.operators.add("readonly")
        }

        this.operators.add("[]")
        if (node.optional) {
            if (typeof node.optional === "string") {
                this.operators.add(node.optional)
            }
            this.operators.add("?")
        }
        this.operators.add(":")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "node",
    "readonly",
    "node",
    "readonly",
    "\\"string\\"",
    "this",
    "operators",
    "add",
    "node",
    "readonly",
    "this",
    "operators",
    "add",
    "\\"readonly\\"",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "optional",
    "node",
    "optional",
    "\\"string\\"",
    "this",
    "operators",
    "add",
    "node",
    "optional",
    "this",
    "operators",
    "add",
    "\\"?\\"",
    "this",
    "operators",
    "add",
    "\\":\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "if()",
    "===",
    "typeof",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "if()",
    "===",
    "typeof",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("{}")
        this.operators.add(",", node.properties.length - 1)
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "properties",
    "length",
    "1",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("{}")
        this.operators.add("...")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "this",
    "operators",
    "add",
    "\\"...\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("{}")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"{}\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("|", node.types.length - 1)
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"|\\"",
    "node",
    "types",
    "length",
    "1",
  ],
  "operators": Array [
    "{}",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("abstract")
        if (node.accessibility) this.operators.add(node.accessibility)
        if (node.static) this.operators.add("static")
        if (node.computed) {
            this.operators.add("[]")
        }
        if (node.value) {
            this.operators.add("=")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"abstract\\"",
    "node",
    "accessibility",
    "this",
    "operators",
    "add",
    "node",
    "accessibility",
    "node",
    "static",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "value",
    "this",
    "operators",
    "add",
    "\\"=\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("abstract")
        if (node.accessibility) this.operators.add(node.accessibility)
        if (node.static) this.operators.add("static")
        if (node.kind === "get" || node.kind === "set")
            this.operators.add(node.kind)
        if (node.computed) {
            this.operators.add("[]")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"abstract\\"",
    "node",
    "accessibility",
    "this",
    "operators",
    "add",
    "node",
    "accessibility",
    "node",
    "static",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "node",
    "kind",
    "\\"get\\"",
    "node",
    "kind",
    "\\"set\\"",
    "this",
    "operators",
    "add",
    "node",
    "kind",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    "||",
    "===",
    ".",
    "===",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("abstract")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"abstract\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("as")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"as\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("async")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"async\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("await")

        if (getPrecedence(node) > getPrecedence(node.argument)) {
            this.operators.add("()")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"await\\"",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "argument",
    "this",
    "operators",
    "add",
    "\\"()\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ">",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("break")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"break\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("catch")
        if (node.param) {
            this.operators.add("()")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"catch\\"",
    "node",
    "param",
    "this",
    "operators",
    "add",
    "\\"()\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("class")
        if (node.superClass) {
            this.operators.add("extends")
        }
        if (node.implements) {
            this.operators.add("implements")
            this.operators.add(",", node.implements.length - 1)
        }
        if (node.abstract) {
            this.operators.add("abstract")
        }
        if (node.declare) this.operators.add("declare")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"class\\"",
    "node",
    "superClass",
    "this",
    "operators",
    "add",
    "\\"extends\\"",
    "node",
    "implements",
    "this",
    "operators",
    "add",
    "\\"implements\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "implements",
    "length",
    "1",
    "node",
    "abstract",
    "this",
    "operators",
    "add",
    "\\"abstract\\"",
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("class")
        if (node.superClass) {
            this.operators.add("extends")
        }
        if (node.implements) {
            this.operators.add("implements")
        }
        if (node.abstract) {
            this.operators.add("abstract")
        }
        if (node.declare) this.operators.add("declare")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"class\\"",
    "node",
    "superClass",
    "this",
    "operators",
    "add",
    "\\"extends\\"",
    "node",
    "implements",
    "this",
    "operators",
    "add",
    "\\"implements\\"",
    "node",
    "abstract",
    "this",
    "operators",
    "add",
    "\\"abstract\\"",
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("continue")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"continue\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("debugger")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"debugger\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("declare")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"declare\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("do")
        this.operators.add("while()")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"do\\"",
    "this",
    "operators",
    "add",
    "\\"while()\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("export")
        if (node.exportKind === "type") {
            this.operators.add("type")
        }
        this.operators.add("*")
        if (node.exported) {
            this.operators.add("as")
        }
        if (node.source) {
            this.operators.add("from")
        }
        if (node.assertions && node.assertions.length) {
            this.operators.add("assert")
            this.operators.add("{}")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"export\\"",
    "node",
    "exportKind",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"*\\"",
    "node",
    "exported",
    "this",
    "operators",
    "add",
    "\\"as\\"",
    "node",
    "source",
    "this",
    "operators",
    "add",
    "\\"from\\"",
    "node",
    "assertions",
    "node",
    "assertions",
    "length",
    "this",
    "operators",
    "add",
    "\\"assert\\"",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "&&",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("export")
        if (node.exportKind === "type") {
            this.operators.add("type")
        }
        this.operators.add("default")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"export\\"",
    "node",
    "exportKind",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"default\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("export")
        if (node.specifiers.length) {
            if (node.exportKind === "type") {
                this.operators.add("type")
            }
            this.operators.add("{}")
            this.operators.add(",", node.specifiers.length - 1)
        }
        if (node.source) {
            this.operators.add("from")
        }
        if (node.assertions && node.assertions.length) {
            this.operators.add("assert")
            this.operators.add("{}")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"export\\"",
    "node",
    "specifiers",
    "length",
    "node",
    "exportKind",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "specifiers",
    "length",
    "1",
    "node",
    "source",
    "this",
    "operators",
    "add",
    "\\"from\\"",
    "node",
    "assertions",
    "node",
    "assertions",
    "length",
    "this",
    "operators",
    "add",
    "\\"assert\\"",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    ".",
    "{}",
    "if()",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "&&",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("export")
        this.operators.add("=")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"export\\"",
    "this",
    "operators",
    "add",
    "\\"=\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("export")
        this.operators.add("as")
        this.operators.add("namespace")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"export\\"",
    "this",
    "operators",
    "add",
    "\\"as\\"",
    "this",
    "operators",
    "add",
    "\\"namespace\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("export")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"export\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("extends")
        this.operators.add("?:")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"extends\\"",
    "this",
    "operators",
    "add",
    "\\"?:\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("for()")
        this.operators.add(";", 2)
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"for()\\"",
    "this",
    "operators",
    "add",
    "\\";\\"",
    "2",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("for()")
        this.operators.add("in")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"for()\\"",
    "this",
    "operators",
    "add",
    "\\"in\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("for()")
        this.operators.add("of")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"for()\\"",
    "this",
    "operators",
    "add",
    "\\"of\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("if()")
        if (node.alternate) {
            this.operators.add("else")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"if()\\"",
    "node",
    "alternate",
    "this",
    "operators",
    "add",
    "\\"else\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("import")
        if (node.attributes) {
            this.operators.add(",")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"import\\"",
    "node",
    "attributes",
    "this",
    "operators",
    "add",
    "\\",\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("import")
        if (node.importKind === "type") {
            this.operators.add("type")
        }
        if (
            node.specifiers.some(
                (spec) => spec.type === AST_NODE_TYPES.ImportSpecifier,
            )
        ) {
            this.operators.add("{}")
            this.operators.add(",", node.specifiers.length - 1)
        }
        if (node.specifiers.length) {
            this.operators.add("from")
        }
        if (node.assertions && node.assertions.length) {
            this.operators.add("assert")
            this.operators.add("{}")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"import\\"",
    "node",
    "importKind",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"type\\"",
    "node",
    "specifiers",
    "some",
    "spec",
    "spec",
    "type",
    "AST_NODE_TYPES",
    "ImportSpecifier",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "specifiers",
    "length",
    "1",
    "node",
    "specifiers",
    "length",
    "this",
    "operators",
    "add",
    "\\"from\\"",
    "node",
    "assertions",
    "node",
    "assertions",
    "length",
    "this",
    "operators",
    "add",
    "\\"assert\\"",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "()",
    ".",
    ".",
    "=>",
    "===",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "&&",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("import")
        this.operators.add("()")
        if (node.qualifier) {
            this.operators.add(".")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"import\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "node",
    "qualifier",
    "this",
    "operators",
    "add",
    "\\".\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("import")
        this.operators.add("=")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"import\\"",
    "this",
    "operators",
    "add",
    "\\"=\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("infer")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"infer\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("interface")
        if (node.extends) {
            this.operators.add("extends")
            this.operators.add(",", node.extends.length - 1)
        }
        if (node.implements) {
            this.operators.add("implements")
            this.operators.add(",", node.implements.length - 1)
        }
        if (node.abstract) {
            this.operators.add("abstract")
        }
        if (node.declare) this.operators.add("declare")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"interface\\"",
    "node",
    "extends",
    "this",
    "operators",
    "add",
    "\\"extends\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "extends",
    "length",
    "1",
    "node",
    "implements",
    "this",
    "operators",
    "add",
    "\\"implements\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "implements",
    "length",
    "1",
    "node",
    "abstract",
    "this",
    "operators",
    "add",
    "\\"abstract\\"",
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("is")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"is\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("keyof")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"keyof\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("new")

        if (getPrecedence(node) >= getPrecedence(node.callee)) {
            this.operators.add("()")
        }

        this.operators.add("()")
        this.operators.add(",", node.arguments.length - 1)
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"new\\"",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "callee",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "arguments",
    "length",
    "1",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ">=",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("new")
        this.operators.add("()")
        this.operators.add(",", node.params.length - 1)
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"new\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("private")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"private\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("protected")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"protected\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("public")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"public\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("readonly")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"readonly\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("return")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"return\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("static")
        this.operators.add("{}")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("static")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"static\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("switch()")
        this.operators.add("{}")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"switch()\\"",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("throw")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"throw\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("try")
        if (node.finalizer) {
            this.operators.add("finally")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"try\\"",
    "node",
    "finalizer",
    "this",
    "operators",
    "add",
    "\\"finally\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("type")
        this.operators.add("=")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"=\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("typeof")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"typeof\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("while()")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"while()\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("with()")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"with()\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add("yield")
        if (node.delegate) {
            this.operators.add("*")
        }
        if (
            node.argument &&
            getPrecedence(node) > getPrecedence(node.argument)
        ) {
            this.operators.add("()")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"yield\\"",
    "node",
    "delegate",
    "this",
    "operators",
    "add",
    "\\"*\\"",
    "node",
    "argument",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "argument",
    "this",
    "operators",
    "add",
    "\\"()\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "&&",
    ".",
    ">",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add(node.kind)
        this.operators.add(",", node.declarations.length - 1)

        if (node.declare) this.operators.add("declare")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "node",
    "kind",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "declarations",
    "length",
    "1",
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add(node.operator as ESTree.BinaryExpression["operator"])

        if (getPrecedence(node) >= getPrecedence(node.right)) {
            this.operators.add("()")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "node",
    "operator",
    "\\"operator\\"",
    "ESTree",
    "BinaryExpression",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "right",
    "this",
    "operators",
    "add",
    "\\"()\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
    "as",
    ".",
    "[]",
    ".",
    "if()",
    ">=",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add(node.operator)

        if (getPrecedence(node) >= getPrecedence(node.argument)) {
            this.operators.add("()")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "node",
    "operator",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "argument",
    "this",
    "operators",
    "add",
    "\\"()\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ">=",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
        this.operators.add(node.operator)

        if (getPrecedence(node) >= getPrecedence(node.right)) {
            this.operators.add("()")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "node",
    "operator",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "right",
    "this",
    "operators",
    "add",
    "\\"()\\"",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ">=",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
    /* noop */
}
\` 1`] = `
Object {
  "operands": Array [],
  "operators": Array [
    "{}",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
    const context = new ExtractTokensContext()

    walk(
        node as TSESTree.Node,
        (node: TSESTree.Node, parent: TSESTree.Node | null) => {
            const extract = EXTRACT_TOKENS[node.type] as any
            if (
                extract &&
                Object.prototype.hasOwnProperty.call(EXTRACT_TOKENS, node.type)
            ) {
                extract.call(context, node, parent)
            }
        },
    )

    return context
}
\` 1`] = `
Object {
  "operands": Array [
    "context",
    "ExtractTokensContext",
    "walk",
    "node",
    "TSESTree",
    "Node",
    "node",
    "TSESTree",
    "Node",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "extract",
    "EXTRACT_TOKENS",
    "node",
    "type",
    "any",
    "extract",
    "Object",
    "prototype",
    "hasOwnProperty",
    "call",
    "EXTRACT_TOKENS",
    "node",
    "type",
    "extract",
    "call",
    "context",
    "node",
    "parent",
    "context",
  ],
  "operators": Array [
    "{}",
    "const",
    "=",
    "new",
    "()",
    "()",
    ",",
    "as",
    ".",
    "()",
    ",",
    "=>",
    ":",
    ".",
    ":",
    "|",
    ".",
    "{}",
    "const",
    "=",
    "as",
    "[]",
    ".",
    "if()",
    "&&",
    "()",
    ",",
    ".",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ",",
    ",",
    ".",
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts BlockStatement\`
{
    if (node.type === AST_NODE_TYPES.SequenceExpression) {
        return 1
    }
    if (
        node.type === AST_NODE_TYPES.YieldExpression ||
        node.type === AST_NODE_TYPES.AssignmentExpression
    ) {
        return 2
    }
    if (node.type === AST_NODE_TYPES.ConditionalExpression) {
        return 3
    }
    if (node.type === AST_NODE_TYPES.LogicalExpression) {
        if (node.operator === "||" || node.operator === "??") {
            return 4
        }
        if (node.operator === "&&") {
            return 5
        }
        throw new Error(\`Unknown operator precedence:\${node.operator}\`)
    }
    if (node.type === AST_NODE_TYPES.BinaryExpression) {
        if (node.operator === "|") {
            return 6
        }
        if (node.operator === "^") {
            return 7
        }
        if (node.operator === "&") {
            return 8
        }
        if (
            node.operator === "==" ||
            node.operator === "!=" ||
            node.operator === "===" ||
            node.operator === "!=="
        ) {
            return 9
        }
        if (
            node.operator === "<" ||
            node.operator === "<=" ||
            node.operator === ">" ||
            node.operator === ">=" ||
            node.operator === "in" ||
            node.operator === "instanceof"
        ) {
            return 10
        }
        if (
            node.operator === "<<" ||
            node.operator === ">>" ||
            node.operator === ">>>"
        ) {
            return 11
        }
        if (node.operator === "+" || node.operator === "-") {
            return 12
        }
        if (
            node.operator === "*" ||
            node.operator === "/" ||
            node.operator === "%"
        ) {
            return 13
        }
        if (node.operator === "**") {
            return 14
        }
        throw new Error(\`Unknown operator precedence:\${node.operator}\`)
    }
    if (
        node.type === AST_NODE_TYPES.UnaryExpression ||
        node.type === AST_NODE_TYPES.AwaitExpression
    ) {
        return 15
    }
    if (node.type === AST_NODE_TYPES.UpdateExpression) {
        if (node.prefix) {
            return 15
        }
        return 16
    }
    if (
        node.type === AST_NODE_TYPES.NewExpression ||
        node.type === AST_NODE_TYPES.CallExpression ||
        node.type === AST_NODE_TYPES.ImportExpression ||
        node.type === AST_NODE_TYPES.ChainExpression
    ) {
        return 18
    }
    if (node.type === AST_NODE_TYPES.MemberExpression) {
        return 19
    }

    // Others
    if (node.type === AST_NODE_TYPES.ArrowFunctionExpression) {
        return 2
    }
    if (node.type === AST_NODE_TYPES.TSAsExpression) {
        return 14.5
    }
    return Infinity
}
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "type",
    "AST_NODE_TYPES",
    "SequenceExpression",
    "1",
    "node",
    "type",
    "AST_NODE_TYPES",
    "YieldExpression",
    "node",
    "type",
    "AST_NODE_TYPES",
    "AssignmentExpression",
    "2",
    "node",
    "type",
    "AST_NODE_TYPES",
    "ConditionalExpression",
    "3",
    "node",
    "type",
    "AST_NODE_TYPES",
    "LogicalExpression",
    "node",
    "operator",
    "\\"||\\"",
    "node",
    "operator",
    "\\"??\\"",
    "4",
    "node",
    "operator",
    "\\"&&\\"",
    "5",
    "Error",
    "\`Unknown operator precedence:\${",
    "}\`",
    "node",
    "operator",
    "node",
    "type",
    "AST_NODE_TYPES",
    "BinaryExpression",
    "node",
    "operator",
    "\\"|\\"",
    "6",
    "node",
    "operator",
    "\\"^\\"",
    "7",
    "node",
    "operator",
    "\\"&\\"",
    "8",
    "node",
    "operator",
    "\\"==\\"",
    "node",
    "operator",
    "\\"!=\\"",
    "node",
    "operator",
    "\\"===\\"",
    "node",
    "operator",
    "\\"!==\\"",
    "9",
    "node",
    "operator",
    "\\"<\\"",
    "node",
    "operator",
    "\\"<=\\"",
    "node",
    "operator",
    "\\">\\"",
    "node",
    "operator",
    "\\">=\\"",
    "node",
    "operator",
    "\\"in\\"",
    "node",
    "operator",
    "\\"instanceof\\"",
    "10",
    "node",
    "operator",
    "\\"<<\\"",
    "node",
    "operator",
    "\\">>\\"",
    "node",
    "operator",
    "\\">>>\\"",
    "11",
    "node",
    "operator",
    "\\"+\\"",
    "node",
    "operator",
    "\\"-\\"",
    "12",
    "node",
    "operator",
    "\\"*\\"",
    "node",
    "operator",
    "\\"/\\"",
    "node",
    "operator",
    "\\"%\\"",
    "13",
    "node",
    "operator",
    "\\"**\\"",
    "14",
    "Error",
    "\`Unknown operator precedence:\${",
    "}\`",
    "node",
    "operator",
    "node",
    "type",
    "AST_NODE_TYPES",
    "UnaryExpression",
    "node",
    "type",
    "AST_NODE_TYPES",
    "AwaitExpression",
    "15",
    "node",
    "type",
    "AST_NODE_TYPES",
    "UpdateExpression",
    "node",
    "prefix",
    "15",
    "16",
    "node",
    "type",
    "AST_NODE_TYPES",
    "NewExpression",
    "node",
    "type",
    "AST_NODE_TYPES",
    "CallExpression",
    "node",
    "type",
    "AST_NODE_TYPES",
    "ImportExpression",
    "node",
    "type",
    "AST_NODE_TYPES",
    "ChainExpression",
    "18",
    "node",
    "type",
    "AST_NODE_TYPES",
    "MemberExpression",
    "19",
    "node",
    "type",
    "AST_NODE_TYPES",
    "ArrowFunctionExpression",
    "2",
    "node",
    "type",
    "AST_NODE_TYPES",
    "TSAsExpression",
    "14.5",
    "Infinity",
  ],
  "operators": Array [
    "{}",
    "if()",
    "===",
    ".",
    ".",
    "{}",
    "return",
    "if()",
    "||",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
    "{}",
    "return",
    "if()",
    "===",
    ".",
    ".",
    "{}",
    "return",
    "if()",
    "===",
    ".",
    ".",
    "{}",
    "if()",
    "||",
    "===",
    ".",
    "===",
    ".",
    "{}",
    "return",
    "if()",
    "===",
    ".",
    "{}",
    "return",
    "throw",
    "new",
    "()",
    ".",
    "if()",
    "===",
    ".",
    ".",
    "{}",
    "if()",
    "===",
    ".",
    "{}",
    "return",
    "if()",
    "===",
    ".",
    "{}",
    "return",
    "if()",
    "===",
    ".",
    "{}",
    "return",
    "if()",
    "||",
    "||",
    "||",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
    "{}",
    "return",
    "if()",
    "||",
    "||",
    "||",
    "||",
    "||",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
    "{}",
    "return",
    "if()",
    "||",
    "||",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
    "{}",
    "return",
    "if()",
    "||",
    "===",
    ".",
    "===",
    ".",
    "{}",
    "return",
    "if()",
    "||",
    "||",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
    "{}",
    "return",
    "if()",
    "===",
    ".",
    "{}",
    "return",
    "throw",
    "new",
    "()",
    ".",
    "if()",
    "||",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
    "{}",
    "return",
    "if()",
    "===",
    ".",
    ".",
    "{}",
    "if()",
    ".",
    "{}",
    "return",
    "return",
    "if()",
    "||",
    "||",
    "||",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
    "{}",
    "return",
    "if()",
    "===",
    ".",
    ".",
    "{}",
    "return",
    "if()",
    "===",
    ".",
    ".",
    "{}",
    "return",
    "if()",
    "===",
    ".",
    ".",
    "{}",
    "return",
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts CallExpression\`
JSON.stringify(node.value)
\` 1`] = `
Object {
  "operands": Array [
    "JSON",
    "stringify",
    "node",
    "value",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts CallExpression\`
Object.prototype.hasOwnProperty.call(EXTRACT_TOKENS, node.type)
\` 1`] = `
Object {
  "operands": Array [
    "Object",
    "prototype",
    "hasOwnProperty",
    "call",
    "EXTRACT_TOKENS",
    "node",
    "type",
  ],
  "operators": Array [
    "()",
    ",",
    ".",
    ".",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts CallExpression\`
getPrecedence(node)
\` 1`] = `
Object {
  "operands": Array [
    "getPrecedence",
    "node",
  ],
  "operators": Array [
    "()",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts CallExpression\`
getPrecedence(node.argument)
\` 1`] = `
Object {
  "operands": Array [
    "getPrecedence",
    "node",
    "argument",
  ],
  "operators": Array [
    "()",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts CallExpression\`
getPrecedence(node.callee)
\` 1`] = `
Object {
  "operands": Array [
    "getPrecedence",
    "node",
    "callee",
  ],
  "operators": Array [
    "()",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts CallExpression\`
getPrecedence(node.object)
\` 1`] = `
Object {
  "operands": Array [
    "getPrecedence",
    "node",
    "object",
  ],
  "operators": Array [
    "()",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts CallExpression\`
getPrecedence(node.right)
\` 1`] = `
Object {
  "operands": Array [
    "getPrecedence",
    "node",
    "right",
  ],
  "operators": Array [
    "()",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts CallExpression\`
getPrecedence(node.test)
\` 1`] = `
Object {
  "operands": Array [
    "getPrecedence",
    "node",
    "test",
  ],
  "operators": Array [
    "()",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts CallExpression\`
node.specifiers.some(
                (spec) => spec.type === AST_NODE_TYPES.ImportSpecifier,
            )
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "specifiers",
    "some",
    "spec",
    "spec",
    "type",
    "AST_NODE_TYPES",
    "ImportSpecifier",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
    "=>",
    "===",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts CallExpression\`
parent.quasis.indexOf(node)
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "quasis",
    "indexOf",
    "node",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ClassBody\`
{
    private readonly total: T[] = []

    private readonly distinct = new Set<T>()

    public add(e: T, count = 1): void {
        if (count === 1) {
            this.total.push(e)
            this.distinct.add(e)
        } else {
            for (let index = 0; index < count; index++) {
                this.total.push(e)
                this.distinct.add(e)
            }
        }
    }

    public get all(): T[] {
        return this.total
    }

    public get distinctSize(): number {
        return this.distinct.size
    }

    public get totalSize(): number {
        return this.total.length
    }
}
\` 1`] = `
Object {
  "operands": Array [
    "total",
    "T",
    "distinct",
    "Set",
    "T",
    "add",
    "e",
    "T",
    "count",
    "1",
    "void",
    "count",
    "1",
    "this",
    "total",
    "push",
    "e",
    "this",
    "distinct",
    "add",
    "e",
    "index",
    "0",
    "index",
    "count",
    "index",
    "this",
    "total",
    "push",
    "e",
    "this",
    "distinct",
    "add",
    "e",
    "all",
    "T",
    "this",
    "total",
    "distinctSize",
    "number",
    "this",
    "distinct",
    "size",
    "totalSize",
    "number",
    "this",
    "total",
    "length",
  ],
  "operators": Array [
    "{}",
    "private",
    "readonly",
    "=",
    ":",
    "[]",
    "[]",
    "private",
    "readonly",
    "=",
    "new",
    "()",
    "<>",
    "public",
    "()",
    ",",
    ":",
    "=",
    ":",
    "{}",
    "if()",
    "else",
    "===",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "{}",
    "for()",
    ";",
    ";",
    "let",
    "=",
    "<",
    "++",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "public",
    "get",
    "()",
    ":",
    "[]",
    "{}",
    "return",
    ".",
    "public",
    "get",
    "()",
    ":",
    "{}",
    "return",
    ".",
    ".",
    "public",
    "get",
    "()",
    ":",
    "{}",
    "return",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ClassBody\`
{
    public readonly operators = new TokensCollection<Operator>()

    public readonly operands = new TokensCollection<string>()
}
\` 1`] = `
Object {
  "operands": Array [
    "operators",
    "TokensCollection",
    "Operator",
    "operands",
    "TokensCollection",
    "string",
  ],
  "operators": Array [
    "{}",
    "public",
    "readonly",
    "=",
    "new",
    "()",
    "<>",
    "public",
    "readonly",
    "=",
    "new",
    "()",
    "<>",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ClassDeclaration\`
class ExtractTokensContext implements ExtractTokensResult {
    public readonly operators = new TokensCollection<Operator>()

    public readonly operands = new TokensCollection<string>()
}
\` 1`] = `
Object {
  "operands": Array [
    "ExtractTokensContext",
    "ExtractTokensResult",
    "operators",
    "TokensCollection",
    "Operator",
    "operands",
    "TokensCollection",
    "string",
  ],
  "operators": Array [
    "class",
    "implements",
    "{}",
    "public",
    "readonly",
    "=",
    "new",
    "()",
    "<>",
    "public",
    "readonly",
    "=",
    "new",
    "()",
    "<>",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ClassDeclaration\`
class TokensCollection<T> {
    private readonly total: T[] = []

    private readonly distinct = new Set<T>()

    public add(e: T, count = 1): void {
        if (count === 1) {
            this.total.push(e)
            this.distinct.add(e)
        } else {
            for (let index = 0; index < count; index++) {
                this.total.push(e)
                this.distinct.add(e)
            }
        }
    }

    public get all(): T[] {
        return this.total
    }

    public get distinctSize(): number {
        return this.distinct.size
    }

    public get totalSize(): number {
        return this.total.length
    }
}
\` 1`] = `
Object {
  "operands": Array [
    "TokensCollection",
    "T",
    "total",
    "T",
    "distinct",
    "Set",
    "T",
    "add",
    "e",
    "T",
    "count",
    "1",
    "void",
    "count",
    "1",
    "this",
    "total",
    "push",
    "e",
    "this",
    "distinct",
    "add",
    "e",
    "index",
    "0",
    "index",
    "count",
    "index",
    "this",
    "total",
    "push",
    "e",
    "this",
    "distinct",
    "add",
    "e",
    "all",
    "T",
    "this",
    "total",
    "distinctSize",
    "number",
    "this",
    "distinct",
    "size",
    "totalSize",
    "number",
    "this",
    "total",
    "length",
  ],
  "operators": Array [
    "class",
    "<>",
    "{}",
    "private",
    "readonly",
    "=",
    ":",
    "[]",
    "[]",
    "private",
    "readonly",
    "=",
    "new",
    "()",
    "<>",
    "public",
    "()",
    ",",
    ":",
    "=",
    ":",
    "{}",
    "if()",
    "else",
    "===",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "{}",
    "for()",
    ";",
    ";",
    "let",
    "=",
    "<",
    "++",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "public",
    "get",
    "()",
    ":",
    "[]",
    "{}",
    "return",
    ".",
    "public",
    "get",
    "()",
    ":",
    "{}",
    "return",
    ".",
    ".",
    "public",
    "get",
    "()",
    ":",
    "{}",
    "return",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExportNamedDeclaration\`
export class TokensCollection<T> {
    private readonly total: T[] = []

    private readonly distinct = new Set<T>()

    public add(e: T, count = 1): void {
        if (count === 1) {
            this.total.push(e)
            this.distinct.add(e)
        } else {
            for (let index = 0; index < count; index++) {
                this.total.push(e)
                this.distinct.add(e)
            }
        }
    }

    public get all(): T[] {
        return this.total
    }

    public get distinctSize(): number {
        return this.distinct.size
    }

    public get totalSize(): number {
        return this.total.length
    }
}
\` 1`] = `
Object {
  "operands": Array [
    "TokensCollection",
    "T",
    "total",
    "T",
    "distinct",
    "Set",
    "T",
    "add",
    "e",
    "T",
    "count",
    "1",
    "void",
    "count",
    "1",
    "this",
    "total",
    "push",
    "e",
    "this",
    "distinct",
    "add",
    "e",
    "index",
    "0",
    "index",
    "count",
    "index",
    "this",
    "total",
    "push",
    "e",
    "this",
    "distinct",
    "add",
    "e",
    "all",
    "T",
    "this",
    "total",
    "distinctSize",
    "number",
    "this",
    "distinct",
    "size",
    "totalSize",
    "number",
    "this",
    "total",
    "length",
  ],
  "operators": Array [
    "export",
    "class",
    "<>",
    "{}",
    "private",
    "readonly",
    "=",
    ":",
    "[]",
    "[]",
    "private",
    "readonly",
    "=",
    "new",
    "()",
    "<>",
    "public",
    "()",
    ",",
    ":",
    "=",
    ":",
    "{}",
    "if()",
    "else",
    "===",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "{}",
    "for()",
    ";",
    ";",
    "let",
    "=",
    "<",
    "++",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "public",
    "get",
    "()",
    ":",
    "[]",
    "{}",
    "return",
    ".",
    "public",
    "get",
    "()",
    ":",
    "{}",
    "return",
    ".",
    ".",
    "public",
    "get",
    "()",
    ":",
    "{}",
    "return",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExportNamedDeclaration\`
export function extractTokens(
    node: ESTree.Node | TSESTree.Node,
): ExtractTokensResult {
    const context = new ExtractTokensContext()

    walk(
        node as TSESTree.Node,
        (node: TSESTree.Node, parent: TSESTree.Node | null) => {
            const extract = EXTRACT_TOKENS[node.type] as any
            if (
                extract &&
                Object.prototype.hasOwnProperty.call(EXTRACT_TOKENS, node.type)
            ) {
                extract.call(context, node, parent)
            }
        },
    )

    return context
}
\` 1`] = `
Object {
  "operands": Array [
    "extractTokens",
    "node",
    "ESTree",
    "Node",
    "TSESTree",
    "Node",
    "ExtractTokensResult",
    "context",
    "ExtractTokensContext",
    "walk",
    "node",
    "TSESTree",
    "Node",
    "node",
    "TSESTree",
    "Node",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "extract",
    "EXTRACT_TOKENS",
    "node",
    "type",
    "any",
    "extract",
    "Object",
    "prototype",
    "hasOwnProperty",
    "call",
    "EXTRACT_TOKENS",
    "node",
    "type",
    "extract",
    "call",
    "context",
    "node",
    "parent",
    "context",
  ],
  "operators": Array [
    "export",
    "function",
    "()",
    ":",
    "|",
    ".",
    ".",
    ":",
    "{}",
    "const",
    "=",
    "new",
    "()",
    "()",
    ",",
    "as",
    ".",
    "()",
    ",",
    "=>",
    ":",
    ".",
    ":",
    "|",
    ".",
    "{}",
    "const",
    "=",
    "as",
    "[]",
    ".",
    "if()",
    "&&",
    "()",
    ",",
    ".",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ",",
    ",",
    ".",
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExportNamedDeclaration\`
export type ExtractTokensResult = {
    readonly operators: TokensCollection<string>
    readonly operands: TokensCollection<string>
}
\` 1`] = `
Object {
  "operands": Array [
    "ExtractTokensResult",
    "TokensCollection",
    "string",
    "operators",
    "TokensCollection",
    "string",
    "operands",
  ],
  "operators": Array [
    "export",
    "type",
    "=",
    "{}",
    "readonly",
    ":",
    "<>",
    "readonly",
    ":",
    "<>",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
close = "\${"
\` 1`] = `
Object {
  "operands": Array [
    "close",
    "\\"\${\\"",
  ],
  "operators": Array [
    "=",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
extract.call(context, node, parent)
\` 1`] = `
Object {
  "operands": Array [
    "extract",
    "call",
    "context",
    "node",
    "parent",
  ],
  "operators": Array [
    "()",
    ",",
    ",",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
open = "}"
\` 1`] = `
Object {
  "operands": Array [
    "open",
    "\\"}\\"",
  ],
  "operators": Array [
    "=",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.distinct.add(e)
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "distinct",
    "add",
    "e",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operands.add("any")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operands",
    "add",
    "\\"any\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operands.add("bigint")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operands",
    "add",
    "\\"bigint\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operands.add("boolean")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operands",
    "add",
    "\\"boolean\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operands.add("intrinsic")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operands",
    "add",
    "\\"intrinsic\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operands.add("never")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operands",
    "add",
    "\\"never\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operands.add("null")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operands",
    "add",
    "\\"null\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operands.add("number")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operands",
    "add",
    "\\"number\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operands.add("object")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operands",
    "add",
    "\\"object\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operands.add("require")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operands",
    "add",
    "\\"require\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operands.add("string")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operands",
    "add",
    "\\"string\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operands.add("super")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operands",
    "add",
    "\\"super\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operands.add("symbol")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operands",
    "add",
    "\\"symbol\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operands.add("this")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operands",
    "add",
    "\\"this\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operands.add("undefined")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operands",
    "add",
    "\\"undefined\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operands.add("unknown")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operands",
    "add",
    "\\"unknown\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operands.add("void")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operands",
    "add",
    "\\"void\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operands.add(\`#\${node.name}\`)
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operands",
    "add",
    "\`#\${",
    "}\`",
    "node",
    "name",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operands.add(\`\${node.bigint}n\`)
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operands",
    "add",
    "\`\${",
    "}n\`",
    "node",
    "bigint",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operands.add(\`\${open}\${node.value.cooked}\${close}\`)
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operands",
    "add",
    "\`\${",
    "}\${",
    "}\${",
    "}\`",
    "open",
    "node",
    "value",
    "cooked",
    "close",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operands.add(\`/\${node.regex.pattern}/\${node.regex.flags}\`)
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operands",
    "add",
    "\`/\${",
    "}/\${",
    "}\`",
    "node",
    "regex",
    "pattern",
    "node",
    "regex",
    "flags",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
    ".",
    ".",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operands.add(JSON.stringify(node.value))
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operands",
    "add",
    "JSON",
    "stringify",
    "node",
    "value",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operands.add(node.name)
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operands",
    "add",
    "node",
    "name",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("!")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"!\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("&", node.types.length - 1)
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"&\\"",
    "node",
    "types",
    "length",
    "1",
  ],
  "operators": Array [
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("()")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"()\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("*")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"*\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add(",")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\",\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add(",", node.arguments.length - 1)
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "arguments",
    "length",
    "1",
  ],
  "operators": Array [
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add(",", node.declarations.length - 1)
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "declarations",
    "length",
    "1",
  ],
  "operators": Array [
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add(",", node.elementTypes.length - 1)
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "elementTypes",
    "length",
    "1",
  ],
  "operators": Array [
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add(",", node.elements.length - 1)
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "elements",
    "length",
    "1",
  ],
  "operators": Array [
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add(",", node.expressions.length - 1)
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "expressions",
    "length",
    "1",
  ],
  "operators": Array [
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add(",", node.extends.length - 1)
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "extends",
    "length",
    "1",
  ],
  "operators": Array [
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add(",", node.implements.length - 1)
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "implements",
    "length",
    "1",
  ],
  "operators": Array [
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add(",", node.members.length - 1)
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "members",
    "length",
    "1",
  ],
  "operators": Array [
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add(",", node.params.length - 1)
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
  ],
  "operators": Array [
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add(",", node.properties.length - 1)
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "properties",
    "length",
    "1",
  ],
  "operators": Array [
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add(",", node.specifiers.length - 1)
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "specifiers",
    "length",
    "1",
  ],
  "operators": Array [
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add(".")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\".\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("...")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"...\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add(":")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\":\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add(";")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\";\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add(";", 2)
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\";\\"",
    "2",
  ],
  "operators": Array [
    "()",
    ",",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("<")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"<\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("</")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"</\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("<>")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"<>\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("=")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"=\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("=>")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"=>\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add(">")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\">\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("?")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"?\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("?.")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"?.\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("?:")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"?:\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("@")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"@\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("[]")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"[]\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("{}")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"{}\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("|", node.types.length - 1)
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"|\\"",
    "node",
    "types",
    "length",
    "1",
  ],
  "operators": Array [
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("abstract")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"abstract\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("as")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"as\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("assert")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"assert\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("async")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"async\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("await")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"await\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("break")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"break\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("case")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"case\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("catch")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"catch\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("class")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"class\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("const")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"const\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("continue")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"continue\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("debugger")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"debugger\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("declare")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"declare\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("default")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"default\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("do")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"do\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("else")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"else\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("enum")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"enum\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("export")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"export\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("extends")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"extends\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("finally")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"finally\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("for()")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"for()\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("from")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"from\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("function")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"function\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("if()")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"if()\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("implements")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"implements\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("import")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"import\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("in")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"in\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("infer")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"infer\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("interface")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"interface\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("is")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"is\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("keyof")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"keyof\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("module")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"module\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("namespace")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"namespace\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("new")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"new\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("of")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"of\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("private")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"private\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("protected")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"protected\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("public")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"public\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("readonly")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"readonly\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("return")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"return\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("static")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"static\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("switch()")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"switch()\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("throw")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"throw\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("try")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"try\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("type")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"type\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("typeof")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"typeof\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("while()")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"while()\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("with()")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"with()\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add("yield")
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "\\"yield\\"",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add(node.accessibility)
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "node",
    "accessibility",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add(node.kind)
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "node",
    "kind",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add(node.operator as ESTree.BinaryExpression["operator"])
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "node",
    "operator",
    "\\"operator\\"",
    "ESTree",
    "BinaryExpression",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
    "as",
    ".",
    "[]",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add(node.operator)
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "node",
    "operator",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add(node.optional)
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "node",
    "optional",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.operators.add(node.readonly)
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
    "node",
    "readonly",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
this.total.push(e)
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "total",
    "push",
    "e",
  ],
  "operators": Array [
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ExpressionStatement\`
walk(
        node as TSESTree.Node,
        (node: TSESTree.Node, parent: TSESTree.Node | null) => {
            const extract = EXTRACT_TOKENS[node.type] as any
            if (
                extract &&
                Object.prototype.hasOwnProperty.call(EXTRACT_TOKENS, node.type)
            ) {
                extract.call(context, node, parent)
            }
        },
    )
\` 1`] = `
Object {
  "operands": Array [
    "walk",
    "node",
    "TSESTree",
    "Node",
    "node",
    "TSESTree",
    "Node",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "extract",
    "EXTRACT_TOKENS",
    "node",
    "type",
    "any",
    "extract",
    "Object",
    "prototype",
    "hasOwnProperty",
    "call",
    "EXTRACT_TOKENS",
    "node",
    "type",
    "extract",
    "call",
    "context",
    "node",
    "parent",
  ],
  "operators": Array [
    "()",
    ",",
    "as",
    ".",
    "()",
    ",",
    "=>",
    ":",
    ".",
    ":",
    "|",
    ".",
    "{}",
    "const",
    "=",
    "as",
    "[]",
    ".",
    "if()",
    "&&",
    "()",
    ",",
    ".",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ",",
    ",",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ForStatement\`
for (let index = 0; index < count; index++) {
                this.total.push(e)
                this.distinct.add(e)
            }
\` 1`] = `
Object {
  "operands": Array [
    "index",
    "0",
    "index",
    "count",
    "index",
    "this",
    "total",
    "push",
    "e",
    "this",
    "distinct",
    "add",
    "e",
  ],
  "operators": Array [
    "for()",
    ";",
    ";",
    "let",
    "=",
    "<",
    "++",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionDeclaration\`
function extractTokens(
    node: ESTree.Node | TSESTree.Node,
): ExtractTokensResult {
    const context = new ExtractTokensContext()

    walk(
        node as TSESTree.Node,
        (node: TSESTree.Node, parent: TSESTree.Node | null) => {
            const extract = EXTRACT_TOKENS[node.type] as any
            if (
                extract &&
                Object.prototype.hasOwnProperty.call(EXTRACT_TOKENS, node.type)
            ) {
                extract.call(context, node, parent)
            }
        },
    )

    return context
}
\` 1`] = `
Object {
  "operands": Array [
    "extractTokens",
    "node",
    "ESTree",
    "Node",
    "TSESTree",
    "Node",
    "ExtractTokensResult",
    "context",
    "ExtractTokensContext",
    "walk",
    "node",
    "TSESTree",
    "Node",
    "node",
    "TSESTree",
    "Node",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "extract",
    "EXTRACT_TOKENS",
    "node",
    "type",
    "any",
    "extract",
    "Object",
    "prototype",
    "hasOwnProperty",
    "call",
    "EXTRACT_TOKENS",
    "node",
    "type",
    "extract",
    "call",
    "context",
    "node",
    "parent",
    "context",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "|",
    ".",
    ".",
    ":",
    "{}",
    "const",
    "=",
    "new",
    "()",
    "()",
    ",",
    "as",
    ".",
    "()",
    ",",
    "=>",
    ":",
    ".",
    ":",
    "|",
    ".",
    "{}",
    "const",
    "=",
    "as",
    "[]",
    ".",
    "if()",
    "&&",
    "()",
    ",",
    ".",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ",",
    ",",
    ".",
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionDeclaration\`
function getPrecedence(node: TSESTree.Expression): number {
    if (node.type === AST_NODE_TYPES.SequenceExpression) {
        return 1
    }
    if (
        node.type === AST_NODE_TYPES.YieldExpression ||
        node.type === AST_NODE_TYPES.AssignmentExpression
    ) {
        return 2
    }
    if (node.type === AST_NODE_TYPES.ConditionalExpression) {
        return 3
    }
    if (node.type === AST_NODE_TYPES.LogicalExpression) {
        if (node.operator === "||" || node.operator === "??") {
            return 4
        }
        if (node.operator === "&&") {
            return 5
        }
        throw new Error(\`Unknown operator precedence:\${node.operator}\`)
    }
    if (node.type === AST_NODE_TYPES.BinaryExpression) {
        if (node.operator === "|") {
            return 6
        }
        if (node.operator === "^") {
            return 7
        }
        if (node.operator === "&") {
            return 8
        }
        if (
            node.operator === "==" ||
            node.operator === "!=" ||
            node.operator === "===" ||
            node.operator === "!=="
        ) {
            return 9
        }
        if (
            node.operator === "<" ||
            node.operator === "<=" ||
            node.operator === ">" ||
            node.operator === ">=" ||
            node.operator === "in" ||
            node.operator === "instanceof"
        ) {
            return 10
        }
        if (
            node.operator === "<<" ||
            node.operator === ">>" ||
            node.operator === ">>>"
        ) {
            return 11
        }
        if (node.operator === "+" || node.operator === "-") {
            return 12
        }
        if (
            node.operator === "*" ||
            node.operator === "/" ||
            node.operator === "%"
        ) {
            return 13
        }
        if (node.operator === "**") {
            return 14
        }
        throw new Error(\`Unknown operator precedence:\${node.operator}\`)
    }
    if (
        node.type === AST_NODE_TYPES.UnaryExpression ||
        node.type === AST_NODE_TYPES.AwaitExpression
    ) {
        return 15
    }
    if (node.type === AST_NODE_TYPES.UpdateExpression) {
        if (node.prefix) {
            return 15
        }
        return 16
    }
    if (
        node.type === AST_NODE_TYPES.NewExpression ||
        node.type === AST_NODE_TYPES.CallExpression ||
        node.type === AST_NODE_TYPES.ImportExpression ||
        node.type === AST_NODE_TYPES.ChainExpression
    ) {
        return 18
    }
    if (node.type === AST_NODE_TYPES.MemberExpression) {
        return 19
    }

    // Others
    if (node.type === AST_NODE_TYPES.ArrowFunctionExpression) {
        return 2
    }
    if (node.type === AST_NODE_TYPES.TSAsExpression) {
        return 14.5
    }
    return Infinity
}
\` 1`] = `
Object {
  "operands": Array [
    "getPrecedence",
    "node",
    "TSESTree",
    "Expression",
    "number",
    "node",
    "type",
    "AST_NODE_TYPES",
    "SequenceExpression",
    "1",
    "node",
    "type",
    "AST_NODE_TYPES",
    "YieldExpression",
    "node",
    "type",
    "AST_NODE_TYPES",
    "AssignmentExpression",
    "2",
    "node",
    "type",
    "AST_NODE_TYPES",
    "ConditionalExpression",
    "3",
    "node",
    "type",
    "AST_NODE_TYPES",
    "LogicalExpression",
    "node",
    "operator",
    "\\"||\\"",
    "node",
    "operator",
    "\\"??\\"",
    "4",
    "node",
    "operator",
    "\\"&&\\"",
    "5",
    "Error",
    "\`Unknown operator precedence:\${",
    "}\`",
    "node",
    "operator",
    "node",
    "type",
    "AST_NODE_TYPES",
    "BinaryExpression",
    "node",
    "operator",
    "\\"|\\"",
    "6",
    "node",
    "operator",
    "\\"^\\"",
    "7",
    "node",
    "operator",
    "\\"&\\"",
    "8",
    "node",
    "operator",
    "\\"==\\"",
    "node",
    "operator",
    "\\"!=\\"",
    "node",
    "operator",
    "\\"===\\"",
    "node",
    "operator",
    "\\"!==\\"",
    "9",
    "node",
    "operator",
    "\\"<\\"",
    "node",
    "operator",
    "\\"<=\\"",
    "node",
    "operator",
    "\\">\\"",
    "node",
    "operator",
    "\\">=\\"",
    "node",
    "operator",
    "\\"in\\"",
    "node",
    "operator",
    "\\"instanceof\\"",
    "10",
    "node",
    "operator",
    "\\"<<\\"",
    "node",
    "operator",
    "\\">>\\"",
    "node",
    "operator",
    "\\">>>\\"",
    "11",
    "node",
    "operator",
    "\\"+\\"",
    "node",
    "operator",
    "\\"-\\"",
    "12",
    "node",
    "operator",
    "\\"*\\"",
    "node",
    "operator",
    "\\"/\\"",
    "node",
    "operator",
    "\\"%\\"",
    "13",
    "node",
    "operator",
    "\\"**\\"",
    "14",
    "Error",
    "\`Unknown operator precedence:\${",
    "}\`",
    "node",
    "operator",
    "node",
    "type",
    "AST_NODE_TYPES",
    "UnaryExpression",
    "node",
    "type",
    "AST_NODE_TYPES",
    "AwaitExpression",
    "15",
    "node",
    "type",
    "AST_NODE_TYPES",
    "UpdateExpression",
    "node",
    "prefix",
    "15",
    "16",
    "node",
    "type",
    "AST_NODE_TYPES",
    "NewExpression",
    "node",
    "type",
    "AST_NODE_TYPES",
    "CallExpression",
    "node",
    "type",
    "AST_NODE_TYPES",
    "ImportExpression",
    "node",
    "type",
    "AST_NODE_TYPES",
    "ChainExpression",
    "18",
    "node",
    "type",
    "AST_NODE_TYPES",
    "MemberExpression",
    "19",
    "node",
    "type",
    "AST_NODE_TYPES",
    "ArrowFunctionExpression",
    "2",
    "node",
    "type",
    "AST_NODE_TYPES",
    "TSAsExpression",
    "14.5",
    "Infinity",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    ".",
    ":",
    "{}",
    "if()",
    "===",
    ".",
    ".",
    "{}",
    "return",
    "if()",
    "||",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
    "{}",
    "return",
    "if()",
    "===",
    ".",
    ".",
    "{}",
    "return",
    "if()",
    "===",
    ".",
    ".",
    "{}",
    "if()",
    "||",
    "===",
    ".",
    "===",
    ".",
    "{}",
    "return",
    "if()",
    "===",
    ".",
    "{}",
    "return",
    "throw",
    "new",
    "()",
    ".",
    "if()",
    "===",
    ".",
    ".",
    "{}",
    "if()",
    "===",
    ".",
    "{}",
    "return",
    "if()",
    "===",
    ".",
    "{}",
    "return",
    "if()",
    "===",
    ".",
    "{}",
    "return",
    "if()",
    "||",
    "||",
    "||",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
    "{}",
    "return",
    "if()",
    "||",
    "||",
    "||",
    "||",
    "||",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
    "{}",
    "return",
    "if()",
    "||",
    "||",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
    "{}",
    "return",
    "if()",
    "||",
    "===",
    ".",
    "===",
    ".",
    "{}",
    "return",
    "if()",
    "||",
    "||",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
    "{}",
    "return",
    "if()",
    "===",
    ".",
    "{}",
    "return",
    "throw",
    "new",
    "()",
    ".",
    "if()",
    "||",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
    "{}",
    "return",
    "if()",
    "===",
    ".",
    ".",
    "{}",
    "if()",
    ".",
    "{}",
    "return",
    "return",
    "if()",
    "||",
    "||",
    "||",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
    "{}",
    "return",
    "if()",
    "===",
    ".",
    ".",
    "{}",
    "return",
    "if()",
    "===",
    ".",
    ".",
    "{}",
    "return",
    "if()",
    "===",
    ".",
    ".",
    "{}",
    "return",
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionDeclaration\`
function noop(): void {
    /* noop */
}
\` 1`] = `
Object {
  "operands": Array [
    "noop",
    "void",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(
        this: ExtractTokensContext,
        _node: TSESTree.AssignmentPattern,
    ) {
        this.operators.add("=")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "_node",
    "TSESTree",
    "AssignmentPattern",
    "this",
    "operators",
    "add",
    "\\"=\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(
        this: ExtractTokensContext,
        node: TSESTree.ArrayExpression,
    ) {
        this.operators.add("[]")
        this.operators.add(",", node.elements.length - 1)
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ArrayExpression",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "elements",
    "length",
    "1",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(
        this: ExtractTokensContext,
        node: TSESTree.ArrowFunctionExpression,
    ) {
        if (node.async) {
            this.operators.add("async")
        }
        if (node.generator) {
            // It cannot actually be used.
            this.operators.add("*")
        }
        if (
            node.params.length !== 1 ||
            node.params[0].type !== AST_NODE_TYPES.Identifier ||
            node.params[0].typeAnnotation
        ) {
            this.operators.add("()")
        }
        this.operators.add(",", node.params.length - 1)

        this.operators.add("=>")

        if (node.body.type === AST_NODE_TYPES.ObjectExpression) {
            this.operators.add("()")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ArrowFunctionExpression",
    "node",
    "async",
    "this",
    "operators",
    "add",
    "\\"async\\"",
    "node",
    "generator",
    "this",
    "operators",
    "add",
    "\\"*\\"",
    "node",
    "params",
    "length",
    "1",
    "node",
    "params",
    "0",
    "type",
    "AST_NODE_TYPES",
    "Identifier",
    "node",
    "params",
    "0",
    "typeAnnotation",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
    "this",
    "operators",
    "add",
    "\\"=>\\"",
    "node",
    "body",
    "type",
    "AST_NODE_TYPES",
    "ObjectExpression",
    "this",
    "operators",
    "add",
    "\\"()\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "||",
    "||",
    "!==",
    ".",
    ".",
    "!==",
    ".",
    "[]",
    ".",
    ".",
    ".",
    "[]",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ".",
    ".",
    "if()",
    "===",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(
        this: ExtractTokensContext,
        node: TSESTree.AssignmentExpression,
    ) {
        this.operators.add(node.operator)

        if (getPrecedence(node) >= getPrecedence(node.right)) {
            this.operators.add("()")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "AssignmentExpression",
    "this",
    "operators",
    "add",
    "node",
    "operator",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "right",
    "this",
    "operators",
    "add",
    "\\"()\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ">=",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(
        this: ExtractTokensContext,
        node: TSESTree.AwaitExpression,
    ) {
        this.operators.add("await")

        if (getPrecedence(node) > getPrecedence(node.argument)) {
            this.operators.add("()")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "AwaitExpression",
    "this",
    "operators",
    "add",
    "\\"await\\"",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "argument",
    "this",
    "operators",
    "add",
    "\\"()\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ">",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(
        this: ExtractTokensContext,
        node: TSESTree.BinaryExpression,
    ) {
        this.operators.add(node.operator as ESTree.BinaryExpression["operator"])

        if (getPrecedence(node) >= getPrecedence(node.right)) {
            this.operators.add("()")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "BinaryExpression",
    "this",
    "operators",
    "add",
    "node",
    "operator",
    "\\"operator\\"",
    "ESTree",
    "BinaryExpression",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "right",
    "this",
    "operators",
    "add",
    "\\"()\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "as",
    ".",
    "[]",
    ".",
    "if()",
    ">=",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(
        this: ExtractTokensContext,
        node: TSESTree.ClassDeclaration,
    ) {
        this.operators.add("class")
        if (node.superClass) {
            this.operators.add("extends")
        }
        if (node.implements) {
            this.operators.add("implements")
            this.operators.add(",", node.implements.length - 1)
        }
        if (node.abstract) {
            this.operators.add("abstract")
        }
        if (node.declare) this.operators.add("declare")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ClassDeclaration",
    "this",
    "operators",
    "add",
    "\\"class\\"",
    "node",
    "superClass",
    "this",
    "operators",
    "add",
    "\\"extends\\"",
    "node",
    "implements",
    "this",
    "operators",
    "add",
    "\\"implements\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "implements",
    "length",
    "1",
    "node",
    "abstract",
    "this",
    "operators",
    "add",
    "\\"abstract\\"",
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(
        this: ExtractTokensContext,
        node: TSESTree.ClassExpression,
    ) {
        this.operators.add("class")
        if (node.superClass) {
            this.operators.add("extends")
        }
        if (node.implements) {
            this.operators.add("implements")
        }
        if (node.abstract) {
            this.operators.add("abstract")
        }
        if (node.declare) this.operators.add("declare")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ClassExpression",
    "this",
    "operators",
    "add",
    "\\"class\\"",
    "node",
    "superClass",
    "this",
    "operators",
    "add",
    "\\"extends\\"",
    "node",
    "implements",
    "this",
    "operators",
    "add",
    "\\"implements\\"",
    "node",
    "abstract",
    "this",
    "operators",
    "add",
    "\\"abstract\\"",
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(
        this: ExtractTokensContext,
        node: TSESTree.ConditionalExpression,
    ) {
        if (getPrecedence(node) >= getPrecedence(node.test)) {
            this.operators.add("()")
        }
        this.operators.add("?:")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ConditionalExpression",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "test",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\"?:\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ">=",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(
        this: ExtractTokensContext,
        node: TSESTree.ExportAllDeclaration,
    ) {
        this.operators.add("export")
        if (node.exportKind === "type") {
            this.operators.add("type")
        }
        this.operators.add("*")
        if (node.exported) {
            this.operators.add("as")
        }
        if (node.source) {
            this.operators.add("from")
        }
        if (node.assertions && node.assertions.length) {
            this.operators.add("assert")
            this.operators.add("{}")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ExportAllDeclaration",
    "this",
    "operators",
    "add",
    "\\"export\\"",
    "node",
    "exportKind",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"*\\"",
    "node",
    "exported",
    "this",
    "operators",
    "add",
    "\\"as\\"",
    "node",
    "source",
    "this",
    "operators",
    "add",
    "\\"from\\"",
    "node",
    "assertions",
    "node",
    "assertions",
    "length",
    "this",
    "operators",
    "add",
    "\\"assert\\"",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "&&",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(
        this: ExtractTokensContext,
        node: TSESTree.ExportDefaultDeclaration,
    ) {
        this.operators.add("export")
        if (node.exportKind === "type") {
            this.operators.add("type")
        }
        this.operators.add("default")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ExportDefaultDeclaration",
    "this",
    "operators",
    "add",
    "\\"export\\"",
    "node",
    "exportKind",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"default\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(
        this: ExtractTokensContext,
        node: TSESTree.ExportNamedDeclaration,
    ) {
        this.operators.add("export")
        if (node.specifiers.length) {
            if (node.exportKind === "type") {
                this.operators.add("type")
            }
            this.operators.add("{}")
            this.operators.add(",", node.specifiers.length - 1)
        }
        if (node.source) {
            this.operators.add("from")
        }
        if (node.assertions && node.assertions.length) {
            this.operators.add("assert")
            this.operators.add("{}")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ExportNamedDeclaration",
    "this",
    "operators",
    "add",
    "\\"export\\"",
    "node",
    "specifiers",
    "length",
    "node",
    "exportKind",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "specifiers",
    "length",
    "1",
    "node",
    "source",
    "this",
    "operators",
    "add",
    "\\"from\\"",
    "node",
    "assertions",
    "node",
    "assertions",
    "length",
    "this",
    "operators",
    "add",
    "\\"assert\\"",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    ".",
    "{}",
    "if()",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "&&",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(
        this: ExtractTokensContext,
        node: TSESTree.ExportSpecifier,
    ) {
        if (node.exportKind === "type") {
            this.operators.add("type")
        }
        if (node.local.name !== node.exported.name) {
            this.operators.add("as")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ExportSpecifier",
    "node",
    "exportKind",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"type\\"",
    "node",
    "local",
    "name",
    "node",
    "exported",
    "name",
    "this",
    "operators",
    "add",
    "\\"as\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "!==",
    ".",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(
        this: ExtractTokensContext,
        node: TSESTree.FunctionDeclaration,
    ) {
        if (node.async) {
            this.operators.add("async")
        }
        this.operators.add("function")
        if (node.generator) {
            this.operators.add("*")
        }
        this.operators.add("()")
        this.operators.add(",", node.params.length - 1)

        if (node.declare) this.operators.add("declare")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "FunctionDeclaration",
    "node",
    "async",
    "this",
    "operators",
    "add",
    "\\"async\\"",
    "this",
    "operators",
    "add",
    "\\"function\\"",
    "node",
    "generator",
    "this",
    "operators",
    "add",
    "\\"*\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(
        this: ExtractTokensContext,
        node: TSESTree.FunctionExpression,
        parent: TSESTree.Node | null,
    ) {
        if (node.async) {
            this.operators.add("async")
        }

        if (
            !parent ||
            parent.type !== AST_NODE_TYPES.MethodDefinition &&
                (parent.type !== AST_NODE_TYPES.Property || !parent.method) &&
                parent.type !== AST_NODE_TYPES.TSAbstractMethodDefinition
        ) {
            this.operators.add("function")
        }

        if (node.generator) {
            this.operators.add("*")
        }
        this.operators.add("()")
        this.operators.add(",", node.params.length - 1)

        if (node.declare) this.operators.add("declare")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "FunctionExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "node",
    "async",
    "this",
    "operators",
    "add",
    "\\"async\\"",
    "parent",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "MethodDefinition",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "Property",
    "parent",
    "method",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSAbstractMethodDefinition",
    "this",
    "operators",
    "add",
    "\\"function\\"",
    "node",
    "generator",
    "this",
    "operators",
    "add",
    "\\"*\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ",",
    ":",
    ":",
    ".",
    ":",
    "|",
    ".",
    "{}",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "||",
    "!",
    "&&",
    "&&",
    "()",
    "!==",
    ".",
    ".",
    "||",
    "!==",
    ".",
    ".",
    "!",
    ".",
    "!==",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(
        this: ExtractTokensContext,
        node: TSESTree.Identifier,
        parent: TSESTree.Node | null,
    ) {
        if (parent) {
            if (
                parent.type === AST_NODE_TYPES.Property &&
                parent.shorthand &&
                parent.value === node
            )
                return
            if (
                parent.type === AST_NODE_TYPES.ImportSpecifier &&
                parent.imported.name === node.name &&
                parent.local === node
            )
                return
            if (
                parent.type === AST_NODE_TYPES.ExportSpecifier &&
                parent.local.name === node.name &&
                parent.exported === node
            )
                return
        }
        this.operands.add(node.name)
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "Identifier",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "parent",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "Property",
    "parent",
    "shorthand",
    "parent",
    "value",
    "node",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "ImportSpecifier",
    "parent",
    "imported",
    "name",
    "node",
    "name",
    "parent",
    "local",
    "node",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "ExportSpecifier",
    "parent",
    "local",
    "name",
    "node",
    "name",
    "parent",
    "exported",
    "node",
    "this",
    "operands",
    "add",
    "node",
    "name",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ",",
    ":",
    ":",
    ".",
    ":",
    "|",
    ".",
    "{}",
    "if()",
    "{}",
    "if()",
    "&&",
    "&&",
    "===",
    ".",
    ".",
    ".",
    "===",
    ".",
    "return",
    "if()",
    "&&",
    "&&",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
    ".",
    "===",
    ".",
    "return",
    "if()",
    "&&",
    "&&",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
    ".",
    "===",
    ".",
    "return",
    "()",
    ".",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(
        this: ExtractTokensContext,
        node: TSESTree.ImportDeclaration,
    ) {
        this.operators.add("import")
        if (node.importKind === "type") {
            this.operators.add("type")
        }
        if (
            node.specifiers.some(
                (spec) => spec.type === AST_NODE_TYPES.ImportSpecifier,
            )
        ) {
            this.operators.add("{}")
            this.operators.add(",", node.specifiers.length - 1)
        }
        if (node.specifiers.length) {
            this.operators.add("from")
        }
        if (node.assertions && node.assertions.length) {
            this.operators.add("assert")
            this.operators.add("{}")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ImportDeclaration",
    "this",
    "operators",
    "add",
    "\\"import\\"",
    "node",
    "importKind",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"type\\"",
    "node",
    "specifiers",
    "some",
    "spec",
    "spec",
    "type",
    "AST_NODE_TYPES",
    "ImportSpecifier",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "specifiers",
    "length",
    "1",
    "node",
    "specifiers",
    "length",
    "this",
    "operators",
    "add",
    "\\"from\\"",
    "node",
    "assertions",
    "node",
    "assertions",
    "length",
    "this",
    "operators",
    "add",
    "\\"assert\\"",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "()",
    ".",
    ".",
    "=>",
    "===",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "&&",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(
        this: ExtractTokensContext,
        node: TSESTree.ImportExpression,
    ) {
        this.operators.add("import")
        if (node.attributes) {
            this.operators.add(",")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ImportExpression",
    "this",
    "operators",
    "add",
    "\\"import\\"",
    "node",
    "attributes",
    "this",
    "operators",
    "add",
    "\\",\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(
        this: ExtractTokensContext,
        node: TSESTree.ImportSpecifier,
    ) {
        if (node.importKind === "type") {
            this.operators.add("type")
        }
        if (node.local.name !== node.imported.name) {
            this.operators.add("as")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ImportSpecifier",
    "node",
    "importKind",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"type\\"",
    "node",
    "local",
    "name",
    "node",
    "imported",
    "name",
    "this",
    "operators",
    "add",
    "\\"as\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "!==",
    ".",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(
        this: ExtractTokensContext,
        node: TSESTree.LogicalExpression,
    ) {
        this.operators.add(node.operator)

        if (getPrecedence(node) >= getPrecedence(node.right)) {
            this.operators.add("()")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "LogicalExpression",
    "this",
    "operators",
    "add",
    "node",
    "operator",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "right",
    "this",
    "operators",
    "add",
    "\\"()\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ">=",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(
        this: ExtractTokensContext,
        node: TSESTree.MemberExpression,
    ) {
        if (getPrecedence(node) > getPrecedence(node.object)) {
            this.operators.add("()")
        }
        if (node.optional) {
            this.operators.add("?.")
            if (node.computed) {
                this.operators.add("[]")
            }
        } else if (node.computed) {
            this.operators.add("[]")
        } else {
            this.operators.add(".")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "MemberExpression",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "object",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "node",
    "optional",
    "this",
    "operators",
    "add",
    "\\"?.\\"",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "this",
    "operators",
    "add",
    "\\".\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ">",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "else",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "else",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(
        this: ExtractTokensContext,
        node: TSESTree.MethodDefinition,
    ) {
        if (node.accessibility) this.operators.add(node.accessibility)
        if (node.static) this.operators.add("static")
        if (node.kind === "get" || node.kind === "set")
            this.operators.add(node.kind)
        if (node.computed) {
            this.operators.add("[]")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "MethodDefinition",
    "node",
    "accessibility",
    "this",
    "operators",
    "add",
    "node",
    "accessibility",
    "node",
    "static",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "node",
    "kind",
    "\\"get\\"",
    "node",
    "kind",
    "\\"set\\"",
    "this",
    "operators",
    "add",
    "node",
    "kind",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    "||",
    "===",
    ".",
    "===",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(
        this: ExtractTokensContext,
        node: TSESTree.ObjectExpression,
    ) {
        this.operators.add("{}")
        this.operators.add(",", node.properties.length - 1)
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ObjectExpression",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "properties",
    "length",
    "1",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(
        this: ExtractTokensContext,
        node: TSESTree.PrivateIdentifier,
    ) {
        this.operands.add(\`#\${node.name}\`)
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "PrivateIdentifier",
    "this",
    "operands",
    "add",
    "\`#\${",
    "}\`",
    "node",
    "name",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(
        this: ExtractTokensContext,
        node: TSESTree.PropertyDefinition,
    ) {
        if (node.accessibility) this.operators.add(node.accessibility)
        if (node.static) this.operators.add("static")
        if (node.readonly) this.operators.add("readonly")
        if (node.computed) {
            this.operators.add("[]")
        }
        if (node.value) {
            this.operators.add("=")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "PropertyDefinition",
    "node",
    "accessibility",
    "this",
    "operators",
    "add",
    "node",
    "accessibility",
    "node",
    "static",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "node",
    "readonly",
    "this",
    "operators",
    "add",
    "\\"readonly\\"",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "value",
    "this",
    "operators",
    "add",
    "\\"=\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(
        this: ExtractTokensContext,
        node: TSESTree.SequenceExpression,
    ) {
        this.operators.add(",", node.expressions.length - 1)
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "SequenceExpression",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "expressions",
    "length",
    "1",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(
        this: ExtractTokensContext,
        node: TSESTree.TSAbstractMethodDefinition,
    ) {
        this.operators.add("abstract")
        if (node.accessibility) this.operators.add(node.accessibility)
        if (node.static) this.operators.add("static")
        if (node.kind === "get" || node.kind === "set")
            this.operators.add(node.kind)
        if (node.computed) {
            this.operators.add("[]")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSAbstractMethodDefinition",
    "this",
    "operators",
    "add",
    "\\"abstract\\"",
    "node",
    "accessibility",
    "this",
    "operators",
    "add",
    "node",
    "accessibility",
    "node",
    "static",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "node",
    "kind",
    "\\"get\\"",
    "node",
    "kind",
    "\\"set\\"",
    "this",
    "operators",
    "add",
    "node",
    "kind",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    "||",
    "===",
    ".",
    "===",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(
        this: ExtractTokensContext,
        node: TSESTree.TSAbstractPropertyDefinition,
    ) {
        this.operators.add("abstract")
        if (node.accessibility) this.operators.add(node.accessibility)
        if (node.static) this.operators.add("static")
        if (node.computed) {
            this.operators.add("[]")
        }
        if (node.value) {
            this.operators.add("=")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSAbstractPropertyDefinition",
    "this",
    "operators",
    "add",
    "\\"abstract\\"",
    "node",
    "accessibility",
    "this",
    "operators",
    "add",
    "node",
    "accessibility",
    "node",
    "static",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "value",
    "this",
    "operators",
    "add",
    "\\"=\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(
        this: ExtractTokensContext,
        node: TSESTree.TSCallSignatureDeclaration,
    ) {
        this.operators.add("()")
        this.operators.add(",", node.params.length - 1)
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSCallSignatureDeclaration",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(
        this: ExtractTokensContext,
        node: TSESTree.TSConstructSignatureDeclaration,
    ) {
        this.operators.add("new")
        this.operators.add("()")
        this.operators.add(",", node.params.length - 1)
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSConstructSignatureDeclaration",
    "this",
    "operators",
    "add",
    "\\"new\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(
        this: ExtractTokensContext,
        node: TSESTree.TSConstructorType,
    ) {
        this.operators.add("new")
        this.operators.add("()")
        this.operators.add(",", node.params.length - 1)
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSConstructorType",
    "this",
    "operators",
    "add",
    "\\"new\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(
        this: ExtractTokensContext,
        node: TSESTree.TSDeclareFunction,
    ) {
        if (node.async) {
            this.operators.add("async")
        }
        this.operators.add("function")
        if (node.generator) {
            this.operators.add("*")
        }
        this.operators.add("()")
        this.operators.add(",", node.params.length - 1)
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSDeclareFunction",
    "node",
    "async",
    "this",
    "operators",
    "add",
    "\\"async\\"",
    "this",
    "operators",
    "add",
    "\\"function\\"",
    "node",
    "generator",
    "this",
    "operators",
    "add",
    "\\"*\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(
        this: ExtractTokensContext,
        node: TSESTree.TSEmptyBodyFunctionExpression,
        parent: TSESTree.Node | null,
    ) {
        if (node.async) {
            this.operators.add("async")
        }

        if (
            !parent ||
            parent.type !== AST_NODE_TYPES.MethodDefinition &&
                (parent.type !== AST_NODE_TYPES.Property || !parent.method) &&
                parent.type !== AST_NODE_TYPES.TSAbstractMethodDefinition
        ) {
            this.operators.add("function")
        }

        if (node.generator) {
            this.operators.add("*")
        }
        this.operators.add("()")
        this.operators.add(",", node.params.length - 1)

        if (node.declare) this.operators.add("declare")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSEmptyBodyFunctionExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "node",
    "async",
    "this",
    "operators",
    "add",
    "\\"async\\"",
    "parent",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "MethodDefinition",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "Property",
    "parent",
    "method",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSAbstractMethodDefinition",
    "this",
    "operators",
    "add",
    "\\"function\\"",
    "node",
    "generator",
    "this",
    "operators",
    "add",
    "\\"*\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ",",
    ":",
    ":",
    ".",
    ":",
    "|",
    ".",
    "{}",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "||",
    "!",
    "&&",
    "&&",
    "()",
    "!==",
    ".",
    ".",
    "||",
    "!==",
    ".",
    ".",
    "!",
    ".",
    "!==",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(
        this: ExtractTokensContext,
        node: TSESTree.TSEnumDeclaration,
    ) {
        if (node.const) this.operators.add("const")
        this.operators.add("enum")
        this.operators.add("{}")
        this.operators.add(",", node.members.length - 1)

        if (node.declare) this.operators.add("declare")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSEnumDeclaration",
    "node",
    "const",
    "this",
    "operators",
    "add",
    "\\"const\\"",
    "this",
    "operators",
    "add",
    "\\"enum\\"",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "members",
    "length",
    "1",
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(
        this: ExtractTokensContext,
        node: TSESTree.TSInterfaceDeclaration,
    ) {
        this.operators.add("interface")
        if (node.extends) {
            this.operators.add("extends")
            this.operators.add(",", node.extends.length - 1)
        }
        if (node.implements) {
            this.operators.add("implements")
            this.operators.add(",", node.implements.length - 1)
        }
        if (node.abstract) {
            this.operators.add("abstract")
        }
        if (node.declare) this.operators.add("declare")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSInterfaceDeclaration",
    "this",
    "operators",
    "add",
    "\\"interface\\"",
    "node",
    "extends",
    "this",
    "operators",
    "add",
    "\\"extends\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "extends",
    "length",
    "1",
    "node",
    "implements",
    "this",
    "operators",
    "add",
    "\\"implements\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "implements",
    "length",
    "1",
    "node",
    "abstract",
    "this",
    "operators",
    "add",
    "\\"abstract\\"",
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(
        this: ExtractTokensContext,
        node: TSESTree.TSIntersectionType,
    ) {
        this.operators.add("&", node.types.length - 1)
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSIntersectionType",
    "this",
    "operators",
    "add",
    "\\"&\\"",
    "node",
    "types",
    "length",
    "1",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(
        this: ExtractTokensContext,
        node: TSESTree.TSMethodSignature,
    ) {
        if (node.accessibility) this.operators.add(node.accessibility)
        if (node.readonly) this.operators.add("readonly")
        if (node.static) this.operators.add("static")
        if (node.export) this.operators.add("export")
        if (node.kind === "get" || node.kind === "set")
            this.operators.add(node.kind)
        if (node.computed) this.operators.add("[]")
        if (node.optional) this.operators.add("?")

        this.operators.add("()")
        this.operators.add(",", node.params.length - 1)
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSMethodSignature",
    "node",
    "accessibility",
    "this",
    "operators",
    "add",
    "node",
    "accessibility",
    "node",
    "readonly",
    "this",
    "operators",
    "add",
    "\\"readonly\\"",
    "node",
    "static",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "node",
    "export",
    "this",
    "operators",
    "add",
    "\\"export\\"",
    "node",
    "kind",
    "\\"get\\"",
    "node",
    "kind",
    "\\"set\\"",
    "this",
    "operators",
    "add",
    "node",
    "kind",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "optional",
    "this",
    "operators",
    "add",
    "\\"?\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    "||",
    "===",
    ".",
    "===",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(
        this: ExtractTokensContext,
        node: TSESTree.TSModuleDeclaration,
    ) {
        if (node.declare) this.operators.add("declare")
        if (!node.global) {
            this.operators.add("module")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSModuleDeclaration",
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
    "node",
    "global",
    "this",
    "operators",
    "add",
    "\\"module\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    "!",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(
        this: ExtractTokensContext,
        node: TSESTree.TSNamedTupleMember,
    ) {
        if (node.optional) this.operators.add("?")
        this.operators.add(":")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSNamedTupleMember",
    "node",
    "optional",
    "this",
    "operators",
    "add",
    "\\"?\\"",
    "this",
    "operators",
    "add",
    "\\":\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(
        this: ExtractTokensContext,
        node: TSESTree.TSParameterProperty,
    ) {
        if (node.accessibility) this.operators.add(node.accessibility)
        if (node.readonly) this.operators.add("readonly")
        if (node.static) this.operators.add("static")
        if (node.export) this.operators.add("export")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSParameterProperty",
    "node",
    "accessibility",
    "this",
    "operators",
    "add",
    "node",
    "accessibility",
    "node",
    "readonly",
    "this",
    "operators",
    "add",
    "\\"readonly\\"",
    "node",
    "static",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "node",
    "export",
    "this",
    "operators",
    "add",
    "\\"export\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(
        this: ExtractTokensContext,
        node: TSESTree.TSPropertySignature,
    ) {
        if (node.accessibility) this.operators.add(node.accessibility)
        if (node.readonly) this.operators.add("readonly")
        if (node.static) this.operators.add("static")
        if (node.export) this.operators.add("export")
        if (node.computed) this.operators.add("[]")
        if (node.optional) this.operators.add("?")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSPropertySignature",
    "node",
    "accessibility",
    "this",
    "operators",
    "add",
    "node",
    "accessibility",
    "node",
    "readonly",
    "this",
    "operators",
    "add",
    "\\"readonly\\"",
    "node",
    "static",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "node",
    "export",
    "this",
    "operators",
    "add",
    "\\"export\\"",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "optional",
    "this",
    "operators",
    "add",
    "\\"?\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(
        this: ExtractTokensContext,
        node: TSESTree.TSTypeAnnotation,
        parent: TSESTree.Node | null,
    ) {
        if (parent) {
            if (
                parent.type === AST_NODE_TYPES.TSFunctionType &&
                    parent.returnType === node ||
                parent.type === AST_NODE_TYPES.TSConstructorType &&
                    parent.returnType === node
            ) {
                this.operators.add("=>")
                return
            }
            if (parent.type === AST_NODE_TYPES.TSTypePredicate) {
                return
            }
        }
        this.operators.add(":")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSTypeAnnotation",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "parent",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSFunctionType",
    "parent",
    "returnType",
    "node",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSConstructorType",
    "parent",
    "returnType",
    "node",
    "this",
    "operators",
    "add",
    "\\"=>\\"",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSTypePredicate",
    "this",
    "operators",
    "add",
    "\\":\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ",",
    ":",
    ":",
    ".",
    ":",
    "|",
    ".",
    "{}",
    "if()",
    "{}",
    "if()",
    "||",
    "&&",
    "===",
    ".",
    ".",
    "===",
    ".",
    "&&",
    "===",
    ".",
    ".",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "return",
    "if()",
    "===",
    ".",
    ".",
    "{}",
    "return",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(
        this: ExtractTokensContext,
        node: TSESTree.TSTypeParameter,
        parent,
    ) {
        if (node.constraint) {
            if (
                parent &&
                parent.type === AST_NODE_TYPES.TSMappedType &&
                parent.typeParameter === node
            ) {
                this.operators.add("in")
            } else {
                this.operators.add("extends")
            }
        }
        if (node.default) {
            this.operators.add("=")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSTypeParameter",
    "parent",
    "node",
    "constraint",
    "parent",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSMappedType",
    "parent",
    "typeParameter",
    "node",
    "this",
    "operators",
    "add",
    "\\"in\\"",
    "this",
    "operators",
    "add",
    "\\"extends\\"",
    "node",
    "default",
    "this",
    "operators",
    "add",
    "\\"=\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "{}",
    "if()",
    "else",
    "&&",
    "&&",
    "===",
    ".",
    ".",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(
        this: ExtractTokensContext,
        node: TSESTree.TSTypeParameterDeclaration,
    ) {
        this.operators.add("<>")
        this.operators.add(",", node.params.length - 1)
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSTypeParameterDeclaration",
    "this",
    "operators",
    "add",
    "\\"<>\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(
        this: ExtractTokensContext,
        node: TSESTree.TSTypeParameterInstantiation,
    ) {
        this.operators.add("<>")
        this.operators.add(",", node.params.length - 1)
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSTypeParameterInstantiation",
    "this",
    "operators",
    "add",
    "\\"<>\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(
        this: ExtractTokensContext,
        node: TSESTree.TemplateElement,
        parent: TSESTree.Node | null,
    ) {
        let open = "\`"
        let close = "\`"
        if (
            parent &&
            (parent.type === AST_NODE_TYPES.TemplateLiteral ||
                parent.type === AST_NODE_TYPES.TSTemplateLiteralType)
        ) {
            const index = parent.quasis.indexOf(node)
            if (index > 0) {
                open = "}"
            }
            if (index < parent.quasis.length - 1) {
                close = "\${"
            }
        }
        this.operands.add(\`\${open}\${node.value.cooked}\${close}\`)
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TemplateElement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "open",
    "\\"\`\\"",
    "close",
    "\\"\`\\"",
    "parent",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TemplateLiteral",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSTemplateLiteralType",
    "index",
    "parent",
    "quasis",
    "indexOf",
    "node",
    "index",
    "0",
    "open",
    "\\"}\\"",
    "index",
    "parent",
    "quasis",
    "length",
    "1",
    "close",
    "\\"\${\\"",
    "this",
    "operands",
    "add",
    "\`\${",
    "}\${",
    "}\${",
    "}\`",
    "open",
    "node",
    "value",
    "cooked",
    "close",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ",",
    ":",
    ":",
    ".",
    ":",
    "|",
    ".",
    "{}",
    "let",
    "=",
    "let",
    "=",
    "if()",
    "&&",
    "()",
    "||",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
    "{}",
    "const",
    "=",
    "()",
    ".",
    ".",
    "if()",
    ">",
    "{}",
    "=",
    "if()",
    "<",
    "-",
    ".",
    ".",
    "{}",
    "=",
    "()",
    ".",
    ".",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(
        this: ExtractTokensContext,
        node: TSESTree.UnaryExpression,
    ) {
        this.operators.add(node.operator)

        if (getPrecedence(node) >= getPrecedence(node.argument)) {
            this.operators.add("()")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "UnaryExpression",
    "this",
    "operators",
    "add",
    "node",
    "operator",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "argument",
    "this",
    "operators",
    "add",
    "\\"()\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ">=",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(
        this: ExtractTokensContext,
        node: TSESTree.UpdateExpression,
    ) {
        this.operators.add(node.operator)

        if (getPrecedence(node) >= getPrecedence(node.argument)) {
            this.operators.add("()")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "UpdateExpression",
    "this",
    "operators",
    "add",
    "node",
    "operator",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "argument",
    "this",
    "operators",
    "add",
    "\\"()\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ">=",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(
        this: ExtractTokensContext,
        node: TSESTree.VariableDeclaration,
    ) {
        this.operators.add(node.kind)
        this.operators.add(",", node.declarations.length - 1)

        if (node.declare) this.operators.add("declare")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "VariableDeclaration",
    "this",
    "operators",
    "add",
    "node",
    "kind",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "declarations",
    "length",
    "1",
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(
        this: ExtractTokensContext,
        node: TSESTree.VariableDeclarator,
    ) {
        if (node.init) {
            this.operators.add("=")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "VariableDeclarator",
    "node",
    "init",
    "this",
    "operators",
    "add",
    "\\"=\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(
        this: ExtractTokensContext,
        node: TSESTree.YieldExpression,
    ) {
        this.operators.add("yield")
        if (node.delegate) {
            this.operators.add("*")
        }
        if (
            node.argument &&
            getPrecedence(node) > getPrecedence(node.argument)
        ) {
            this.operators.add("()")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "YieldExpression",
    "this",
    "operators",
    "add",
    "\\"yield\\"",
    "node",
    "delegate",
    "this",
    "operators",
    "add",
    "\\"*\\"",
    "node",
    "argument",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "argument",
    "this",
    "operators",
    "add",
    "\\"()\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "&&",
    ".",
    ">",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(): T[] {
        return this.total
    }
\` 1`] = `
Object {
  "operands": Array [
    "T",
    "this",
    "total",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "[]",
    "{}",
    "return",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(): number {
        return this.distinct.size
    }
\` 1`] = `
Object {
  "operands": Array [
    "number",
    "this",
    "distinct",
    "size",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "return",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(): number {
        return this.total.length
    }
\` 1`] = `
Object {
  "operands": Array [
    "number",
    "this",
    "total",
    "length",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "return",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(e: T, count = 1): void {
        if (count === 1) {
            this.total.push(e)
            this.distinct.add(e)
        } else {
            for (let index = 0; index < count; index++) {
                this.total.push(e)
                this.distinct.add(e)
            }
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "e",
    "T",
    "count",
    "1",
    "void",
    "count",
    "1",
    "this",
    "total",
    "push",
    "e",
    "this",
    "distinct",
    "add",
    "e",
    "index",
    "0",
    "index",
    "count",
    "index",
    "this",
    "total",
    "push",
    "e",
    "this",
    "distinct",
    "add",
    "e",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    "=",
    ":",
    "{}",
    "if()",
    "else",
    "===",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "{}",
    "for()",
    ";",
    ";",
    "let",
    "=",
    "<",
    "++",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operands.add("any")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"any\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operands.add("bigint")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"bigint\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operands.add("boolean")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"boolean\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operands.add("intrinsic")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"intrinsic\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operands.add("never")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"never\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operands.add("null")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"null\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operands.add("number")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"number\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operands.add("object")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"object\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operands.add("require")
        this.operators.add("()")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"require\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operands.add("string")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"string\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operands.add("super")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"super\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operands.add("symbol")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"symbol\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operands.add("this")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"this\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operands.add("undefined")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"undefined\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operands.add("unknown")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"unknown\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operands.add("void")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"void\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operators.add("!")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"!\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operators.add("*")
        this.operators.add("as")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"*\\"",
    "this",
    "operators",
    "add",
    "\\"as\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operators.add(".")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\".\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operators.add("...")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"...\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operators.add(":")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\":\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operators.add(";")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\";\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operators.add("<")
        this.operators.add(">")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"<\\"",
    "this",
    "operators",
    "add",
    "\\">\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operators.add("</")
        this.operators.add(">")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"</\\"",
    "this",
    "operators",
    "add",
    "\\">\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operators.add("<>")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"<>\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operators.add("=")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"=\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operators.add("?")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"?\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operators.add("@")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"@\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operators.add("[]")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operators.add("{}")
        this.operators.add("...")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "this",
    "operators",
    "add",
    "\\"...\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operators.add("{}")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operators.add("abstract")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"abstract\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operators.add("as")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"as\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operators.add("async")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"async\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operators.add("break")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"break\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operators.add("continue")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"continue\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operators.add("debugger")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"debugger\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operators.add("declare")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operators.add("do")
        this.operators.add("while()")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"do\\"",
    "this",
    "operators",
    "add",
    "\\"while()\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operators.add("export")
        this.operators.add("=")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"export\\"",
    "this",
    "operators",
    "add",
    "\\"=\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operators.add("export")
        this.operators.add("as")
        this.operators.add("namespace")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"export\\"",
    "this",
    "operators",
    "add",
    "\\"as\\"",
    "this",
    "operators",
    "add",
    "\\"namespace\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operators.add("export")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"export\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operators.add("extends")
        this.operators.add("?:")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"extends\\"",
    "this",
    "operators",
    "add",
    "\\"?:\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operators.add("for()")
        this.operators.add(";", 2)
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"for()\\"",
    "this",
    "operators",
    "add",
    "\\";\\"",
    "2",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operators.add("for()")
        this.operators.add("in")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"for()\\"",
    "this",
    "operators",
    "add",
    "\\"in\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operators.add("for()")
        this.operators.add("of")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"for()\\"",
    "this",
    "operators",
    "add",
    "\\"of\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operators.add("import")
        this.operators.add("=")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"import\\"",
    "this",
    "operators",
    "add",
    "\\"=\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operators.add("infer")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"infer\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operators.add("is")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"is\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operators.add("keyof")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"keyof\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operators.add("private")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"private\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operators.add("protected")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"protected\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operators.add("public")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"public\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operators.add("readonly")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"readonly\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operators.add("return")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"return\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operators.add("static")
        this.operators.add("{}")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operators.add("static")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"static\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operators.add("switch()")
        this.operators.add("{}")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"switch()\\"",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operators.add("throw")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"throw\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operators.add("type")
        this.operators.add("=")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"=\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operators.add("typeof")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"typeof\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operators.add("while()")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"while()\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext) {
        this.operators.add("with()")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"with()\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext, node) {
        this.operators.add("[]")
        if (node.readonly) this.operators.add("readonly")
        if (node.static) this.operators.add("static")
        if (node.export) this.operators.add("export")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "readonly",
    "this",
    "operators",
    "add",
    "\\"readonly\\"",
    "node",
    "static",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "node",
    "export",
    "this",
    "operators",
    "add",
    "\\"export\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext, node) {
        this.operators.add("[]")
        this.operators.add(",", node.elementTypes.length - 1)
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "elementTypes",
    "length",
    "1",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext, node: TSESTree.ArrayPattern) {
        this.operators.add("[]")
        this.operators.add(",", node.elements.length - 1)
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ArrayPattern",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "elements",
    "length",
    "1",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext, node: TSESTree.CallExpression) {
        if (node.optional) {
            this.operators.add("?.")
        }
        this.operators.add("()")
        this.operators.add(",", node.arguments.length - 1)
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "CallExpression",
    "node",
    "optional",
    "this",
    "operators",
    "add",
    "\\"?.\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "arguments",
    "length",
    "1",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext, node: TSESTree.CatchClause) {
        this.operators.add("catch")
        if (node.param) {
            this.operators.add("()")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "CatchClause",
    "this",
    "operators",
    "add",
    "\\"catch\\"",
    "node",
    "param",
    "this",
    "operators",
    "add",
    "\\"()\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext, node: TSESTree.IfStatement) {
        this.operators.add("if()")
        if (node.alternate) {
            this.operators.add("else")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "IfStatement",
    "this",
    "operators",
    "add",
    "\\"if()\\"",
    "node",
    "alternate",
    "this",
    "operators",
    "add",
    "\\"else\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext, node: TSESTree.JSXIdentifier) {
        this.operands.add(node.name)
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "JSXIdentifier",
    "this",
    "operands",
    "add",
    "node",
    "name",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext, node: TSESTree.JSXText) {
        this.operands.add(JSON.stringify(node.value))
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "JSXText",
    "this",
    "operands",
    "add",
    "JSON",
    "stringify",
    "node",
    "value",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext, node: TSESTree.Literal) {
        if ("bigint" in node && node.bigint) {
            this.operands.add(\`\${node.bigint}n\`)
        } else if ("regex" in node && node.regex) {
            this.operands.add(\`/\${node.regex.pattern}/\${node.regex.flags}\`)
        } else {
            this.operands.add(JSON.stringify(node.value))
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "Literal",
    "\\"bigint\\"",
    "node",
    "node",
    "bigint",
    "this",
    "operands",
    "add",
    "\`\${",
    "}n\`",
    "node",
    "bigint",
    "\\"regex\\"",
    "node",
    "node",
    "regex",
    "this",
    "operands",
    "add",
    "\`/\${",
    "}/\${",
    "}\`",
    "node",
    "regex",
    "pattern",
    "node",
    "regex",
    "flags",
    "this",
    "operands",
    "add",
    "JSON",
    "stringify",
    "node",
    "value",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    "else",
    "&&",
    "in",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    "if()",
    "else",
    "&&",
    "in",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext, node: TSESTree.NewExpression) {
        this.operators.add("new")

        if (getPrecedence(node) >= getPrecedence(node.callee)) {
            this.operators.add("()")
        }

        this.operators.add("()")
        this.operators.add(",", node.arguments.length - 1)
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "NewExpression",
    "this",
    "operators",
    "add",
    "\\"new\\"",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "callee",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "arguments",
    "length",
    "1",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ">=",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext, node: TSESTree.ObjectPattern) {
        this.operators.add("{}")
        this.operators.add(",", node.properties.length - 1)
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ObjectPattern",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "properties",
    "length",
    "1",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext, node: TSESTree.Property) {
        if (node.kind === "get" || node.kind === "set")
            this.operators.add(node.kind)
        if (node.computed) {
            this.operators.add("[]")
        }
        if (!node.shorthand && !node.method) {
            this.operators.add(":")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "Property",
    "node",
    "kind",
    "\\"get\\"",
    "node",
    "kind",
    "\\"set\\"",
    "this",
    "operators",
    "add",
    "node",
    "kind",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "shorthand",
    "node",
    "method",
    "this",
    "operators",
    "add",
    "\\":\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    "||",
    "===",
    ".",
    "===",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "&&",
    "!",
    ".",
    "!",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext, node: TSESTree.SwitchCase) {
        if (node.test) {
            this.operators.add("case")
        } else {
            this.operators.add("default")
        }
        this.operators.add(":")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "SwitchCase",
    "node",
    "test",
    "this",
    "operators",
    "add",
    "\\"case\\"",
    "this",
    "operators",
    "add",
    "\\"default\\"",
    "this",
    "operators",
    "add",
    "\\":\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    "else",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext, node: TSESTree.TSEnumMember) {
        if (node.computed) {
            this.operators.add("[]")
        }
        if (node.initializer) {
            this.operators.add("=")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSEnumMember",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "initializer",
    "this",
    "operators",
    "add",
    "\\"=\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext, node: TSESTree.TSFunctionType) {
        this.operators.add("()")
        this.operators.add(",", node.params.length - 1)
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSFunctionType",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext, node: TSESTree.TSImportType) {
        this.operators.add("import")
        this.operators.add("()")
        if (node.qualifier) {
            this.operators.add(".")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSImportType",
    "this",
    "operators",
    "add",
    "\\"import\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "node",
    "qualifier",
    "this",
    "operators",
    "add",
    "\\".\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext, node: TSESTree.TSMappedType) {
        this.operators.add("{}")
        if (node.readonly) {
            if (typeof node.readonly === "string") {
                this.operators.add(node.readonly)
            }
            this.operators.add("readonly")
        }

        this.operators.add("[]")
        if (node.optional) {
            if (typeof node.optional === "string") {
                this.operators.add(node.optional)
            }
            this.operators.add("?")
        }
        this.operators.add(":")
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSMappedType",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "node",
    "readonly",
    "node",
    "readonly",
    "\\"string\\"",
    "this",
    "operators",
    "add",
    "node",
    "readonly",
    "this",
    "operators",
    "add",
    "\\"readonly\\"",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "optional",
    "node",
    "optional",
    "\\"string\\"",
    "this",
    "operators",
    "add",
    "node",
    "optional",
    "this",
    "operators",
    "add",
    "\\"?\\"",
    "this",
    "operators",
    "add",
    "\\":\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "if()",
    "===",
    "typeof",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "if()",
    "===",
    "typeof",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext, node: TSESTree.TSUnionType) {
        this.operators.add("|", node.types.length - 1)
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSUnionType",
    "this",
    "operators",
    "add",
    "\\"|\\"",
    "node",
    "types",
    "length",
    "1",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts FunctionExpression\`
(this: ExtractTokensContext, node: TSESTree.TryStatement) {
        this.operators.add("try")
        if (node.finalizer) {
            this.operators.add("finally")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TryStatement",
    "this",
    "operators",
    "add",
    "\\"try\\"",
    "node",
    "finalizer",
    "this",
    "operators",
    "add",
    "\\"finally\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (
                extract &&
                Object.prototype.hasOwnProperty.call(EXTRACT_TOKENS, node.type)
            ) {
                extract.call(context, node, parent)
            }
\` 1`] = `
Object {
  "operands": Array [
    "extract",
    "Object",
    "prototype",
    "hasOwnProperty",
    "call",
    "EXTRACT_TOKENS",
    "node",
    "type",
    "extract",
    "call",
    "context",
    "node",
    "parent",
  ],
  "operators": Array [
    "if()",
    "&&",
    "()",
    ",",
    ".",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ",",
    ",",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (
                parent &&
                parent.type === AST_NODE_TYPES.TSMappedType &&
                parent.typeParameter === node
            ) {
                this.operators.add("in")
            } else {
                this.operators.add("extends")
            }
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSMappedType",
    "parent",
    "typeParameter",
    "node",
    "this",
    "operators",
    "add",
    "\\"in\\"",
    "this",
    "operators",
    "add",
    "\\"extends\\"",
  ],
  "operators": Array [
    "if()",
    "else",
    "&&",
    "&&",
    "===",
    ".",
    ".",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (
                parent.type === AST_NODE_TYPES.ExportSpecifier &&
                parent.local.name === node.name &&
                parent.exported === node
            )
                return
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "type",
    "AST_NODE_TYPES",
    "ExportSpecifier",
    "parent",
    "local",
    "name",
    "node",
    "name",
    "parent",
    "exported",
    "node",
  ],
  "operators": Array [
    "if()",
    "&&",
    "&&",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
    ".",
    "===",
    ".",
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (
                parent.type === AST_NODE_TYPES.ImportSpecifier &&
                parent.imported.name === node.name &&
                parent.local === node
            )
                return
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "type",
    "AST_NODE_TYPES",
    "ImportSpecifier",
    "parent",
    "imported",
    "name",
    "node",
    "name",
    "parent",
    "local",
    "node",
  ],
  "operators": Array [
    "if()",
    "&&",
    "&&",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
    ".",
    "===",
    ".",
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (
                parent.type === AST_NODE_TYPES.Property &&
                parent.shorthand &&
                parent.value === node
            )
                return
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "type",
    "AST_NODE_TYPES",
    "Property",
    "parent",
    "shorthand",
    "parent",
    "value",
    "node",
  ],
  "operators": Array [
    "if()",
    "&&",
    "&&",
    "===",
    ".",
    ".",
    ".",
    "===",
    ".",
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (
                parent.type === AST_NODE_TYPES.TSFunctionType &&
                    parent.returnType === node ||
                parent.type === AST_NODE_TYPES.TSConstructorType &&
                    parent.returnType === node
            ) {
                this.operators.add("=>")
                return
            }
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSFunctionType",
    "parent",
    "returnType",
    "node",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSConstructorType",
    "parent",
    "returnType",
    "node",
    "this",
    "operators",
    "add",
    "\\"=>\\"",
  ],
  "operators": Array [
    "if()",
    "||",
    "&&",
    "===",
    ".",
    ".",
    "===",
    ".",
    "&&",
    "===",
    ".",
    ".",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (
            !parent ||
            parent.type !== AST_NODE_TYPES.MethodDefinition &&
                (parent.type !== AST_NODE_TYPES.Property || !parent.method) &&
                parent.type !== AST_NODE_TYPES.TSAbstractMethodDefinition
        ) {
            this.operators.add("function")
        }
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "MethodDefinition",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "Property",
    "parent",
    "method",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSAbstractMethodDefinition",
    "this",
    "operators",
    "add",
    "\\"function\\"",
  ],
  "operators": Array [
    "if()",
    "||",
    "!",
    "&&",
    "&&",
    "()",
    "!==",
    ".",
    ".",
    "||",
    "!==",
    ".",
    ".",
    "!",
    ".",
    "!==",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (
            node.argument &&
            getPrecedence(node) > getPrecedence(node.argument)
        ) {
            this.operators.add("()")
        }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "argument",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "argument",
    "this",
    "operators",
    "add",
    "\\"()\\"",
  ],
  "operators": Array [
    "if()",
    "&&",
    ".",
    ">",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (
            node.operator === "*" ||
            node.operator === "/" ||
            node.operator === "%"
        ) {
            return 13
        }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "operator",
    "\\"*\\"",
    "node",
    "operator",
    "\\"/\\"",
    "node",
    "operator",
    "\\"%\\"",
    "13",
  ],
  "operators": Array [
    "if()",
    "||",
    "||",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
    "{}",
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (
            node.operator === "<" ||
            node.operator === "<=" ||
            node.operator === ">" ||
            node.operator === ">=" ||
            node.operator === "in" ||
            node.operator === "instanceof"
        ) {
            return 10
        }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "operator",
    "\\"<\\"",
    "node",
    "operator",
    "\\"<=\\"",
    "node",
    "operator",
    "\\">\\"",
    "node",
    "operator",
    "\\">=\\"",
    "node",
    "operator",
    "\\"in\\"",
    "node",
    "operator",
    "\\"instanceof\\"",
    "10",
  ],
  "operators": Array [
    "if()",
    "||",
    "||",
    "||",
    "||",
    "||",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
    "{}",
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (
            node.operator === "<<" ||
            node.operator === ">>" ||
            node.operator === ">>>"
        ) {
            return 11
        }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "operator",
    "\\"<<\\"",
    "node",
    "operator",
    "\\">>\\"",
    "node",
    "operator",
    "\\">>>\\"",
    "11",
  ],
  "operators": Array [
    "if()",
    "||",
    "||",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
    "{}",
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (
            node.operator === "==" ||
            node.operator === "!=" ||
            node.operator === "===" ||
            node.operator === "!=="
        ) {
            return 9
        }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "operator",
    "\\"==\\"",
    "node",
    "operator",
    "\\"!=\\"",
    "node",
    "operator",
    "\\"===\\"",
    "node",
    "operator",
    "\\"!==\\"",
    "9",
  ],
  "operators": Array [
    "if()",
    "||",
    "||",
    "||",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
    "{}",
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (
            node.params.length !== 1 ||
            node.params[0].type !== AST_NODE_TYPES.Identifier ||
            node.params[0].typeAnnotation
        ) {
            this.operators.add("()")
        }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "params",
    "length",
    "1",
    "node",
    "params",
    "0",
    "type",
    "AST_NODE_TYPES",
    "Identifier",
    "node",
    "params",
    "0",
    "typeAnnotation",
    "this",
    "operators",
    "add",
    "\\"()\\"",
  ],
  "operators": Array [
    "if()",
    "||",
    "||",
    "!==",
    ".",
    ".",
    "!==",
    ".",
    "[]",
    ".",
    ".",
    ".",
    "[]",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (
            node.specifiers.some(
                (spec) => spec.type === AST_NODE_TYPES.ImportSpecifier,
            )
        ) {
            this.operators.add("{}")
            this.operators.add(",", node.specifiers.length - 1)
        }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "specifiers",
    "some",
    "spec",
    "spec",
    "type",
    "AST_NODE_TYPES",
    "ImportSpecifier",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "specifiers",
    "length",
    "1",
  ],
  "operators": Array [
    "if()",
    "()",
    ".",
    ".",
    "=>",
    "===",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (
            parent &&
            (parent.type === AST_NODE_TYPES.TemplateLiteral ||
                parent.type === AST_NODE_TYPES.TSTemplateLiteralType)
        ) {
            const index = parent.quasis.indexOf(node)
            if (index > 0) {
                open = "}"
            }
            if (index < parent.quasis.length - 1) {
                close = "\${"
            }
        }
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TemplateLiteral",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSTemplateLiteralType",
    "index",
    "parent",
    "quasis",
    "indexOf",
    "node",
    "index",
    "0",
    "open",
    "\\"}\\"",
    "index",
    "parent",
    "quasis",
    "length",
    "1",
    "close",
    "\\"\${\\"",
  ],
  "operators": Array [
    "if()",
    "&&",
    "()",
    "||",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
    "{}",
    "const",
    "=",
    "()",
    ".",
    ".",
    "if()",
    ">",
    "{}",
    "=",
    "if()",
    "<",
    "-",
    ".",
    ".",
    "{}",
    "=",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (
        node.type === AST_NODE_TYPES.NewExpression ||
        node.type === AST_NODE_TYPES.CallExpression ||
        node.type === AST_NODE_TYPES.ImportExpression ||
        node.type === AST_NODE_TYPES.ChainExpression
    ) {
        return 18
    }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "type",
    "AST_NODE_TYPES",
    "NewExpression",
    "node",
    "type",
    "AST_NODE_TYPES",
    "CallExpression",
    "node",
    "type",
    "AST_NODE_TYPES",
    "ImportExpression",
    "node",
    "type",
    "AST_NODE_TYPES",
    "ChainExpression",
    "18",
  ],
  "operators": Array [
    "if()",
    "||",
    "||",
    "||",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
    "{}",
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (
        node.type === AST_NODE_TYPES.UnaryExpression ||
        node.type === AST_NODE_TYPES.AwaitExpression
    ) {
        return 15
    }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "type",
    "AST_NODE_TYPES",
    "UnaryExpression",
    "node",
    "type",
    "AST_NODE_TYPES",
    "AwaitExpression",
    "15",
  ],
  "operators": Array [
    "if()",
    "||",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
    "{}",
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (
        node.type === AST_NODE_TYPES.YieldExpression ||
        node.type === AST_NODE_TYPES.AssignmentExpression
    ) {
        return 2
    }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "type",
    "AST_NODE_TYPES",
    "YieldExpression",
    "node",
    "type",
    "AST_NODE_TYPES",
    "AssignmentExpression",
    "2",
  ],
  "operators": Array [
    "if()",
    "||",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
    "{}",
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (!node.global) {
            this.operators.add("module")
        }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "global",
    "this",
    "operators",
    "add",
    "\\"module\\"",
  ],
  "operators": Array [
    "if()",
    "!",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (!node.shorthand && !node.method) {
            this.operators.add(":")
        }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "shorthand",
    "node",
    "method",
    "this",
    "operators",
    "add",
    "\\":\\"",
  ],
  "operators": Array [
    "if()",
    "&&",
    "!",
    ".",
    "!",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if ("bigint" in node && node.bigint) {
            this.operands.add(\`\${node.bigint}n\`)
        } else if ("regex" in node && node.regex) {
            this.operands.add(\`/\${node.regex.pattern}/\${node.regex.flags}\`)
        } else {
            this.operands.add(JSON.stringify(node.value))
        }
\` 1`] = `
Object {
  "operands": Array [
    "\\"bigint\\"",
    "node",
    "node",
    "bigint",
    "this",
    "operands",
    "add",
    "\`\${",
    "}n\`",
    "node",
    "bigint",
    "\\"regex\\"",
    "node",
    "node",
    "regex",
    "this",
    "operands",
    "add",
    "\`/\${",
    "}/\${",
    "}\`",
    "node",
    "regex",
    "pattern",
    "node",
    "regex",
    "flags",
    "this",
    "operands",
    "add",
    "JSON",
    "stringify",
    "node",
    "value",
  ],
  "operators": Array [
    "if()",
    "else",
    "&&",
    "in",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    "if()",
    "else",
    "&&",
    "in",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if ("regex" in node && node.regex) {
            this.operands.add(\`/\${node.regex.pattern}/\${node.regex.flags}\`)
        } else {
            this.operands.add(JSON.stringify(node.value))
        }
\` 1`] = `
Object {
  "operands": Array [
    "\\"regex\\"",
    "node",
    "node",
    "regex",
    "this",
    "operands",
    "add",
    "\`/\${",
    "}/\${",
    "}\`",
    "node",
    "regex",
    "pattern",
    "node",
    "regex",
    "flags",
    "this",
    "operands",
    "add",
    "JSON",
    "stringify",
    "node",
    "value",
  ],
  "operators": Array [
    "if()",
    "else",
    "&&",
    "in",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (count === 1) {
            this.total.push(e)
            this.distinct.add(e)
        } else {
            for (let index = 0; index < count; index++) {
                this.total.push(e)
                this.distinct.add(e)
            }
        }
\` 1`] = `
Object {
  "operands": Array [
    "count",
    "1",
    "this",
    "total",
    "push",
    "e",
    "this",
    "distinct",
    "add",
    "e",
    "index",
    "0",
    "index",
    "count",
    "index",
    "this",
    "total",
    "push",
    "e",
    "this",
    "distinct",
    "add",
    "e",
  ],
  "operators": Array [
    "if()",
    "else",
    "===",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "{}",
    "for()",
    ";",
    ";",
    "let",
    "=",
    "<",
    "++",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (getPrecedence(node) > getPrecedence(node.argument)) {
            this.operators.add("()")
        }
\` 1`] = `
Object {
  "operands": Array [
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "argument",
    "this",
    "operators",
    "add",
    "\\"()\\"",
  ],
  "operators": Array [
    "if()",
    ">",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (getPrecedence(node) > getPrecedence(node.object)) {
            this.operators.add("()")
        }
\` 1`] = `
Object {
  "operands": Array [
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "object",
    "this",
    "operators",
    "add",
    "\\"()\\"",
  ],
  "operators": Array [
    "if()",
    ">",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (getPrecedence(node) >= getPrecedence(node.argument)) {
            this.operators.add("()")
        }
\` 1`] = `
Object {
  "operands": Array [
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "argument",
    "this",
    "operators",
    "add",
    "\\"()\\"",
  ],
  "operators": Array [
    "if()",
    ">=",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (getPrecedence(node) >= getPrecedence(node.callee)) {
            this.operators.add("()")
        }
\` 1`] = `
Object {
  "operands": Array [
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "callee",
    "this",
    "operators",
    "add",
    "\\"()\\"",
  ],
  "operators": Array [
    "if()",
    ">=",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (getPrecedence(node) >= getPrecedence(node.right)) {
            this.operators.add("()")
        }
\` 1`] = `
Object {
  "operands": Array [
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "right",
    "this",
    "operators",
    "add",
    "\\"()\\"",
  ],
  "operators": Array [
    "if()",
    ">=",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (getPrecedence(node) >= getPrecedence(node.test)) {
            this.operators.add("()")
        }
\` 1`] = `
Object {
  "operands": Array [
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "test",
    "this",
    "operators",
    "add",
    "\\"()\\"",
  ],
  "operators": Array [
    "if()",
    ">=",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (index < parent.quasis.length - 1) {
                close = "\${"
            }
\` 1`] = `
Object {
  "operands": Array [
    "index",
    "parent",
    "quasis",
    "length",
    "1",
    "close",
    "\\"\${\\"",
  ],
  "operators": Array [
    "if()",
    "<",
    "-",
    ".",
    ".",
    "{}",
    "=",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (index > 0) {
                open = "}"
            }
\` 1`] = `
Object {
  "operands": Array [
    "index",
    "0",
    "open",
    "\\"}\\"",
  ],
  "operators": Array [
    "if()",
    ">",
    "{}",
    "=",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.abstract) {
            this.operators.add("abstract")
        }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "abstract",
    "this",
    "operators",
    "add",
    "\\"abstract\\"",
  ],
  "operators": Array [
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.accessibility) this.operators.add(node.accessibility)
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "accessibility",
    "this",
    "operators",
    "add",
    "node",
    "accessibility",
  ],
  "operators": Array [
    "if()",
    ".",
    "()",
    ".",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.alternate) {
            this.operators.add("else")
        }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "alternate",
    "this",
    "operators",
    "add",
    "\\"else\\"",
  ],
  "operators": Array [
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.assertions && node.assertions.length) {
            this.operators.add("assert")
            this.operators.add("{}")
        }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "assertions",
    "node",
    "assertions",
    "length",
    "this",
    "operators",
    "add",
    "\\"assert\\"",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
  ],
  "operators": Array [
    "if()",
    "&&",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.async) {
            this.operators.add("async")
        }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "async",
    "this",
    "operators",
    "add",
    "\\"async\\"",
  ],
  "operators": Array [
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.attributes) {
            this.operators.add(",")
        }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "attributes",
    "this",
    "operators",
    "add",
    "\\",\\"",
  ],
  "operators": Array [
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.body.type === AST_NODE_TYPES.ObjectExpression) {
            this.operators.add("()")
        }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "body",
    "type",
    "AST_NODE_TYPES",
    "ObjectExpression",
    "this",
    "operators",
    "add",
    "\\"()\\"",
  ],
  "operators": Array [
    "if()",
    "===",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.computed) {
                this.operators.add("[]")
            }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
  ],
  "operators": Array [
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.computed) {
            this.operators.add("[]")
        }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
  ],
  "operators": Array [
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.computed) {
            this.operators.add("[]")
        } else {
            this.operators.add(".")
        }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "this",
    "operators",
    "add",
    "\\".\\"",
  ],
  "operators": Array [
    "if()",
    "else",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.computed) this.operators.add("[]")
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
  ],
  "operators": Array [
    "if()",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.const) this.operators.add("const")
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "const",
    "this",
    "operators",
    "add",
    "\\"const\\"",
  ],
  "operators": Array [
    "if()",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.constraint) {
            if (
                parent &&
                parent.type === AST_NODE_TYPES.TSMappedType &&
                parent.typeParameter === node
            ) {
                this.operators.add("in")
            } else {
                this.operators.add("extends")
            }
        }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "constraint",
    "parent",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSMappedType",
    "parent",
    "typeParameter",
    "node",
    "this",
    "operators",
    "add",
    "\\"in\\"",
    "this",
    "operators",
    "add",
    "\\"extends\\"",
  ],
  "operators": Array [
    "if()",
    ".",
    "{}",
    "if()",
    "else",
    "&&",
    "&&",
    "===",
    ".",
    ".",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.declare) this.operators.add("declare")
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
  ],
  "operators": Array [
    "if()",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.default) {
            this.operators.add("=")
        }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "default",
    "this",
    "operators",
    "add",
    "\\"=\\"",
  ],
  "operators": Array [
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.delegate) {
            this.operators.add("*")
        }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "delegate",
    "this",
    "operators",
    "add",
    "\\"*\\"",
  ],
  "operators": Array [
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.export) this.operators.add("export")
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "export",
    "this",
    "operators",
    "add",
    "\\"export\\"",
  ],
  "operators": Array [
    "if()",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.exportKind === "type") {
                this.operators.add("type")
            }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "exportKind",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"type\\"",
  ],
  "operators": Array [
    "if()",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.exportKind === "type") {
            this.operators.add("type")
        }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "exportKind",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"type\\"",
  ],
  "operators": Array [
    "if()",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.exported) {
            this.operators.add("as")
        }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "exported",
    "this",
    "operators",
    "add",
    "\\"as\\"",
  ],
  "operators": Array [
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.extends) {
            this.operators.add("extends")
            this.operators.add(",", node.extends.length - 1)
        }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "extends",
    "this",
    "operators",
    "add",
    "\\"extends\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "extends",
    "length",
    "1",
  ],
  "operators": Array [
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.finalizer) {
            this.operators.add("finally")
        }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "finalizer",
    "this",
    "operators",
    "add",
    "\\"finally\\"",
  ],
  "operators": Array [
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.generator) {
            // It cannot actually be used.
            this.operators.add("*")
        }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "generator",
    "this",
    "operators",
    "add",
    "\\"*\\"",
  ],
  "operators": Array [
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.generator) {
            this.operators.add("*")
        }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "generator",
    "this",
    "operators",
    "add",
    "\\"*\\"",
  ],
  "operators": Array [
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.implements) {
            this.operators.add("implements")
            this.operators.add(",", node.implements.length - 1)
        }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "implements",
    "this",
    "operators",
    "add",
    "\\"implements\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "implements",
    "length",
    "1",
  ],
  "operators": Array [
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.implements) {
            this.operators.add("implements")
        }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "implements",
    "this",
    "operators",
    "add",
    "\\"implements\\"",
  ],
  "operators": Array [
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.importKind === "type") {
            this.operators.add("type")
        }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "importKind",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"type\\"",
  ],
  "operators": Array [
    "if()",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.init) {
            this.operators.add("=")
        }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "init",
    "this",
    "operators",
    "add",
    "\\"=\\"",
  ],
  "operators": Array [
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.initializer) {
            this.operators.add("=")
        }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "initializer",
    "this",
    "operators",
    "add",
    "\\"=\\"",
  ],
  "operators": Array [
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.kind === "get" || node.kind === "set")
            this.operators.add(node.kind)
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "kind",
    "\\"get\\"",
    "node",
    "kind",
    "\\"set\\"",
    "this",
    "operators",
    "add",
    "node",
    "kind",
  ],
  "operators": Array [
    "if()",
    "||",
    "===",
    ".",
    "===",
    ".",
    "()",
    ".",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.local.name !== node.exported.name) {
            this.operators.add("as")
        }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "local",
    "name",
    "node",
    "exported",
    "name",
    "this",
    "operators",
    "add",
    "\\"as\\"",
  ],
  "operators": Array [
    "if()",
    "!==",
    ".",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.local.name !== node.imported.name) {
            this.operators.add("as")
        }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "local",
    "name",
    "node",
    "imported",
    "name",
    "this",
    "operators",
    "add",
    "\\"as\\"",
  ],
  "operators": Array [
    "if()",
    "!==",
    ".",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.operator === "&") {
            return 8
        }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "operator",
    "\\"&\\"",
    "8",
  ],
  "operators": Array [
    "if()",
    "===",
    ".",
    "{}",
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.operator === "&&") {
            return 5
        }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "operator",
    "\\"&&\\"",
    "5",
  ],
  "operators": Array [
    "if()",
    "===",
    ".",
    "{}",
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.operator === "**") {
            return 14
        }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "operator",
    "\\"**\\"",
    "14",
  ],
  "operators": Array [
    "if()",
    "===",
    ".",
    "{}",
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.operator === "+" || node.operator === "-") {
            return 12
        }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "operator",
    "\\"+\\"",
    "node",
    "operator",
    "\\"-\\"",
    "12",
  ],
  "operators": Array [
    "if()",
    "||",
    "===",
    ".",
    "===",
    ".",
    "{}",
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.operator === "^") {
            return 7
        }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "operator",
    "\\"^\\"",
    "7",
  ],
  "operators": Array [
    "if()",
    "===",
    ".",
    "{}",
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.operator === "|") {
            return 6
        }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "operator",
    "\\"|\\"",
    "6",
  ],
  "operators": Array [
    "if()",
    "===",
    ".",
    "{}",
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.operator === "||" || node.operator === "??") {
            return 4
        }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "operator",
    "\\"||\\"",
    "node",
    "operator",
    "\\"??\\"",
    "4",
  ],
  "operators": Array [
    "if()",
    "||",
    "===",
    ".",
    "===",
    ".",
    "{}",
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.optional) {
            if (typeof node.optional === "string") {
                this.operators.add(node.optional)
            }
            this.operators.add("?")
        }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "optional",
    "node",
    "optional",
    "\\"string\\"",
    "this",
    "operators",
    "add",
    "node",
    "optional",
    "this",
    "operators",
    "add",
    "\\"?\\"",
  ],
  "operators": Array [
    "if()",
    ".",
    "{}",
    "if()",
    "===",
    "typeof",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.optional) {
            this.operators.add("?.")
            if (node.computed) {
                this.operators.add("[]")
            }
        } else if (node.computed) {
            this.operators.add("[]")
        } else {
            this.operators.add(".")
        }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "optional",
    "this",
    "operators",
    "add",
    "\\"?.\\"",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "this",
    "operators",
    "add",
    "\\".\\"",
  ],
  "operators": Array [
    "if()",
    "else",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "else",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.optional) {
            this.operators.add("?.")
        }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "optional",
    "this",
    "operators",
    "add",
    "\\"?.\\"",
  ],
  "operators": Array [
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.optional) this.operators.add("?")
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "optional",
    "this",
    "operators",
    "add",
    "\\"?\\"",
  ],
  "operators": Array [
    "if()",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.param) {
            this.operators.add("()")
        }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "param",
    "this",
    "operators",
    "add",
    "\\"()\\"",
  ],
  "operators": Array [
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.prefix) {
            return 15
        }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "prefix",
    "15",
  ],
  "operators": Array [
    "if()",
    ".",
    "{}",
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.qualifier) {
            this.operators.add(".")
        }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "qualifier",
    "this",
    "operators",
    "add",
    "\\".\\"",
  ],
  "operators": Array [
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.readonly) {
            if (typeof node.readonly === "string") {
                this.operators.add(node.readonly)
            }
            this.operators.add("readonly")
        }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "readonly",
    "node",
    "readonly",
    "\\"string\\"",
    "this",
    "operators",
    "add",
    "node",
    "readonly",
    "this",
    "operators",
    "add",
    "\\"readonly\\"",
  ],
  "operators": Array [
    "if()",
    ".",
    "{}",
    "if()",
    "===",
    "typeof",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.readonly) this.operators.add("readonly")
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "readonly",
    "this",
    "operators",
    "add",
    "\\"readonly\\"",
  ],
  "operators": Array [
    "if()",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.source) {
            this.operators.add("from")
        }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "source",
    "this",
    "operators",
    "add",
    "\\"from\\"",
  ],
  "operators": Array [
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.specifiers.length) {
            if (node.exportKind === "type") {
                this.operators.add("type")
            }
            this.operators.add("{}")
            this.operators.add(",", node.specifiers.length - 1)
        }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "specifiers",
    "length",
    "node",
    "exportKind",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "specifiers",
    "length",
    "1",
  ],
  "operators": Array [
    "if()",
    ".",
    ".",
    "{}",
    "if()",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.specifiers.length) {
            this.operators.add("from")
        }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "specifiers",
    "length",
    "this",
    "operators",
    "add",
    "\\"from\\"",
  ],
  "operators": Array [
    "if()",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.static) this.operators.add("static")
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "static",
    "this",
    "operators",
    "add",
    "\\"static\\"",
  ],
  "operators": Array [
    "if()",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.superClass) {
            this.operators.add("extends")
        }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "superClass",
    "this",
    "operators",
    "add",
    "\\"extends\\"",
  ],
  "operators": Array [
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.test) {
            this.operators.add("case")
        } else {
            this.operators.add("default")
        }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "test",
    "this",
    "operators",
    "add",
    "\\"case\\"",
    "this",
    "operators",
    "add",
    "\\"default\\"",
  ],
  "operators": Array [
    "if()",
    "else",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.type === AST_NODE_TYPES.ArrowFunctionExpression) {
        return 2
    }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "type",
    "AST_NODE_TYPES",
    "ArrowFunctionExpression",
    "2",
  ],
  "operators": Array [
    "if()",
    "===",
    ".",
    ".",
    "{}",
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.type === AST_NODE_TYPES.BinaryExpression) {
        if (node.operator === "|") {
            return 6
        }
        if (node.operator === "^") {
            return 7
        }
        if (node.operator === "&") {
            return 8
        }
        if (
            node.operator === "==" ||
            node.operator === "!=" ||
            node.operator === "===" ||
            node.operator === "!=="
        ) {
            return 9
        }
        if (
            node.operator === "<" ||
            node.operator === "<=" ||
            node.operator === ">" ||
            node.operator === ">=" ||
            node.operator === "in" ||
            node.operator === "instanceof"
        ) {
            return 10
        }
        if (
            node.operator === "<<" ||
            node.operator === ">>" ||
            node.operator === ">>>"
        ) {
            return 11
        }
        if (node.operator === "+" || node.operator === "-") {
            return 12
        }
        if (
            node.operator === "*" ||
            node.operator === "/" ||
            node.operator === "%"
        ) {
            return 13
        }
        if (node.operator === "**") {
            return 14
        }
        throw new Error(\`Unknown operator precedence:\${node.operator}\`)
    }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "type",
    "AST_NODE_TYPES",
    "BinaryExpression",
    "node",
    "operator",
    "\\"|\\"",
    "6",
    "node",
    "operator",
    "\\"^\\"",
    "7",
    "node",
    "operator",
    "\\"&\\"",
    "8",
    "node",
    "operator",
    "\\"==\\"",
    "node",
    "operator",
    "\\"!=\\"",
    "node",
    "operator",
    "\\"===\\"",
    "node",
    "operator",
    "\\"!==\\"",
    "9",
    "node",
    "operator",
    "\\"<\\"",
    "node",
    "operator",
    "\\"<=\\"",
    "node",
    "operator",
    "\\">\\"",
    "node",
    "operator",
    "\\">=\\"",
    "node",
    "operator",
    "\\"in\\"",
    "node",
    "operator",
    "\\"instanceof\\"",
    "10",
    "node",
    "operator",
    "\\"<<\\"",
    "node",
    "operator",
    "\\">>\\"",
    "node",
    "operator",
    "\\">>>\\"",
    "11",
    "node",
    "operator",
    "\\"+\\"",
    "node",
    "operator",
    "\\"-\\"",
    "12",
    "node",
    "operator",
    "\\"*\\"",
    "node",
    "operator",
    "\\"/\\"",
    "node",
    "operator",
    "\\"%\\"",
    "13",
    "node",
    "operator",
    "\\"**\\"",
    "14",
    "Error",
    "\`Unknown operator precedence:\${",
    "}\`",
    "node",
    "operator",
  ],
  "operators": Array [
    "if()",
    "===",
    ".",
    ".",
    "{}",
    "if()",
    "===",
    ".",
    "{}",
    "return",
    "if()",
    "===",
    ".",
    "{}",
    "return",
    "if()",
    "===",
    ".",
    "{}",
    "return",
    "if()",
    "||",
    "||",
    "||",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
    "{}",
    "return",
    "if()",
    "||",
    "||",
    "||",
    "||",
    "||",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
    "{}",
    "return",
    "if()",
    "||",
    "||",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
    "{}",
    "return",
    "if()",
    "||",
    "===",
    ".",
    "===",
    ".",
    "{}",
    "return",
    "if()",
    "||",
    "||",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
    "{}",
    "return",
    "if()",
    "===",
    ".",
    "{}",
    "return",
    "throw",
    "new",
    "()",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.type === AST_NODE_TYPES.ConditionalExpression) {
        return 3
    }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "type",
    "AST_NODE_TYPES",
    "ConditionalExpression",
    "3",
  ],
  "operators": Array [
    "if()",
    "===",
    ".",
    ".",
    "{}",
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.type === AST_NODE_TYPES.LogicalExpression) {
        if (node.operator === "||" || node.operator === "??") {
            return 4
        }
        if (node.operator === "&&") {
            return 5
        }
        throw new Error(\`Unknown operator precedence:\${node.operator}\`)
    }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "type",
    "AST_NODE_TYPES",
    "LogicalExpression",
    "node",
    "operator",
    "\\"||\\"",
    "node",
    "operator",
    "\\"??\\"",
    "4",
    "node",
    "operator",
    "\\"&&\\"",
    "5",
    "Error",
    "\`Unknown operator precedence:\${",
    "}\`",
    "node",
    "operator",
  ],
  "operators": Array [
    "if()",
    "===",
    ".",
    ".",
    "{}",
    "if()",
    "||",
    "===",
    ".",
    "===",
    ".",
    "{}",
    "return",
    "if()",
    "===",
    ".",
    "{}",
    "return",
    "throw",
    "new",
    "()",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.type === AST_NODE_TYPES.MemberExpression) {
        return 19
    }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "type",
    "AST_NODE_TYPES",
    "MemberExpression",
    "19",
  ],
  "operators": Array [
    "if()",
    "===",
    ".",
    ".",
    "{}",
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.type === AST_NODE_TYPES.SequenceExpression) {
        return 1
    }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "type",
    "AST_NODE_TYPES",
    "SequenceExpression",
    "1",
  ],
  "operators": Array [
    "if()",
    "===",
    ".",
    ".",
    "{}",
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.type === AST_NODE_TYPES.TSAsExpression) {
        return 14.5
    }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "type",
    "AST_NODE_TYPES",
    "TSAsExpression",
    "14.5",
  ],
  "operators": Array [
    "if()",
    "===",
    ".",
    ".",
    "{}",
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.type === AST_NODE_TYPES.UpdateExpression) {
        if (node.prefix) {
            return 15
        }
        return 16
    }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "type",
    "AST_NODE_TYPES",
    "UpdateExpression",
    "node",
    "prefix",
    "15",
    "16",
  ],
  "operators": Array [
    "if()",
    "===",
    ".",
    ".",
    "{}",
    "if()",
    ".",
    "{}",
    "return",
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (node.value) {
            this.operators.add("=")
        }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "value",
    "this",
    "operators",
    "add",
    "\\"=\\"",
  ],
  "operators": Array [
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (parent) {
            if (
                parent.type === AST_NODE_TYPES.Property &&
                parent.shorthand &&
                parent.value === node
            )
                return
            if (
                parent.type === AST_NODE_TYPES.ImportSpecifier &&
                parent.imported.name === node.name &&
                parent.local === node
            )
                return
            if (
                parent.type === AST_NODE_TYPES.ExportSpecifier &&
                parent.local.name === node.name &&
                parent.exported === node
            )
                return
        }
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "Property",
    "parent",
    "shorthand",
    "parent",
    "value",
    "node",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "ImportSpecifier",
    "parent",
    "imported",
    "name",
    "node",
    "name",
    "parent",
    "local",
    "node",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "ExportSpecifier",
    "parent",
    "local",
    "name",
    "node",
    "name",
    "parent",
    "exported",
    "node",
  ],
  "operators": Array [
    "if()",
    "{}",
    "if()",
    "&&",
    "&&",
    "===",
    ".",
    ".",
    ".",
    "===",
    ".",
    "return",
    "if()",
    "&&",
    "&&",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
    ".",
    "===",
    ".",
    "return",
    "if()",
    "&&",
    "&&",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
    ".",
    "===",
    ".",
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (parent) {
            if (
                parent.type === AST_NODE_TYPES.TSFunctionType &&
                    parent.returnType === node ||
                parent.type === AST_NODE_TYPES.TSConstructorType &&
                    parent.returnType === node
            ) {
                this.operators.add("=>")
                return
            }
            if (parent.type === AST_NODE_TYPES.TSTypePredicate) {
                return
            }
        }
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSFunctionType",
    "parent",
    "returnType",
    "node",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSConstructorType",
    "parent",
    "returnType",
    "node",
    "this",
    "operators",
    "add",
    "\\"=>\\"",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSTypePredicate",
  ],
  "operators": Array [
    "if()",
    "{}",
    "if()",
    "||",
    "&&",
    "===",
    ".",
    ".",
    "===",
    ".",
    "&&",
    "===",
    ".",
    ".",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "return",
    "if()",
    "===",
    ".",
    ".",
    "{}",
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (parent.type === AST_NODE_TYPES.TSTypePredicate) {
                return
            }
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSTypePredicate",
  ],
  "operators": Array [
    "if()",
    "===",
    ".",
    ".",
    "{}",
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (typeof node.optional === "string") {
                this.operators.add(node.optional)
            }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "optional",
    "\\"string\\"",
    "this",
    "operators",
    "add",
    "node",
    "optional",
  ],
  "operators": Array [
    "if()",
    "===",
    "typeof",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts IfStatement\`
if (typeof node.readonly === "string") {
                this.operators.add(node.readonly)
            }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "readonly",
    "\\"string\\"",
    "this",
    "operators",
    "add",
    "node",
    "readonly",
  ],
  "operators": Array [
    "if()",
    "===",
    "typeof",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ImportDeclaration\`
import { AST_NODE_TYPES } from "@typescript-eslint/types"
\` 1`] = `
Object {
  "operands": Array [
    "AST_NODE_TYPES",
    "\\"@typescript-eslint/types\\"",
  ],
  "operators": Array [
    "import",
    "{}",
    "from",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ImportDeclaration\`
import { walk } from "./walker"
\` 1`] = `
Object {
  "operands": Array [
    "walk",
    "\\"./walker\\"",
  ],
  "operators": Array [
    "import",
    "{}",
    "from",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ImportDeclaration\`
import type * as ESTree from "estree"
\` 1`] = `
Object {
  "operands": Array [
    "ESTree",
    "\\"estree\\"",
  ],
  "operators": Array [
    "import",
    "type",
    "from",
    "*",
    "as",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ImportDeclaration\`
import type { TSESTree } from "@typescript-eslint/types"
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "\\"@typescript-eslint/types\\"",
  ],
  "operators": Array [
    "import",
    "type",
    "{}",
    "from",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ImportDeclaration\`
import type { Visitor } from "./visitor"
\` 1`] = `
Object {
  "operands": Array [
    "Visitor",
    "\\"./visitor\\"",
  ],
  "operators": Array [
    "import",
    "type",
    "{}",
    "from",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ImportNamespaceSpecifier\`
* as ESTree
\` 1`] = `
Object {
  "operands": Array [
    "ESTree",
  ],
  "operators": Array [
    "*",
    "as",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ImportSpecifier\`
AST_NODE_TYPES
\` 1`] = `
Object {
  "operands": Array [
    "AST_NODE_TYPES",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ImportSpecifier\`
TSESTree
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ImportSpecifier\`
Visitor
\` 1`] = `
Object {
  "operands": Array [
    "Visitor",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ImportSpecifier\`
walk
\` 1`] = `
Object {
  "operands": Array [
    "walk",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
"!"
\` 1`] = `
Object {
  "operands": Array [
    "\\"!\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
"!="
\` 1`] = `
Object {
  "operands": Array [
    "\\"!=\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
"!=="
\` 1`] = `
Object {
  "operands": Array [
    "\\"!==\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
"\${"
\` 1`] = `
Object {
  "operands": Array [
    "\\"\${\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
"%"
\` 1`] = `
Object {
  "operands": Array [
    "\\"%\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
"&"
\` 1`] = `
Object {
  "operands": Array [
    "\\"&\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
"&&"
\` 1`] = `
Object {
  "operands": Array [
    "\\"&&\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
"*"
\` 1`] = `
Object {
  "operands": Array [
    "\\"*\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
"**"
\` 1`] = `
Object {
  "operands": Array [
    "\\"**\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
"+"
\` 1`] = `
Object {
  "operands": Array [
    "\\"+\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
"./visitor"
\` 1`] = `
Object {
  "operands": Array [
    "\\"./visitor\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
"./walker"
\` 1`] = `
Object {
  "operands": Array [
    "\\"./walker\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
"/"
\` 1`] = `
Object {
  "operands": Array [
    "\\"/\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
"<"
\` 1`] = `
Object {
  "operands": Array [
    "\\"<\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
"<<"
\` 1`] = `
Object {
  "operands": Array [
    "\\"<<\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
"<="
\` 1`] = `
Object {
  "operands": Array [
    "\\"<=\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
"="
\` 1`] = `
Object {
  "operands": Array [
    "\\"=\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
"=="
\` 1`] = `
Object {
  "operands": Array [
    "\\"==\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
"==="
\` 1`] = `
Object {
  "operands": Array [
    "\\"===\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
">"
\` 1`] = `
Object {
  "operands": Array [
    "\\">\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
">="
\` 1`] = `
Object {
  "operands": Array [
    "\\">=\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
">>"
\` 1`] = `
Object {
  "operands": Array [
    "\\">>\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
">>>"
\` 1`] = `
Object {
  "operands": Array [
    "\\">>>\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
"??"
\` 1`] = `
Object {
  "operands": Array [
    "\\"??\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
"@typescript-eslint/types"
\` 1`] = `
Object {
  "operands": Array [
    "\\"@typescript-eslint/types\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
"^"
\` 1`] = `
Object {
  "operands": Array [
    "\\"^\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
"\`"
\` 1`] = `
Object {
  "operands": Array [
    "\\"\`\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
"|"
\` 1`] = `
Object {
  "operands": Array [
    "\\"|\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
"||"
\` 1`] = `
Object {
  "operands": Array [
    "\\"||\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
"}"
\` 1`] = `
Object {
  "operands": Array [
    "\\"}\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
"-"
\` 1`] = `
Object {
  "operands": Array [
    "\\"-\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
"any"
\` 1`] = `
Object {
  "operands": Array [
    "\\"any\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
"bigint"
\` 1`] = `
Object {
  "operands": Array [
    "\\"bigint\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
"boolean"
\` 1`] = `
Object {
  "operands": Array [
    "\\"boolean\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
"const"
\` 1`] = `
Object {
  "operands": Array [
    "\\"const\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
"estree"
\` 1`] = `
Object {
  "operands": Array [
    "\\"estree\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
"in"
\` 1`] = `
Object {
  "operands": Array [
    "\\"in\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
"instanceof"
\` 1`] = `
Object {
  "operands": Array [
    "\\"instanceof\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
"intrinsic"
\` 1`] = `
Object {
  "operands": Array [
    "\\"intrinsic\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
"never"
\` 1`] = `
Object {
  "operands": Array [
    "\\"never\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
"null"
\` 1`] = `
Object {
  "operands": Array [
    "\\"null\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
"number"
\` 1`] = `
Object {
  "operands": Array [
    "\\"number\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
"object"
\` 1`] = `
Object {
  "operands": Array [
    "\\"object\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
"regex"
\` 1`] = `
Object {
  "operands": Array [
    "\\"regex\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
"require"
\` 1`] = `
Object {
  "operands": Array [
    "\\"require\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
"string"
\` 1`] = `
Object {
  "operands": Array [
    "\\"string\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
"super"
\` 1`] = `
Object {
  "operands": Array [
    "\\"super\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
"symbol"
\` 1`] = `
Object {
  "operands": Array [
    "\\"symbol\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
"this"
\` 1`] = `
Object {
  "operands": Array [
    "\\"this\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
"typeof"
\` 1`] = `
Object {
  "operands": Array [
    "\\"typeof\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
"undefined"
\` 1`] = `
Object {
  "operands": Array [
    "\\"undefined\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
"unknown"
\` 1`] = `
Object {
  "operands": Array [
    "\\"unknown\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
"void"
\` 1`] = `
Object {
  "operands": Array [
    "\\"void\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
0
\` 1`] = `
Object {
  "operands": Array [
    "0",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
1
\` 1`] = `
Object {
  "operands": Array [
    "1",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
2
\` 1`] = `
Object {
  "operands": Array [
    "2",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
3
\` 1`] = `
Object {
  "operands": Array [
    "3",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
4
\` 1`] = `
Object {
  "operands": Array [
    "4",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
5
\` 1`] = `
Object {
  "operands": Array [
    "5",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
6
\` 1`] = `
Object {
  "operands": Array [
    "6",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
7
\` 1`] = `
Object {
  "operands": Array [
    "7",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
8
\` 1`] = `
Object {
  "operands": Array [
    "8",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
9
\` 1`] = `
Object {
  "operands": Array [
    "9",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
10
\` 1`] = `
Object {
  "operands": Array [
    "10",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
11
\` 1`] = `
Object {
  "operands": Array [
    "11",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
12
\` 1`] = `
Object {
  "operands": Array [
    "12",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
13
\` 1`] = `
Object {
  "operands": Array [
    "13",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
14
\` 1`] = `
Object {
  "operands": Array [
    "14",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
14.5
\` 1`] = `
Object {
  "operands": Array [
    "14.5",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
15
\` 1`] = `
Object {
  "operands": Array [
    "15",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
16
\` 1`] = `
Object {
  "operands": Array [
    "16",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
18
\` 1`] = `
Object {
  "operands": Array [
    "18",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Literal\`
19
\` 1`] = `
Object {
  "operands": Array [
    "19",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts LogicalExpression\`
!node.shorthand && !node.method
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "shorthand",
    "node",
    "method",
  ],
  "operators": Array [
    "&&",
    "!",
    ".",
    "!",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts LogicalExpression\`
!parent ||
            parent.type !== AST_NODE_TYPES.MethodDefinition &&
                (parent.type !== AST_NODE_TYPES.Property || !parent.method) &&
                parent.type !== AST_NODE_TYPES.TSAbstractMethodDefinition
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "MethodDefinition",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "Property",
    "parent",
    "method",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSAbstractMethodDefinition",
  ],
  "operators": Array [
    "||",
    "!",
    "&&",
    "&&",
    "()",
    "!==",
    ".",
    ".",
    "||",
    "!==",
    ".",
    ".",
    "!",
    ".",
    "!==",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts LogicalExpression\`
"bigint" in node && node.bigint
\` 1`] = `
Object {
  "operands": Array [
    "\\"bigint\\"",
    "node",
    "node",
    "bigint",
  ],
  "operators": Array [
    "&&",
    "in",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts LogicalExpression\`
"regex" in node && node.regex
\` 1`] = `
Object {
  "operands": Array [
    "\\"regex\\"",
    "node",
    "node",
    "regex",
  ],
  "operators": Array [
    "&&",
    "in",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts LogicalExpression\`
extract &&
                Object.prototype.hasOwnProperty.call(EXTRACT_TOKENS, node.type)
\` 1`] = `
Object {
  "operands": Array [
    "extract",
    "Object",
    "prototype",
    "hasOwnProperty",
    "call",
    "EXTRACT_TOKENS",
    "node",
    "type",
  ],
  "operators": Array [
    "&&",
    "()",
    ",",
    ".",
    ".",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts LogicalExpression\`
node.argument &&
            getPrecedence(node) > getPrecedence(node.argument)
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "argument",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "argument",
  ],
  "operators": Array [
    "&&",
    ".",
    ">",
    "()",
    "()",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts LogicalExpression\`
node.assertions && node.assertions.length
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "assertions",
    "node",
    "assertions",
    "length",
  ],
  "operators": Array [
    "&&",
    ".",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts LogicalExpression\`
node.kind === "get" || node.kind === "set"
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "kind",
    "\\"get\\"",
    "node",
    "kind",
    "\\"set\\"",
  ],
  "operators": Array [
    "||",
    "===",
    ".",
    "===",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts LogicalExpression\`
node.operator === "*" ||
            node.operator === "/"
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "operator",
    "\\"*\\"",
    "node",
    "operator",
    "\\"/\\"",
  ],
  "operators": Array [
    "||",
    "===",
    ".",
    "===",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts LogicalExpression\`
node.operator === "*" ||
            node.operator === "/" ||
            node.operator === "%"
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "operator",
    "\\"*\\"",
    "node",
    "operator",
    "\\"/\\"",
    "node",
    "operator",
    "\\"%\\"",
  ],
  "operators": Array [
    "||",
    "||",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts LogicalExpression\`
node.operator === "+" || node.operator === "-"
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "operator",
    "\\"+\\"",
    "node",
    "operator",
    "\\"-\\"",
  ],
  "operators": Array [
    "||",
    "===",
    ".",
    "===",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts LogicalExpression\`
node.operator === "<" ||
            node.operator === "<="
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "operator",
    "\\"<\\"",
    "node",
    "operator",
    "\\"<=\\"",
  ],
  "operators": Array [
    "||",
    "===",
    ".",
    "===",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts LogicalExpression\`
node.operator === "<" ||
            node.operator === "<=" ||
            node.operator === ">"
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "operator",
    "\\"<\\"",
    "node",
    "operator",
    "\\"<=\\"",
    "node",
    "operator",
    "\\">\\"",
  ],
  "operators": Array [
    "||",
    "||",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts LogicalExpression\`
node.operator === "<" ||
            node.operator === "<=" ||
            node.operator === ">" ||
            node.operator === ">="
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "operator",
    "\\"<\\"",
    "node",
    "operator",
    "\\"<=\\"",
    "node",
    "operator",
    "\\">\\"",
    "node",
    "operator",
    "\\">=\\"",
  ],
  "operators": Array [
    "||",
    "||",
    "||",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts LogicalExpression\`
node.operator === "<" ||
            node.operator === "<=" ||
            node.operator === ">" ||
            node.operator === ">=" ||
            node.operator === "in"
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "operator",
    "\\"<\\"",
    "node",
    "operator",
    "\\"<=\\"",
    "node",
    "operator",
    "\\">\\"",
    "node",
    "operator",
    "\\">=\\"",
    "node",
    "operator",
    "\\"in\\"",
  ],
  "operators": Array [
    "||",
    "||",
    "||",
    "||",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts LogicalExpression\`
node.operator === "<" ||
            node.operator === "<=" ||
            node.operator === ">" ||
            node.operator === ">=" ||
            node.operator === "in" ||
            node.operator === "instanceof"
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "operator",
    "\\"<\\"",
    "node",
    "operator",
    "\\"<=\\"",
    "node",
    "operator",
    "\\">\\"",
    "node",
    "operator",
    "\\">=\\"",
    "node",
    "operator",
    "\\"in\\"",
    "node",
    "operator",
    "\\"instanceof\\"",
  ],
  "operators": Array [
    "||",
    "||",
    "||",
    "||",
    "||",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts LogicalExpression\`
node.operator === "<<" ||
            node.operator === ">>"
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "operator",
    "\\"<<\\"",
    "node",
    "operator",
    "\\">>\\"",
  ],
  "operators": Array [
    "||",
    "===",
    ".",
    "===",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts LogicalExpression\`
node.operator === "<<" ||
            node.operator === ">>" ||
            node.operator === ">>>"
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "operator",
    "\\"<<\\"",
    "node",
    "operator",
    "\\">>\\"",
    "node",
    "operator",
    "\\">>>\\"",
  ],
  "operators": Array [
    "||",
    "||",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts LogicalExpression\`
node.operator === "==" ||
            node.operator === "!="
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "operator",
    "\\"==\\"",
    "node",
    "operator",
    "\\"!=\\"",
  ],
  "operators": Array [
    "||",
    "===",
    ".",
    "===",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts LogicalExpression\`
node.operator === "==" ||
            node.operator === "!=" ||
            node.operator === "==="
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "operator",
    "\\"==\\"",
    "node",
    "operator",
    "\\"!=\\"",
    "node",
    "operator",
    "\\"===\\"",
  ],
  "operators": Array [
    "||",
    "||",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts LogicalExpression\`
node.operator === "==" ||
            node.operator === "!=" ||
            node.operator === "===" ||
            node.operator === "!=="
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "operator",
    "\\"==\\"",
    "node",
    "operator",
    "\\"!=\\"",
    "node",
    "operator",
    "\\"===\\"",
    "node",
    "operator",
    "\\"!==\\"",
  ],
  "operators": Array [
    "||",
    "||",
    "||",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts LogicalExpression\`
node.operator === "||" || node.operator === "??"
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "operator",
    "\\"||\\"",
    "node",
    "operator",
    "\\"??\\"",
  ],
  "operators": Array [
    "||",
    "===",
    ".",
    "===",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts LogicalExpression\`
node.params.length !== 1 ||
            node.params[0].type !== AST_NODE_TYPES.Identifier
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "params",
    "length",
    "1",
    "node",
    "params",
    "0",
    "type",
    "AST_NODE_TYPES",
    "Identifier",
  ],
  "operators": Array [
    "||",
    "!==",
    ".",
    ".",
    "!==",
    ".",
    "[]",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts LogicalExpression\`
node.params.length !== 1 ||
            node.params[0].type !== AST_NODE_TYPES.Identifier ||
            node.params[0].typeAnnotation
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "params",
    "length",
    "1",
    "node",
    "params",
    "0",
    "type",
    "AST_NODE_TYPES",
    "Identifier",
    "node",
    "params",
    "0",
    "typeAnnotation",
  ],
  "operators": Array [
    "||",
    "||",
    "!==",
    ".",
    ".",
    "!==",
    ".",
    "[]",
    ".",
    ".",
    ".",
    "[]",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts LogicalExpression\`
node.type === AST_NODE_TYPES.NewExpression ||
        node.type === AST_NODE_TYPES.CallExpression
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "type",
    "AST_NODE_TYPES",
    "NewExpression",
    "node",
    "type",
    "AST_NODE_TYPES",
    "CallExpression",
  ],
  "operators": Array [
    "||",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts LogicalExpression\`
node.type === AST_NODE_TYPES.NewExpression ||
        node.type === AST_NODE_TYPES.CallExpression ||
        node.type === AST_NODE_TYPES.ImportExpression
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "type",
    "AST_NODE_TYPES",
    "NewExpression",
    "node",
    "type",
    "AST_NODE_TYPES",
    "CallExpression",
    "node",
    "type",
    "AST_NODE_TYPES",
    "ImportExpression",
  ],
  "operators": Array [
    "||",
    "||",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts LogicalExpression\`
node.type === AST_NODE_TYPES.NewExpression ||
        node.type === AST_NODE_TYPES.CallExpression ||
        node.type === AST_NODE_TYPES.ImportExpression ||
        node.type === AST_NODE_TYPES.ChainExpression
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "type",
    "AST_NODE_TYPES",
    "NewExpression",
    "node",
    "type",
    "AST_NODE_TYPES",
    "CallExpression",
    "node",
    "type",
    "AST_NODE_TYPES",
    "ImportExpression",
    "node",
    "type",
    "AST_NODE_TYPES",
    "ChainExpression",
  ],
  "operators": Array [
    "||",
    "||",
    "||",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts LogicalExpression\`
node.type === AST_NODE_TYPES.UnaryExpression ||
        node.type === AST_NODE_TYPES.AwaitExpression
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "type",
    "AST_NODE_TYPES",
    "UnaryExpression",
    "node",
    "type",
    "AST_NODE_TYPES",
    "AwaitExpression",
  ],
  "operators": Array [
    "||",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts LogicalExpression\`
node.type === AST_NODE_TYPES.YieldExpression ||
        node.type === AST_NODE_TYPES.AssignmentExpression
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "type",
    "AST_NODE_TYPES",
    "YieldExpression",
    "node",
    "type",
    "AST_NODE_TYPES",
    "AssignmentExpression",
  ],
  "operators": Array [
    "||",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts LogicalExpression\`
parent &&
                parent.type === AST_NODE_TYPES.TSMappedType
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSMappedType",
  ],
  "operators": Array [
    "&&",
    "===",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts LogicalExpression\`
parent &&
                parent.type === AST_NODE_TYPES.TSMappedType &&
                parent.typeParameter === node
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSMappedType",
    "parent",
    "typeParameter",
    "node",
  ],
  "operators": Array [
    "&&",
    "&&",
    "===",
    ".",
    ".",
    "===",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts LogicalExpression\`
parent &&
            (parent.type === AST_NODE_TYPES.TemplateLiteral ||
                parent.type === AST_NODE_TYPES.TSTemplateLiteralType)
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TemplateLiteral",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSTemplateLiteralType",
  ],
  "operators": Array [
    "&&",
    "()",
    "||",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts LogicalExpression\`
parent.type !== AST_NODE_TYPES.MethodDefinition &&
                (parent.type !== AST_NODE_TYPES.Property || !parent.method)
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "type",
    "AST_NODE_TYPES",
    "MethodDefinition",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "Property",
    "parent",
    "method",
  ],
  "operators": Array [
    "&&",
    "()",
    "!==",
    ".",
    ".",
    "||",
    "!==",
    ".",
    ".",
    "!",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts LogicalExpression\`
parent.type !== AST_NODE_TYPES.MethodDefinition &&
                (parent.type !== AST_NODE_TYPES.Property || !parent.method) &&
                parent.type !== AST_NODE_TYPES.TSAbstractMethodDefinition
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "type",
    "AST_NODE_TYPES",
    "MethodDefinition",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "Property",
    "parent",
    "method",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSAbstractMethodDefinition",
  ],
  "operators": Array [
    "&&",
    "&&",
    "()",
    "!==",
    ".",
    ".",
    "||",
    "!==",
    ".",
    ".",
    "!",
    ".",
    "!==",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts LogicalExpression\`
parent.type !== AST_NODE_TYPES.Property || !parent.method
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "type",
    "AST_NODE_TYPES",
    "Property",
    "parent",
    "method",
  ],
  "operators": Array [
    "||",
    "!==",
    ".",
    ".",
    "!",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts LogicalExpression\`
parent.type === AST_NODE_TYPES.ExportSpecifier &&
                parent.local.name === node.name
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "type",
    "AST_NODE_TYPES",
    "ExportSpecifier",
    "parent",
    "local",
    "name",
    "node",
    "name",
  ],
  "operators": Array [
    "&&",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts LogicalExpression\`
parent.type === AST_NODE_TYPES.ExportSpecifier &&
                parent.local.name === node.name &&
                parent.exported === node
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "type",
    "AST_NODE_TYPES",
    "ExportSpecifier",
    "parent",
    "local",
    "name",
    "node",
    "name",
    "parent",
    "exported",
    "node",
  ],
  "operators": Array [
    "&&",
    "&&",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
    ".",
    "===",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts LogicalExpression\`
parent.type === AST_NODE_TYPES.ImportSpecifier &&
                parent.imported.name === node.name
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "type",
    "AST_NODE_TYPES",
    "ImportSpecifier",
    "parent",
    "imported",
    "name",
    "node",
    "name",
  ],
  "operators": Array [
    "&&",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts LogicalExpression\`
parent.type === AST_NODE_TYPES.ImportSpecifier &&
                parent.imported.name === node.name &&
                parent.local === node
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "type",
    "AST_NODE_TYPES",
    "ImportSpecifier",
    "parent",
    "imported",
    "name",
    "node",
    "name",
    "parent",
    "local",
    "node",
  ],
  "operators": Array [
    "&&",
    "&&",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
    ".",
    "===",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts LogicalExpression\`
parent.type === AST_NODE_TYPES.Property &&
                parent.shorthand
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "type",
    "AST_NODE_TYPES",
    "Property",
    "parent",
    "shorthand",
  ],
  "operators": Array [
    "&&",
    "===",
    ".",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts LogicalExpression\`
parent.type === AST_NODE_TYPES.Property &&
                parent.shorthand &&
                parent.value === node
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "type",
    "AST_NODE_TYPES",
    "Property",
    "parent",
    "shorthand",
    "parent",
    "value",
    "node",
  ],
  "operators": Array [
    "&&",
    "&&",
    "===",
    ".",
    ".",
    ".",
    "===",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts LogicalExpression\`
parent.type === AST_NODE_TYPES.TSConstructorType &&
                    parent.returnType === node
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSConstructorType",
    "parent",
    "returnType",
    "node",
  ],
  "operators": Array [
    "&&",
    "===",
    ".",
    ".",
    "===",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts LogicalExpression\`
parent.type === AST_NODE_TYPES.TSFunctionType &&
                    parent.returnType === node
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSFunctionType",
    "parent",
    "returnType",
    "node",
  ],
  "operators": Array [
    "&&",
    "===",
    ".",
    ".",
    "===",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts LogicalExpression\`
parent.type === AST_NODE_TYPES.TSFunctionType &&
                    parent.returnType === node ||
                parent.type === AST_NODE_TYPES.TSConstructorType &&
                    parent.returnType === node
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSFunctionType",
    "parent",
    "returnType",
    "node",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSConstructorType",
    "parent",
    "returnType",
    "node",
  ],
  "operators": Array [
    "||",
    "&&",
    "===",
    ".",
    ".",
    "===",
    ".",
    "&&",
    "===",
    ".",
    ".",
    "===",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts LogicalExpression\`
parent.type === AST_NODE_TYPES.TemplateLiteral ||
                parent.type === AST_NODE_TYPES.TSTemplateLiteralType
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TemplateLiteral",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSTemplateLiteralType",
  ],
  "operators": Array [
    "||",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
AST_NODE_TYPES.ArrowFunctionExpression
\` 1`] = `
Object {
  "operands": Array [
    "AST_NODE_TYPES",
    "ArrowFunctionExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
AST_NODE_TYPES.AssignmentExpression
\` 1`] = `
Object {
  "operands": Array [
    "AST_NODE_TYPES",
    "AssignmentExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
AST_NODE_TYPES.AwaitExpression
\` 1`] = `
Object {
  "operands": Array [
    "AST_NODE_TYPES",
    "AwaitExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
AST_NODE_TYPES.BinaryExpression
\` 1`] = `
Object {
  "operands": Array [
    "AST_NODE_TYPES",
    "BinaryExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
AST_NODE_TYPES.CallExpression
\` 1`] = `
Object {
  "operands": Array [
    "AST_NODE_TYPES",
    "CallExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
AST_NODE_TYPES.ChainExpression
\` 1`] = `
Object {
  "operands": Array [
    "AST_NODE_TYPES",
    "ChainExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
AST_NODE_TYPES.ConditionalExpression
\` 1`] = `
Object {
  "operands": Array [
    "AST_NODE_TYPES",
    "ConditionalExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
AST_NODE_TYPES.ExportSpecifier
\` 1`] = `
Object {
  "operands": Array [
    "AST_NODE_TYPES",
    "ExportSpecifier",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
AST_NODE_TYPES.Identifier
\` 1`] = `
Object {
  "operands": Array [
    "AST_NODE_TYPES",
    "Identifier",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
AST_NODE_TYPES.ImportExpression
\` 1`] = `
Object {
  "operands": Array [
    "AST_NODE_TYPES",
    "ImportExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
AST_NODE_TYPES.ImportSpecifier
\` 1`] = `
Object {
  "operands": Array [
    "AST_NODE_TYPES",
    "ImportSpecifier",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
AST_NODE_TYPES.LogicalExpression
\` 1`] = `
Object {
  "operands": Array [
    "AST_NODE_TYPES",
    "LogicalExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
AST_NODE_TYPES.MemberExpression
\` 1`] = `
Object {
  "operands": Array [
    "AST_NODE_TYPES",
    "MemberExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
AST_NODE_TYPES.MethodDefinition
\` 1`] = `
Object {
  "operands": Array [
    "AST_NODE_TYPES",
    "MethodDefinition",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
AST_NODE_TYPES.NewExpression
\` 1`] = `
Object {
  "operands": Array [
    "AST_NODE_TYPES",
    "NewExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
AST_NODE_TYPES.ObjectExpression
\` 1`] = `
Object {
  "operands": Array [
    "AST_NODE_TYPES",
    "ObjectExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
AST_NODE_TYPES.Property
\` 1`] = `
Object {
  "operands": Array [
    "AST_NODE_TYPES",
    "Property",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
AST_NODE_TYPES.SequenceExpression
\` 1`] = `
Object {
  "operands": Array [
    "AST_NODE_TYPES",
    "SequenceExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
AST_NODE_TYPES.TSAbstractMethodDefinition
\` 1`] = `
Object {
  "operands": Array [
    "AST_NODE_TYPES",
    "TSAbstractMethodDefinition",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
AST_NODE_TYPES.TSAsExpression
\` 1`] = `
Object {
  "operands": Array [
    "AST_NODE_TYPES",
    "TSAsExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
AST_NODE_TYPES.TSConstructorType
\` 1`] = `
Object {
  "operands": Array [
    "AST_NODE_TYPES",
    "TSConstructorType",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
AST_NODE_TYPES.TSFunctionType
\` 1`] = `
Object {
  "operands": Array [
    "AST_NODE_TYPES",
    "TSFunctionType",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
AST_NODE_TYPES.TSMappedType
\` 1`] = `
Object {
  "operands": Array [
    "AST_NODE_TYPES",
    "TSMappedType",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
AST_NODE_TYPES.TSTemplateLiteralType
\` 1`] = `
Object {
  "operands": Array [
    "AST_NODE_TYPES",
    "TSTemplateLiteralType",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
AST_NODE_TYPES.TSTypePredicate
\` 1`] = `
Object {
  "operands": Array [
    "AST_NODE_TYPES",
    "TSTypePredicate",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
AST_NODE_TYPES.TemplateLiteral
\` 1`] = `
Object {
  "operands": Array [
    "AST_NODE_TYPES",
    "TemplateLiteral",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
AST_NODE_TYPES.UnaryExpression
\` 1`] = `
Object {
  "operands": Array [
    "AST_NODE_TYPES",
    "UnaryExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
AST_NODE_TYPES.UpdateExpression
\` 1`] = `
Object {
  "operands": Array [
    "AST_NODE_TYPES",
    "UpdateExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
AST_NODE_TYPES.YieldExpression
\` 1`] = `
Object {
  "operands": Array [
    "AST_NODE_TYPES",
    "YieldExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
EXTRACT_TOKENS[node.type]
\` 1`] = `
Object {
  "operands": Array [
    "EXTRACT_TOKENS",
    "node",
    "type",
  ],
  "operators": Array [
    "[]",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
JSON.stringify
\` 1`] = `
Object {
  "operands": Array [
    "JSON",
    "stringify",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
Object.prototype
\` 1`] = `
Object {
  "operands": Array [
    "Object",
    "prototype",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
Object.prototype.hasOwnProperty
\` 1`] = `
Object {
  "operands": Array [
    "Object",
    "prototype",
    "hasOwnProperty",
  ],
  "operators": Array [
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
Object.prototype.hasOwnProperty.call
\` 1`] = `
Object {
  "operands": Array [
    "Object",
    "prototype",
    "hasOwnProperty",
    "call",
  ],
  "operators": Array [
    ".",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
extract.call
\` 1`] = `
Object {
  "operands": Array [
    "extract",
    "call",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.abstract
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "abstract",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.accessibility
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "accessibility",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.alternate
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "alternate",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.argument
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "argument",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.arguments
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "arguments",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.arguments.length
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "arguments",
    "length",
  ],
  "operators": Array [
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.assertions
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "assertions",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.assertions.length
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "assertions",
    "length",
  ],
  "operators": Array [
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.async
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "async",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.attributes
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "attributes",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.bigint
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "bigint",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.body
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "body",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.body.type
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "body",
    "type",
  ],
  "operators": Array [
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.callee
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "callee",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.computed
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "computed",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.const
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "const",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.constraint
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "constraint",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.declarations
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "declarations",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.declarations.length
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "declarations",
    "length",
  ],
  "operators": Array [
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.declare
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "declare",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.default
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "default",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.delegate
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "delegate",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.elementTypes
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "elementTypes",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.elementTypes.length
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "elementTypes",
    "length",
  ],
  "operators": Array [
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.elements
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "elements",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.elements.length
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "elements",
    "length",
  ],
  "operators": Array [
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.export
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "export",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.exportKind
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "exportKind",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.exported
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "exported",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.exported.name
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "exported",
    "name",
  ],
  "operators": Array [
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.expressions
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "expressions",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.expressions.length
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "expressions",
    "length",
  ],
  "operators": Array [
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.extends
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "extends",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.extends.length
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "extends",
    "length",
  ],
  "operators": Array [
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.finalizer
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "finalizer",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.generator
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "generator",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.global
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "global",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.implements
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "implements",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.implements.length
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "implements",
    "length",
  ],
  "operators": Array [
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.importKind
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "importKind",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.imported
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "imported",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.imported.name
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "imported",
    "name",
  ],
  "operators": Array [
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.init
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "init",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.initializer
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "initializer",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.kind
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "kind",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.local
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "local",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.local.name
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "local",
    "name",
  ],
  "operators": Array [
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.members
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "members",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.members.length
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "members",
    "length",
  ],
  "operators": Array [
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.method
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "method",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.name
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "name",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.object
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "object",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.operator
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "operator",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.optional
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "optional",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.param
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "param",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.params
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "params",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.params.length
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "params",
    "length",
  ],
  "operators": Array [
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.params[0]
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "params",
    "0",
  ],
  "operators": Array [
    "[]",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.params[0].type
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "params",
    "0",
    "type",
  ],
  "operators": Array [
    ".",
    "[]",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.params[0].typeAnnotation
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "params",
    "0",
    "typeAnnotation",
  ],
  "operators": Array [
    ".",
    "[]",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.prefix
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "prefix",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.properties
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "properties",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.properties.length
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "properties",
    "length",
  ],
  "operators": Array [
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.qualifier
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "qualifier",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.readonly
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "readonly",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.regex
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "regex",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.regex.flags
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "regex",
    "flags",
  ],
  "operators": Array [
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.regex.pattern
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "regex",
    "pattern",
  ],
  "operators": Array [
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.right
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "right",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.shorthand
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "shorthand",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.source
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "source",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.specifiers
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "specifiers",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.specifiers.length
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "specifiers",
    "length",
  ],
  "operators": Array [
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.specifiers.some
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "specifiers",
    "some",
  ],
  "operators": Array [
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.static
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "static",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.superClass
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "superClass",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.test
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "test",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.type
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "type",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.types
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "types",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.types.length
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "types",
    "length",
  ],
  "operators": Array [
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.value
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "value",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
node.value.cooked
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "value",
    "cooked",
  ],
  "operators": Array [
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
parent.exported
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "exported",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
parent.imported
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "imported",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
parent.imported.name
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "imported",
    "name",
  ],
  "operators": Array [
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
parent.local
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "local",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
parent.local.name
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "local",
    "name",
  ],
  "operators": Array [
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
parent.method
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "method",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
parent.quasis
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "quasis",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
parent.quasis.indexOf
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "quasis",
    "indexOf",
  ],
  "operators": Array [
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
parent.quasis.length
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "quasis",
    "length",
  ],
  "operators": Array [
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
parent.returnType
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "returnType",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
parent.shorthand
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "shorthand",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
parent.type
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "type",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
parent.typeParameter
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "typeParameter",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
parent.value
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "value",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
spec.type
\` 1`] = `
Object {
  "operands": Array [
    "spec",
    "type",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
this.distinct
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "distinct",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
this.distinct.add
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "distinct",
    "add",
  ],
  "operators": Array [
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
this.distinct.size
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "distinct",
    "size",
  ],
  "operators": Array [
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
this.operands
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operands",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
this.operands.add
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operands",
    "add",
  ],
  "operators": Array [
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
this.operators
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
this.operators.add
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "operators",
    "add",
  ],
  "operators": Array [
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
this.total
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "total",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
this.total.length
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "total",
    "length",
  ],
  "operators": Array [
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MemberExpression\`
this.total.push
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "total",
    "push",
  ],
  "operators": Array [
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MethodDefinition\`
public add(e: T, count = 1): void {
        if (count === 1) {
            this.total.push(e)
            this.distinct.add(e)
        } else {
            for (let index = 0; index < count; index++) {
                this.total.push(e)
                this.distinct.add(e)
            }
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "add",
    "e",
    "T",
    "count",
    "1",
    "void",
    "count",
    "1",
    "this",
    "total",
    "push",
    "e",
    "this",
    "distinct",
    "add",
    "e",
    "index",
    "0",
    "index",
    "count",
    "index",
    "this",
    "total",
    "push",
    "e",
    "this",
    "distinct",
    "add",
    "e",
  ],
  "operators": Array [
    "public",
    "()",
    ",",
    ":",
    "=",
    ":",
    "{}",
    "if()",
    "else",
    "===",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "{}",
    "for()",
    ";",
    ";",
    "let",
    "=",
    "<",
    "++",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MethodDefinition\`
public get all(): T[] {
        return this.total
    }
\` 1`] = `
Object {
  "operands": Array [
    "all",
    "T",
    "this",
    "total",
  ],
  "operators": Array [
    "public",
    "get",
    "()",
    ":",
    "[]",
    "{}",
    "return",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MethodDefinition\`
public get distinctSize(): number {
        return this.distinct.size
    }
\` 1`] = `
Object {
  "operands": Array [
    "distinctSize",
    "number",
    "this",
    "distinct",
    "size",
  ],
  "operators": Array [
    "public",
    "get",
    "()",
    ":",
    "{}",
    "return",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts MethodDefinition\`
public get totalSize(): number {
        return this.total.length
    }
\` 1`] = `
Object {
  "operands": Array [
    "totalSize",
    "number",
    "this",
    "total",
    "length",
  ],
  "operators": Array [
    "public",
    "get",
    "()",
    ":",
    "{}",
    "return",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts NewExpression\`
new Error(\`Unknown operator precedence:\${node.operator}\`)
\` 1`] = `
Object {
  "operands": Array [
    "Error",
    "\`Unknown operator precedence:\${",
    "}\`",
    "node",
    "operator",
  ],
  "operators": Array [
    "new",
    "()",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts NewExpression\`
new ExtractTokensContext()
\` 1`] = `
Object {
  "operands": Array [
    "ExtractTokensContext",
  ],
  "operators": Array [
    "new",
    "()",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts NewExpression\`
new Set<T>()
\` 1`] = `
Object {
  "operands": Array [
    "Set",
    "T",
  ],
  "operators": Array [
    "new",
    "()",
    "<>",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts NewExpression\`
new TokensCollection<Operator>()
\` 1`] = `
Object {
  "operands": Array [
    "TokensCollection",
    "Operator",
  ],
  "operators": Array [
    "new",
    "()",
    "<>",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts NewExpression\`
new TokensCollection<string>()
\` 1`] = `
Object {
  "operands": Array [
    "TokensCollection",
    "string",
  ],
  "operators": Array [
    "new",
    "()",
    "<>",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ObjectExpression\`
{
    ArrayExpression(
        this: ExtractTokensContext,
        node: TSESTree.ArrayExpression,
    ) {
        this.operators.add("[]")
        this.operators.add(",", node.elements.length - 1)
    },
    ArrayPattern(this: ExtractTokensContext, node: TSESTree.ArrayPattern) {
        this.operators.add("[]")
        this.operators.add(",", node.elements.length - 1)
    },
    ArrowFunctionExpression(
        this: ExtractTokensContext,
        node: TSESTree.ArrowFunctionExpression,
    ) {
        if (node.async) {
            this.operators.add("async")
        }
        if (node.generator) {
            // It cannot actually be used.
            this.operators.add("*")
        }
        if (
            node.params.length !== 1 ||
            node.params[0].type !== AST_NODE_TYPES.Identifier ||
            node.params[0].typeAnnotation
        ) {
            this.operators.add("()")
        }
        this.operators.add(",", node.params.length - 1)

        this.operators.add("=>")

        if (node.body.type === AST_NODE_TYPES.ObjectExpression) {
            this.operators.add("()")
        }
    },
    AssignmentExpression(
        this: ExtractTokensContext,
        node: TSESTree.AssignmentExpression,
    ) {
        this.operators.add(node.operator)

        if (getPrecedence(node) >= getPrecedence(node.right)) {
            this.operators.add("()")
        }
    },
    AssignmentPattern(
        this: ExtractTokensContext,
        _node: TSESTree.AssignmentPattern,
    ) {
        this.operators.add("=")
    },
    AwaitExpression(
        this: ExtractTokensContext,
        node: TSESTree.AwaitExpression,
    ) {
        this.operators.add("await")

        if (getPrecedence(node) > getPrecedence(node.argument)) {
            this.operators.add("()")
        }
    },
    BinaryExpression(
        this: ExtractTokensContext,
        node: TSESTree.BinaryExpression,
    ) {
        this.operators.add(node.operator as ESTree.BinaryExpression["operator"])

        if (getPrecedence(node) >= getPrecedence(node.right)) {
            this.operators.add("()")
        }
    },
    BlockStatement(this: ExtractTokensContext) {
        this.operators.add("{}")
    },
    BreakStatement(this: ExtractTokensContext) {
        this.operators.add("break")
    },
    CallExpression(this: ExtractTokensContext, node: TSESTree.CallExpression) {
        if (node.optional) {
            this.operators.add("?.")
        }
        this.operators.add("()")
        this.operators.add(",", node.arguments.length - 1)
    },
    CatchClause(this: ExtractTokensContext, node: TSESTree.CatchClause) {
        this.operators.add("catch")
        if (node.param) {
            this.operators.add("()")
        }
    },
    ChainExpression: noop,
    ClassBody(this: ExtractTokensContext) {
        this.operators.add("{}")
    },
    ClassDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.ClassDeclaration,
    ) {
        this.operators.add("class")
        if (node.superClass) {
            this.operators.add("extends")
        }
        if (node.implements) {
            this.operators.add("implements")
            this.operators.add(",", node.implements.length - 1)
        }
        if (node.abstract) {
            this.operators.add("abstract")
        }
        if (node.declare) this.operators.add("declare")
    },
    ClassExpression(
        this: ExtractTokensContext,
        node: TSESTree.ClassExpression,
    ) {
        this.operators.add("class")
        if (node.superClass) {
            this.operators.add("extends")
        }
        if (node.implements) {
            this.operators.add("implements")
        }
        if (node.abstract) {
            this.operators.add("abstract")
        }
        if (node.declare) this.operators.add("declare")
    },
    ConditionalExpression(
        this: ExtractTokensContext,
        node: TSESTree.ConditionalExpression,
    ) {
        if (getPrecedence(node) >= getPrecedence(node.test)) {
            this.operators.add("()")
        }
        this.operators.add("?:")
    },
    ContinueStatement(this: ExtractTokensContext) {
        this.operators.add("continue")
    },
    DebuggerStatement(this: ExtractTokensContext) {
        this.operators.add("debugger")
    },
    Decorator(this: ExtractTokensContext) {
        this.operators.add("@")
    },
    DoWhileStatement(this: ExtractTokensContext) {
        this.operators.add("do")
        this.operators.add("while()")
    },
    EmptyStatement(this: ExtractTokensContext) {
        this.operators.add(";")
    },
    ExportAllDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.ExportAllDeclaration,
    ) {
        this.operators.add("export")
        if (node.exportKind === "type") {
            this.operators.add("type")
        }
        this.operators.add("*")
        if (node.exported) {
            this.operators.add("as")
        }
        if (node.source) {
            this.operators.add("from")
        }
        if (node.assertions && node.assertions.length) {
            this.operators.add("assert")
            this.operators.add("{}")
        }
    },
    ExportDefaultDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.ExportDefaultDeclaration,
    ) {
        this.operators.add("export")
        if (node.exportKind === "type") {
            this.operators.add("type")
        }
        this.operators.add("default")
    },
    ExportNamedDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.ExportNamedDeclaration,
    ) {
        this.operators.add("export")
        if (node.specifiers.length) {
            if (node.exportKind === "type") {
                this.operators.add("type")
            }
            this.operators.add("{}")
            this.operators.add(",", node.specifiers.length - 1)
        }
        if (node.source) {
            this.operators.add("from")
        }
        if (node.assertions && node.assertions.length) {
            this.operators.add("assert")
            this.operators.add("{}")
        }
    },
    ExportSpecifier(
        this: ExtractTokensContext,
        node: TSESTree.ExportSpecifier,
    ) {
        if (node.exportKind === "type") {
            this.operators.add("type")
        }
        if (node.local.name !== node.exported.name) {
            this.operators.add("as")
        }
    },
    ExpressionStatement: noop,
    ForInStatement(this: ExtractTokensContext) {
        this.operators.add("for()")
        this.operators.add("in")
    },
    ForOfStatement(this: ExtractTokensContext) {
        this.operators.add("for()")
        this.operators.add("of")
    },
    ForStatement(this: ExtractTokensContext) {
        this.operators.add("for()")
        this.operators.add(";", 2)
    },
    FunctionDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.FunctionDeclaration,
    ) {
        if (node.async) {
            this.operators.add("async")
        }
        this.operators.add("function")
        if (node.generator) {
            this.operators.add("*")
        }
        this.operators.add("()")
        this.operators.add(",", node.params.length - 1)

        if (node.declare) this.operators.add("declare")
    },
    FunctionExpression(
        this: ExtractTokensContext,
        node: TSESTree.FunctionExpression,
        parent: TSESTree.Node | null,
    ) {
        if (node.async) {
            this.operators.add("async")
        }

        if (
            !parent ||
            parent.type !== AST_NODE_TYPES.MethodDefinition &&
                (parent.type !== AST_NODE_TYPES.Property || !parent.method) &&
                parent.type !== AST_NODE_TYPES.TSAbstractMethodDefinition
        ) {
            this.operators.add("function")
        }

        if (node.generator) {
            this.operators.add("*")
        }
        this.operators.add("()")
        this.operators.add(",", node.params.length - 1)

        if (node.declare) this.operators.add("declare")
    },
    Identifier(
        this: ExtractTokensContext,
        node: TSESTree.Identifier,
        parent: TSESTree.Node | null,
    ) {
        if (parent) {
            if (
                parent.type === AST_NODE_TYPES.Property &&
                parent.shorthand &&
                parent.value === node
            )
                return
            if (
                parent.type === AST_NODE_TYPES.ImportSpecifier &&
                parent.imported.name === node.name &&
                parent.local === node
            )
                return
            if (
                parent.type === AST_NODE_TYPES.ExportSpecifier &&
                parent.local.name === node.name &&
                parent.exported === node
            )
                return
        }
        this.operands.add(node.name)
    },
    IfStatement(this: ExtractTokensContext, node: TSESTree.IfStatement) {
        this.operators.add("if()")
        if (node.alternate) {
            this.operators.add("else")
        }
    },
    ImportAttribute(this: ExtractTokensContext) {
        this.operators.add(":")
    },
    ImportDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.ImportDeclaration,
    ) {
        this.operators.add("import")
        if (node.importKind === "type") {
            this.operators.add("type")
        }
        if (
            node.specifiers.some(
                (spec) => spec.type === AST_NODE_TYPES.ImportSpecifier,
            )
        ) {
            this.operators.add("{}")
            this.operators.add(",", node.specifiers.length - 1)
        }
        if (node.specifiers.length) {
            this.operators.add("from")
        }
        if (node.assertions && node.assertions.length) {
            this.operators.add("assert")
            this.operators.add("{}")
        }
    },
    ImportDefaultSpecifier: noop,
    ImportExpression(
        this: ExtractTokensContext,
        node: TSESTree.ImportExpression,
    ) {
        this.operators.add("import")
        if (node.attributes) {
            this.operators.add(",")
        }
    },
    ImportNamespaceSpecifier(this: ExtractTokensContext) {
        this.operators.add("*")
        this.operators.add("as")
    },
    ImportSpecifier(
        this: ExtractTokensContext,
        node: TSESTree.ImportSpecifier,
    ) {
        if (node.importKind === "type") {
            this.operators.add("type")
        }
        if (node.local.name !== node.imported.name) {
            this.operators.add("as")
        }
    },
    JSXAttribute(this: ExtractTokensContext) {
        this.operators.add("=")
    },
    JSXClosingElement(this: ExtractTokensContext) {
        this.operators.add("</")
        this.operators.add(">")
    },
    JSXClosingFragment(this: ExtractTokensContext) {
        this.operators.add("</")
        this.operators.add(">")
    },
    JSXElement: noop,
    JSXEmptyExpression: noop,
    JSXExpressionContainer(this: ExtractTokensContext) {
        this.operators.add("{}")
    },
    JSXFragment: noop,
    JSXIdentifier(this: ExtractTokensContext, node: TSESTree.JSXIdentifier) {
        this.operands.add(node.name)
    },
    JSXMemberExpression(this: ExtractTokensContext) {
        this.operators.add(".")
    },
    JSXNamespacedName(this: ExtractTokensContext) {
        this.operators.add(":")
    },
    JSXOpeningElement(this: ExtractTokensContext) {
        this.operators.add("<")
        this.operators.add(">")
    },
    JSXOpeningFragment(this: ExtractTokensContext) {
        this.operators.add("<")
        this.operators.add(">")
    },
    JSXSpreadAttribute(this: ExtractTokensContext) {
        this.operators.add("{}")
        this.operators.add("...")
    },
    JSXSpreadChild(this: ExtractTokensContext) {
        this.operators.add("{}")
        this.operators.add("...")
    },
    JSXText(this: ExtractTokensContext, node: TSESTree.JSXText) {
        this.operands.add(JSON.stringify(node.value))
    },
    LabeledStatement(this: ExtractTokensContext) {
        this.operators.add(":")
    },
    Literal(this: ExtractTokensContext, node: TSESTree.Literal) {
        if ("bigint" in node && node.bigint) {
            this.operands.add(\`\${node.bigint}n\`)
        } else if ("regex" in node && node.regex) {
            this.operands.add(\`/\${node.regex.pattern}/\${node.regex.flags}\`)
        } else {
            this.operands.add(JSON.stringify(node.value))
        }
    },
    LogicalExpression(
        this: ExtractTokensContext,
        node: TSESTree.LogicalExpression,
    ) {
        this.operators.add(node.operator)

        if (getPrecedence(node) >= getPrecedence(node.right)) {
            this.operators.add("()")
        }
    },
    MemberExpression(
        this: ExtractTokensContext,
        node: TSESTree.MemberExpression,
    ) {
        if (getPrecedence(node) > getPrecedence(node.object)) {
            this.operators.add("()")
        }
        if (node.optional) {
            this.operators.add("?.")
            if (node.computed) {
                this.operators.add("[]")
            }
        } else if (node.computed) {
            this.operators.add("[]")
        } else {
            this.operators.add(".")
        }
    },
    MetaProperty(this: ExtractTokensContext) {
        this.operators.add(".")
    },
    MethodDefinition(
        this: ExtractTokensContext,
        node: TSESTree.MethodDefinition,
    ) {
        if (node.accessibility) this.operators.add(node.accessibility)
        if (node.static) this.operators.add("static")
        if (node.kind === "get" || node.kind === "set")
            this.operators.add(node.kind)
        if (node.computed) {
            this.operators.add("[]")
        }
    },
    NewExpression(this: ExtractTokensContext, node: TSESTree.NewExpression) {
        this.operators.add("new")

        if (getPrecedence(node) >= getPrecedence(node.callee)) {
            this.operators.add("()")
        }

        this.operators.add("()")
        this.operators.add(",", node.arguments.length - 1)
    },
    ObjectExpression(
        this: ExtractTokensContext,
        node: TSESTree.ObjectExpression,
    ) {
        this.operators.add("{}")
        this.operators.add(",", node.properties.length - 1)
    },
    ObjectPattern(this: ExtractTokensContext, node: TSESTree.ObjectPattern) {
        this.operators.add("{}")
        this.operators.add(",", node.properties.length - 1)
    },
    PrivateIdentifier(
        this: ExtractTokensContext,
        node: TSESTree.PrivateIdentifier,
    ) {
        this.operands.add(\`#\${node.name}\`)
    },
    Program: noop,
    Property(this: ExtractTokensContext, node: TSESTree.Property) {
        if (node.kind === "get" || node.kind === "set")
            this.operators.add(node.kind)
        if (node.computed) {
            this.operators.add("[]")
        }
        if (!node.shorthand && !node.method) {
            this.operators.add(":")
        }
    },
    PropertyDefinition(
        this: ExtractTokensContext,
        node: TSESTree.PropertyDefinition,
    ) {
        if (node.accessibility) this.operators.add(node.accessibility)
        if (node.static) this.operators.add("static")
        if (node.readonly) this.operators.add("readonly")
        if (node.computed) {
            this.operators.add("[]")
        }
        if (node.value) {
            this.operators.add("=")
        }
    },
    RestElement(this: ExtractTokensContext) {
        this.operators.add("...")
    },
    ReturnStatement(this: ExtractTokensContext) {
        this.operators.add("return")
    },
    SequenceExpression(
        this: ExtractTokensContext,
        node: TSESTree.SequenceExpression,
    ) {
        this.operators.add(",", node.expressions.length - 1)
    },
    SpreadElement(this: ExtractTokensContext) {
        this.operators.add("...")
    },
    StaticBlock(this: ExtractTokensContext) {
        this.operators.add("static")
        this.operators.add("{}")
    },
    Super(this: ExtractTokensContext) {
        this.operands.add("super")
    },
    SwitchCase(this: ExtractTokensContext, node: TSESTree.SwitchCase) {
        if (node.test) {
            this.operators.add("case")
        } else {
            this.operators.add("default")
        }
        this.operators.add(":")
    },
    SwitchStatement(this: ExtractTokensContext) {
        this.operators.add("switch()")
        this.operators.add("{}")
    },
    TaggedTemplateExpression: noop,
    TemplateElement(
        this: ExtractTokensContext,
        node: TSESTree.TemplateElement,
        parent: TSESTree.Node | null,
    ) {
        let open = "\`"
        let close = "\`"
        if (
            parent &&
            (parent.type === AST_NODE_TYPES.TemplateLiteral ||
                parent.type === AST_NODE_TYPES.TSTemplateLiteralType)
        ) {
            const index = parent.quasis.indexOf(node)
            if (index > 0) {
                open = "}"
            }
            if (index < parent.quasis.length - 1) {
                close = "\${"
            }
        }
        this.operands.add(\`\${open}\${node.value.cooked}\${close}\`)
    },
    TemplateLiteral: noop,
    ThisExpression(this: ExtractTokensContext) {
        this.operands.add("this")
    },
    ThrowStatement(this: ExtractTokensContext) {
        this.operators.add("throw")
    },
    TryStatement(this: ExtractTokensContext, node: TSESTree.TryStatement) {
        this.operators.add("try")
        if (node.finalizer) {
            this.operators.add("finally")
        }
    },
    UnaryExpression(
        this: ExtractTokensContext,
        node: TSESTree.UnaryExpression,
    ) {
        this.operators.add(node.operator)

        if (getPrecedence(node) >= getPrecedence(node.argument)) {
            this.operators.add("()")
        }
    },
    UpdateExpression(
        this: ExtractTokensContext,
        node: TSESTree.UpdateExpression,
    ) {
        this.operators.add(node.operator)

        if (getPrecedence(node) >= getPrecedence(node.argument)) {
            this.operators.add("()")
        }
    },
    VariableDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.VariableDeclaration,
    ) {
        this.operators.add(node.kind)
        this.operators.add(",", node.declarations.length - 1)

        if (node.declare) this.operators.add("declare")
    },
    VariableDeclarator(
        this: ExtractTokensContext,
        node: TSESTree.VariableDeclarator,
    ) {
        if (node.init) {
            this.operators.add("=")
        }
    },
    WhileStatement(this: ExtractTokensContext) {
        this.operators.add("while()")
    },
    WithStatement(this: ExtractTokensContext) {
        this.operators.add("with()")
    },
    YieldExpression(
        this: ExtractTokensContext,
        node: TSESTree.YieldExpression,
    ) {
        this.operators.add("yield")
        if (node.delegate) {
            this.operators.add("*")
        }
        if (
            node.argument &&
            getPrecedence(node) > getPrecedence(node.argument)
        ) {
            this.operators.add("()")
        }
    },

    // TS
    TSAbstractKeyword(this: ExtractTokensContext) {
        this.operators.add("abstract")
    },
    TSAbstractMethodDefinition(
        this: ExtractTokensContext,
        node: TSESTree.TSAbstractMethodDefinition,
    ) {
        this.operators.add("abstract")
        if (node.accessibility) this.operators.add(node.accessibility)
        if (node.static) this.operators.add("static")
        if (node.kind === "get" || node.kind === "set")
            this.operators.add(node.kind)
        if (node.computed) {
            this.operators.add("[]")
        }
    },
    TSAbstractPropertyDefinition(
        this: ExtractTokensContext,
        node: TSESTree.TSAbstractPropertyDefinition,
    ) {
        this.operators.add("abstract")
        if (node.accessibility) this.operators.add(node.accessibility)
        if (node.static) this.operators.add("static")
        if (node.computed) {
            this.operators.add("[]")
        }
        if (node.value) {
            this.operators.add("=")
        }
    },
    TSAnyKeyword(this: ExtractTokensContext) {
        this.operands.add("any")
    },
    TSArrayType(this: ExtractTokensContext) {
        this.operators.add("[]")
    },
    TSAsExpression(this: ExtractTokensContext) {
        this.operators.add("as")
    },
    TSAsyncKeyword(this: ExtractTokensContext) {
        this.operators.add("async")
    },
    TSBigIntKeyword(this: ExtractTokensContext) {
        this.operands.add("bigint")
    },
    TSBooleanKeyword(this: ExtractTokensContext) {
        this.operands.add("boolean")
    },
    TSCallSignatureDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.TSCallSignatureDeclaration,
    ) {
        this.operators.add("()")
        this.operators.add(",", node.params.length - 1)
    },
    TSClassImplements: noop,
    TSConditionalType(this: ExtractTokensContext) {
        this.operators.add("extends")
        this.operators.add("?:")
    },
    TSConstructSignatureDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.TSConstructSignatureDeclaration,
    ) {
        this.operators.add("new")
        this.operators.add("()")
        this.operators.add(",", node.params.length - 1)
    },
    TSConstructorType(
        this: ExtractTokensContext,
        node: TSESTree.TSConstructorType,
    ) {
        this.operators.add("new")
        this.operators.add("()")
        this.operators.add(",", node.params.length - 1)
    },
    TSDeclareFunction(
        this: ExtractTokensContext,
        node: TSESTree.TSDeclareFunction,
    ) {
        if (node.async) {
            this.operators.add("async")
        }
        this.operators.add("function")
        if (node.generator) {
            this.operators.add("*")
        }
        this.operators.add("()")
        this.operators.add(",", node.params.length - 1)
    },
    TSDeclareKeyword(this: ExtractTokensContext) {
        this.operators.add("declare")
    },
    TSEmptyBodyFunctionExpression(
        this: ExtractTokensContext,
        node: TSESTree.TSEmptyBodyFunctionExpression,
        parent: TSESTree.Node | null,
    ) {
        if (node.async) {
            this.operators.add("async")
        }

        if (
            !parent ||
            parent.type !== AST_NODE_TYPES.MethodDefinition &&
                (parent.type !== AST_NODE_TYPES.Property || !parent.method) &&
                parent.type !== AST_NODE_TYPES.TSAbstractMethodDefinition
        ) {
            this.operators.add("function")
        }

        if (node.generator) {
            this.operators.add("*")
        }
        this.operators.add("()")
        this.operators.add(",", node.params.length - 1)

        if (node.declare) this.operators.add("declare")
    },
    TSEnumDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.TSEnumDeclaration,
    ) {
        if (node.const) this.operators.add("const")
        this.operators.add("enum")
        this.operators.add("{}")
        this.operators.add(",", node.members.length - 1)

        if (node.declare) this.operators.add("declare")
    },
    TSEnumMember(this: ExtractTokensContext, node: TSESTree.TSEnumMember) {
        if (node.computed) {
            this.operators.add("[]")
        }
        if (node.initializer) {
            this.operators.add("=")
        }
    },
    TSExportAssignment(this: ExtractTokensContext) {
        this.operators.add("export")
        this.operators.add("=")
    },
    TSExportKeyword(this: ExtractTokensContext) {
        this.operators.add("export")
    },
    TSExternalModuleReference(this: ExtractTokensContext) {
        this.operands.add("require")
        this.operators.add("()")
    },
    TSFunctionType(this: ExtractTokensContext, node: TSESTree.TSFunctionType) {
        this.operators.add("()")
        this.operators.add(",", node.params.length - 1)
    },
    TSImportEqualsDeclaration(this: ExtractTokensContext) {
        this.operators.add("import")
        this.operators.add("=")
    },
    TSImportType(this: ExtractTokensContext, node: TSESTree.TSImportType) {
        this.operators.add("import")
        this.operators.add("()")
        if (node.qualifier) {
            this.operators.add(".")
        }
    },
    TSIndexSignature(this: ExtractTokensContext, node) {
        this.operators.add("[]")
        if (node.readonly) this.operators.add("readonly")
        if (node.static) this.operators.add("static")
        if (node.export) this.operators.add("export")
    },
    TSIndexedAccessType(this: ExtractTokensContext) {
        this.operators.add("[]")
    },
    TSInferType(this: ExtractTokensContext) {
        this.operators.add("infer")
    },
    TSInterfaceBody(this: ExtractTokensContext) {
        this.operators.add("{}")
    },
    TSInterfaceDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.TSInterfaceDeclaration,
    ) {
        this.operators.add("interface")
        if (node.extends) {
            this.operators.add("extends")
            this.operators.add(",", node.extends.length - 1)
        }
        if (node.implements) {
            this.operators.add("implements")
            this.operators.add(",", node.implements.length - 1)
        }
        if (node.abstract) {
            this.operators.add("abstract")
        }
        if (node.declare) this.operators.add("declare")
    },
    TSInterfaceHeritage: noop,
    TSIntersectionType(
        this: ExtractTokensContext,
        node: TSESTree.TSIntersectionType,
    ) {
        this.operators.add("&", node.types.length - 1)
    },
    TSIntrinsicKeyword(this: ExtractTokensContext) {
        this.operands.add("intrinsic")
    },
    TSLiteralType: noop,
    TSMappedType(this: ExtractTokensContext, node: TSESTree.TSMappedType) {
        this.operators.add("{}")
        if (node.readonly) {
            if (typeof node.readonly === "string") {
                this.operators.add(node.readonly)
            }
            this.operators.add("readonly")
        }

        this.operators.add("[]")
        if (node.optional) {
            if (typeof node.optional === "string") {
                this.operators.add(node.optional)
            }
            this.operators.add("?")
        }
        this.operators.add(":")
    },
    TSMethodSignature(
        this: ExtractTokensContext,
        node: TSESTree.TSMethodSignature,
    ) {
        if (node.accessibility) this.operators.add(node.accessibility)
        if (node.readonly) this.operators.add("readonly")
        if (node.static) this.operators.add("static")
        if (node.export) this.operators.add("export")
        if (node.kind === "get" || node.kind === "set")
            this.operators.add(node.kind)
        if (node.computed) this.operators.add("[]")
        if (node.optional) this.operators.add("?")

        this.operators.add("()")
        this.operators.add(",", node.params.length - 1)
    },
    TSModuleBlock(this: ExtractTokensContext) {
        this.operators.add("{}")
    },
    TSModuleDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.TSModuleDeclaration,
    ) {
        if (node.declare) this.operators.add("declare")
        if (!node.global) {
            this.operators.add("module")
        }
    },
    TSNamespaceExportDeclaration(this: ExtractTokensContext) {
        this.operators.add("export")
        this.operators.add("as")
        this.operators.add("namespace")
    },
    TSNamedTupleMember(
        this: ExtractTokensContext,
        node: TSESTree.TSNamedTupleMember,
    ) {
        if (node.optional) this.operators.add("?")
        this.operators.add(":")
    },
    TSNeverKeyword(this: ExtractTokensContext) {
        this.operands.add("never")
    },
    TSNonNullExpression(this: ExtractTokensContext) {
        this.operators.add("!")
    },
    TSNullKeyword(this: ExtractTokensContext) {
        this.operands.add("null")
    },
    TSNumberKeyword(this: ExtractTokensContext) {
        this.operands.add("number")
    },
    TSObjectKeyword(this: ExtractTokensContext) {
        this.operands.add("object")
    },
    TSOptionalType(this: ExtractTokensContext) {
        this.operators.add("?")
    },
    TSParameterProperty(
        this: ExtractTokensContext,
        node: TSESTree.TSParameterProperty,
    ) {
        if (node.accessibility) this.operators.add(node.accessibility)
        if (node.readonly) this.operators.add("readonly")
        if (node.static) this.operators.add("static")
        if (node.export) this.operators.add("export")
    },
    TSPrivateKeyword(this: ExtractTokensContext) {
        this.operators.add("private")
    },
    TSPropertySignature(
        this: ExtractTokensContext,
        node: TSESTree.TSPropertySignature,
    ) {
        if (node.accessibility) this.operators.add(node.accessibility)
        if (node.readonly) this.operators.add("readonly")
        if (node.static) this.operators.add("static")
        if (node.export) this.operators.add("export")
        if (node.computed) this.operators.add("[]")
        if (node.optional) this.operators.add("?")
    },
    TSProtectedKeyword(this: ExtractTokensContext) {
        this.operators.add("protected")
    },
    TSPublicKeyword(this: ExtractTokensContext) {
        this.operators.add("public")
    },
    TSQualifiedName(this: ExtractTokensContext) {
        this.operators.add(".")
    },
    TSReadonlyKeyword(this: ExtractTokensContext) {
        this.operators.add("readonly")
    },
    TSRestType(this: ExtractTokensContext) {
        this.operators.add("...")
    },
    TSStaticKeyword(this: ExtractTokensContext) {
        this.operators.add("static")
    },
    TSStringKeyword(this: ExtractTokensContext) {
        this.operands.add("string")
    },
    TSSymbolKeyword(this: ExtractTokensContext) {
        this.operands.add("symbol")
    },
    TSTemplateLiteralType: noop,
    TSThisType(this: ExtractTokensContext) {
        this.operands.add("this")
    },
    TSTupleType(this: ExtractTokensContext, node) {
        this.operators.add("[]")
        this.operators.add(",", node.elementTypes.length - 1)
    },
    TSTypeAliasDeclaration(this: ExtractTokensContext) {
        this.operators.add("type")
        this.operators.add("=")
    },
    TSTypeAnnotation(
        this: ExtractTokensContext,
        node: TSESTree.TSTypeAnnotation,
        parent: TSESTree.Node | null,
    ) {
        if (parent) {
            if (
                parent.type === AST_NODE_TYPES.TSFunctionType &&
                    parent.returnType === node ||
                parent.type === AST_NODE_TYPES.TSConstructorType &&
                    parent.returnType === node
            ) {
                this.operators.add("=>")
                return
            }
            if (parent.type === AST_NODE_TYPES.TSTypePredicate) {
                return
            }
        }
        this.operators.add(":")
    },
    TSTypeAssertion(this: ExtractTokensContext) {
        this.operators.add("<>")
    },
    TSTypeLiteral(this: ExtractTokensContext) {
        this.operators.add("{}")
    },
    TSTypeOperator(this: ExtractTokensContext) {
        this.operators.add("keyof")
    },
    TSTypeParameter(
        this: ExtractTokensContext,
        node: TSESTree.TSTypeParameter,
        parent,
    ) {
        if (node.constraint) {
            if (
                parent &&
                parent.type === AST_NODE_TYPES.TSMappedType &&
                parent.typeParameter === node
            ) {
                this.operators.add("in")
            } else {
                this.operators.add("extends")
            }
        }
        if (node.default) {
            this.operators.add("=")
        }
    },
    TSTypeParameterDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.TSTypeParameterDeclaration,
    ) {
        this.operators.add("<>")
        this.operators.add(",", node.params.length - 1)
    },
    TSTypeParameterInstantiation(
        this: ExtractTokensContext,
        node: TSESTree.TSTypeParameterInstantiation,
    ) {
        this.operators.add("<>")
        this.operators.add(",", node.params.length - 1)
    },
    TSTypePredicate(this: ExtractTokensContext) {
        this.operators.add("is")
    },
    TSTypeQuery(this: ExtractTokensContext) {
        this.operators.add("typeof")
    },
    TSTypeReference: noop,
    TSUndefinedKeyword(this: ExtractTokensContext) {
        this.operands.add("undefined")
    },
    TSUnionType(this: ExtractTokensContext, node: TSESTree.TSUnionType) {
        this.operators.add("|", node.types.length - 1)
    },
    TSUnknownKeyword(this: ExtractTokensContext) {
        this.operands.add("unknown")
    },
    TSVoidKeyword(this: ExtractTokensContext) {
        this.operands.add("void")
    },
}
\` 1`] = `
Object {
  "operands": Array [
    "ArrayExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ArrayExpression",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "elements",
    "length",
    "1",
    "ArrayPattern",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ArrayPattern",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "elements",
    "length",
    "1",
    "ArrowFunctionExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ArrowFunctionExpression",
    "node",
    "async",
    "this",
    "operators",
    "add",
    "\\"async\\"",
    "node",
    "generator",
    "this",
    "operators",
    "add",
    "\\"*\\"",
    "node",
    "params",
    "length",
    "1",
    "node",
    "params",
    "0",
    "type",
    "AST_NODE_TYPES",
    "Identifier",
    "node",
    "params",
    "0",
    "typeAnnotation",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
    "this",
    "operators",
    "add",
    "\\"=>\\"",
    "node",
    "body",
    "type",
    "AST_NODE_TYPES",
    "ObjectExpression",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "AssignmentExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "AssignmentExpression",
    "this",
    "operators",
    "add",
    "node",
    "operator",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "right",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "AssignmentPattern",
    "this",
    "ExtractTokensContext",
    "_node",
    "TSESTree",
    "AssignmentPattern",
    "this",
    "operators",
    "add",
    "\\"=\\"",
    "AwaitExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "AwaitExpression",
    "this",
    "operators",
    "add",
    "\\"await\\"",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "argument",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "BinaryExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "BinaryExpression",
    "this",
    "operators",
    "add",
    "node",
    "operator",
    "\\"operator\\"",
    "ESTree",
    "BinaryExpression",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "right",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "BlockStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "BreakStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"break\\"",
    "CallExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "CallExpression",
    "node",
    "optional",
    "this",
    "operators",
    "add",
    "\\"?.\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "arguments",
    "length",
    "1",
    "CatchClause",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "CatchClause",
    "this",
    "operators",
    "add",
    "\\"catch\\"",
    "node",
    "param",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "ChainExpression",
    "noop",
    "ClassBody",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "ClassDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ClassDeclaration",
    "this",
    "operators",
    "add",
    "\\"class\\"",
    "node",
    "superClass",
    "this",
    "operators",
    "add",
    "\\"extends\\"",
    "node",
    "implements",
    "this",
    "operators",
    "add",
    "\\"implements\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "implements",
    "length",
    "1",
    "node",
    "abstract",
    "this",
    "operators",
    "add",
    "\\"abstract\\"",
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
    "ClassExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ClassExpression",
    "this",
    "operators",
    "add",
    "\\"class\\"",
    "node",
    "superClass",
    "this",
    "operators",
    "add",
    "\\"extends\\"",
    "node",
    "implements",
    "this",
    "operators",
    "add",
    "\\"implements\\"",
    "node",
    "abstract",
    "this",
    "operators",
    "add",
    "\\"abstract\\"",
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
    "ConditionalExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ConditionalExpression",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "test",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\"?:\\"",
    "ContinueStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"continue\\"",
    "DebuggerStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"debugger\\"",
    "Decorator",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"@\\"",
    "DoWhileStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"do\\"",
    "this",
    "operators",
    "add",
    "\\"while()\\"",
    "EmptyStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\";\\"",
    "ExportAllDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ExportAllDeclaration",
    "this",
    "operators",
    "add",
    "\\"export\\"",
    "node",
    "exportKind",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"*\\"",
    "node",
    "exported",
    "this",
    "operators",
    "add",
    "\\"as\\"",
    "node",
    "source",
    "this",
    "operators",
    "add",
    "\\"from\\"",
    "node",
    "assertions",
    "node",
    "assertions",
    "length",
    "this",
    "operators",
    "add",
    "\\"assert\\"",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "ExportDefaultDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ExportDefaultDeclaration",
    "this",
    "operators",
    "add",
    "\\"export\\"",
    "node",
    "exportKind",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"default\\"",
    "ExportNamedDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ExportNamedDeclaration",
    "this",
    "operators",
    "add",
    "\\"export\\"",
    "node",
    "specifiers",
    "length",
    "node",
    "exportKind",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "specifiers",
    "length",
    "1",
    "node",
    "source",
    "this",
    "operators",
    "add",
    "\\"from\\"",
    "node",
    "assertions",
    "node",
    "assertions",
    "length",
    "this",
    "operators",
    "add",
    "\\"assert\\"",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "ExportSpecifier",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ExportSpecifier",
    "node",
    "exportKind",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"type\\"",
    "node",
    "local",
    "name",
    "node",
    "exported",
    "name",
    "this",
    "operators",
    "add",
    "\\"as\\"",
    "ExpressionStatement",
    "noop",
    "ForInStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"for()\\"",
    "this",
    "operators",
    "add",
    "\\"in\\"",
    "ForOfStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"for()\\"",
    "this",
    "operators",
    "add",
    "\\"of\\"",
    "ForStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"for()\\"",
    "this",
    "operators",
    "add",
    "\\";\\"",
    "2",
    "FunctionDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "FunctionDeclaration",
    "node",
    "async",
    "this",
    "operators",
    "add",
    "\\"async\\"",
    "this",
    "operators",
    "add",
    "\\"function\\"",
    "node",
    "generator",
    "this",
    "operators",
    "add",
    "\\"*\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
    "FunctionExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "FunctionExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "node",
    "async",
    "this",
    "operators",
    "add",
    "\\"async\\"",
    "parent",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "MethodDefinition",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "Property",
    "parent",
    "method",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSAbstractMethodDefinition",
    "this",
    "operators",
    "add",
    "\\"function\\"",
    "node",
    "generator",
    "this",
    "operators",
    "add",
    "\\"*\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
    "Identifier",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "Identifier",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "parent",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "Property",
    "parent",
    "shorthand",
    "parent",
    "value",
    "node",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "ImportSpecifier",
    "parent",
    "imported",
    "name",
    "node",
    "name",
    "parent",
    "local",
    "node",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "ExportSpecifier",
    "parent",
    "local",
    "name",
    "node",
    "name",
    "parent",
    "exported",
    "node",
    "this",
    "operands",
    "add",
    "node",
    "name",
    "IfStatement",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "IfStatement",
    "this",
    "operators",
    "add",
    "\\"if()\\"",
    "node",
    "alternate",
    "this",
    "operators",
    "add",
    "\\"else\\"",
    "ImportAttribute",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\":\\"",
    "ImportDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ImportDeclaration",
    "this",
    "operators",
    "add",
    "\\"import\\"",
    "node",
    "importKind",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"type\\"",
    "node",
    "specifiers",
    "some",
    "spec",
    "spec",
    "type",
    "AST_NODE_TYPES",
    "ImportSpecifier",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "specifiers",
    "length",
    "1",
    "node",
    "specifiers",
    "length",
    "this",
    "operators",
    "add",
    "\\"from\\"",
    "node",
    "assertions",
    "node",
    "assertions",
    "length",
    "this",
    "operators",
    "add",
    "\\"assert\\"",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "ImportDefaultSpecifier",
    "noop",
    "ImportExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ImportExpression",
    "this",
    "operators",
    "add",
    "\\"import\\"",
    "node",
    "attributes",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "ImportNamespaceSpecifier",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"*\\"",
    "this",
    "operators",
    "add",
    "\\"as\\"",
    "ImportSpecifier",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ImportSpecifier",
    "node",
    "importKind",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"type\\"",
    "node",
    "local",
    "name",
    "node",
    "imported",
    "name",
    "this",
    "operators",
    "add",
    "\\"as\\"",
    "JSXAttribute",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"=\\"",
    "JSXClosingElement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"</\\"",
    "this",
    "operators",
    "add",
    "\\">\\"",
    "JSXClosingFragment",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"</\\"",
    "this",
    "operators",
    "add",
    "\\">\\"",
    "JSXElement",
    "noop",
    "JSXEmptyExpression",
    "noop",
    "JSXExpressionContainer",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "JSXFragment",
    "noop",
    "JSXIdentifier",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "JSXIdentifier",
    "this",
    "operands",
    "add",
    "node",
    "name",
    "JSXMemberExpression",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\".\\"",
    "JSXNamespacedName",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\":\\"",
    "JSXOpeningElement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"<\\"",
    "this",
    "operators",
    "add",
    "\\">\\"",
    "JSXOpeningFragment",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"<\\"",
    "this",
    "operators",
    "add",
    "\\">\\"",
    "JSXSpreadAttribute",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "this",
    "operators",
    "add",
    "\\"...\\"",
    "JSXSpreadChild",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "this",
    "operators",
    "add",
    "\\"...\\"",
    "JSXText",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "JSXText",
    "this",
    "operands",
    "add",
    "JSON",
    "stringify",
    "node",
    "value",
    "LabeledStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\":\\"",
    "Literal",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "Literal",
    "\\"bigint\\"",
    "node",
    "node",
    "bigint",
    "this",
    "operands",
    "add",
    "\`\${",
    "}n\`",
    "node",
    "bigint",
    "\\"regex\\"",
    "node",
    "node",
    "regex",
    "this",
    "operands",
    "add",
    "\`/\${",
    "}/\${",
    "}\`",
    "node",
    "regex",
    "pattern",
    "node",
    "regex",
    "flags",
    "this",
    "operands",
    "add",
    "JSON",
    "stringify",
    "node",
    "value",
    "LogicalExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "LogicalExpression",
    "this",
    "operators",
    "add",
    "node",
    "operator",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "right",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "MemberExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "MemberExpression",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "object",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "node",
    "optional",
    "this",
    "operators",
    "add",
    "\\"?.\\"",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "this",
    "operators",
    "add",
    "\\".\\"",
    "MetaProperty",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\".\\"",
    "MethodDefinition",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "MethodDefinition",
    "node",
    "accessibility",
    "this",
    "operators",
    "add",
    "node",
    "accessibility",
    "node",
    "static",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "node",
    "kind",
    "\\"get\\"",
    "node",
    "kind",
    "\\"set\\"",
    "this",
    "operators",
    "add",
    "node",
    "kind",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "NewExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "NewExpression",
    "this",
    "operators",
    "add",
    "\\"new\\"",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "callee",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "arguments",
    "length",
    "1",
    "ObjectExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ObjectExpression",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "properties",
    "length",
    "1",
    "ObjectPattern",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ObjectPattern",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "properties",
    "length",
    "1",
    "PrivateIdentifier",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "PrivateIdentifier",
    "this",
    "operands",
    "add",
    "\`#\${",
    "}\`",
    "node",
    "name",
    "Program",
    "noop",
    "Property",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "Property",
    "node",
    "kind",
    "\\"get\\"",
    "node",
    "kind",
    "\\"set\\"",
    "this",
    "operators",
    "add",
    "node",
    "kind",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "shorthand",
    "node",
    "method",
    "this",
    "operators",
    "add",
    "\\":\\"",
    "PropertyDefinition",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "PropertyDefinition",
    "node",
    "accessibility",
    "this",
    "operators",
    "add",
    "node",
    "accessibility",
    "node",
    "static",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "node",
    "readonly",
    "this",
    "operators",
    "add",
    "\\"readonly\\"",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "value",
    "this",
    "operators",
    "add",
    "\\"=\\"",
    "RestElement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"...\\"",
    "ReturnStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"return\\"",
    "SequenceExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "SequenceExpression",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "expressions",
    "length",
    "1",
    "SpreadElement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"...\\"",
    "StaticBlock",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "Super",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"super\\"",
    "SwitchCase",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "SwitchCase",
    "node",
    "test",
    "this",
    "operators",
    "add",
    "\\"case\\"",
    "this",
    "operators",
    "add",
    "\\"default\\"",
    "this",
    "operators",
    "add",
    "\\":\\"",
    "SwitchStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"switch()\\"",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "TaggedTemplateExpression",
    "noop",
    "TemplateElement",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TemplateElement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "open",
    "\\"\`\\"",
    "close",
    "\\"\`\\"",
    "parent",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TemplateLiteral",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSTemplateLiteralType",
    "index",
    "parent",
    "quasis",
    "indexOf",
    "node",
    "index",
    "0",
    "open",
    "\\"}\\"",
    "index",
    "parent",
    "quasis",
    "length",
    "1",
    "close",
    "\\"\${\\"",
    "this",
    "operands",
    "add",
    "\`\${",
    "}\${",
    "}\${",
    "}\`",
    "open",
    "node",
    "value",
    "cooked",
    "close",
    "TemplateLiteral",
    "noop",
    "ThisExpression",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"this\\"",
    "ThrowStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"throw\\"",
    "TryStatement",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TryStatement",
    "this",
    "operators",
    "add",
    "\\"try\\"",
    "node",
    "finalizer",
    "this",
    "operators",
    "add",
    "\\"finally\\"",
    "UnaryExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "UnaryExpression",
    "this",
    "operators",
    "add",
    "node",
    "operator",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "argument",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "UpdateExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "UpdateExpression",
    "this",
    "operators",
    "add",
    "node",
    "operator",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "argument",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "VariableDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "VariableDeclaration",
    "this",
    "operators",
    "add",
    "node",
    "kind",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "declarations",
    "length",
    "1",
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
    "VariableDeclarator",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "VariableDeclarator",
    "node",
    "init",
    "this",
    "operators",
    "add",
    "\\"=\\"",
    "WhileStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"while()\\"",
    "WithStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"with()\\"",
    "YieldExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "YieldExpression",
    "this",
    "operators",
    "add",
    "\\"yield\\"",
    "node",
    "delegate",
    "this",
    "operators",
    "add",
    "\\"*\\"",
    "node",
    "argument",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "argument",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "TSAbstractKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"abstract\\"",
    "TSAbstractMethodDefinition",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSAbstractMethodDefinition",
    "this",
    "operators",
    "add",
    "\\"abstract\\"",
    "node",
    "accessibility",
    "this",
    "operators",
    "add",
    "node",
    "accessibility",
    "node",
    "static",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "node",
    "kind",
    "\\"get\\"",
    "node",
    "kind",
    "\\"set\\"",
    "this",
    "operators",
    "add",
    "node",
    "kind",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "TSAbstractPropertyDefinition",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSAbstractPropertyDefinition",
    "this",
    "operators",
    "add",
    "\\"abstract\\"",
    "node",
    "accessibility",
    "this",
    "operators",
    "add",
    "node",
    "accessibility",
    "node",
    "static",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "value",
    "this",
    "operators",
    "add",
    "\\"=\\"",
    "TSAnyKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"any\\"",
    "TSArrayType",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "TSAsExpression",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"as\\"",
    "TSAsyncKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"async\\"",
    "TSBigIntKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"bigint\\"",
    "TSBooleanKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"boolean\\"",
    "TSCallSignatureDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSCallSignatureDeclaration",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
    "TSClassImplements",
    "noop",
    "TSConditionalType",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"extends\\"",
    "this",
    "operators",
    "add",
    "\\"?:\\"",
    "TSConstructSignatureDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSConstructSignatureDeclaration",
    "this",
    "operators",
    "add",
    "\\"new\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
    "TSConstructorType",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSConstructorType",
    "this",
    "operators",
    "add",
    "\\"new\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
    "TSDeclareFunction",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSDeclareFunction",
    "node",
    "async",
    "this",
    "operators",
    "add",
    "\\"async\\"",
    "this",
    "operators",
    "add",
    "\\"function\\"",
    "node",
    "generator",
    "this",
    "operators",
    "add",
    "\\"*\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
    "TSDeclareKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
    "TSEmptyBodyFunctionExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSEmptyBodyFunctionExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "node",
    "async",
    "this",
    "operators",
    "add",
    "\\"async\\"",
    "parent",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "MethodDefinition",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "Property",
    "parent",
    "method",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSAbstractMethodDefinition",
    "this",
    "operators",
    "add",
    "\\"function\\"",
    "node",
    "generator",
    "this",
    "operators",
    "add",
    "\\"*\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
    "TSEnumDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSEnumDeclaration",
    "node",
    "const",
    "this",
    "operators",
    "add",
    "\\"const\\"",
    "this",
    "operators",
    "add",
    "\\"enum\\"",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "members",
    "length",
    "1",
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
    "TSEnumMember",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSEnumMember",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "initializer",
    "this",
    "operators",
    "add",
    "\\"=\\"",
    "TSExportAssignment",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"export\\"",
    "this",
    "operators",
    "add",
    "\\"=\\"",
    "TSExportKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"export\\"",
    "TSExternalModuleReference",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"require\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "TSFunctionType",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSFunctionType",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
    "TSImportEqualsDeclaration",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"import\\"",
    "this",
    "operators",
    "add",
    "\\"=\\"",
    "TSImportType",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSImportType",
    "this",
    "operators",
    "add",
    "\\"import\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "node",
    "qualifier",
    "this",
    "operators",
    "add",
    "\\".\\"",
    "TSIndexSignature",
    "this",
    "ExtractTokensContext",
    "node",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "readonly",
    "this",
    "operators",
    "add",
    "\\"readonly\\"",
    "node",
    "static",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "node",
    "export",
    "this",
    "operators",
    "add",
    "\\"export\\"",
    "TSIndexedAccessType",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "TSInferType",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"infer\\"",
    "TSInterfaceBody",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "TSInterfaceDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSInterfaceDeclaration",
    "this",
    "operators",
    "add",
    "\\"interface\\"",
    "node",
    "extends",
    "this",
    "operators",
    "add",
    "\\"extends\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "extends",
    "length",
    "1",
    "node",
    "implements",
    "this",
    "operators",
    "add",
    "\\"implements\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "implements",
    "length",
    "1",
    "node",
    "abstract",
    "this",
    "operators",
    "add",
    "\\"abstract\\"",
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
    "TSInterfaceHeritage",
    "noop",
    "TSIntersectionType",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSIntersectionType",
    "this",
    "operators",
    "add",
    "\\"&\\"",
    "node",
    "types",
    "length",
    "1",
    "TSIntrinsicKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"intrinsic\\"",
    "TSLiteralType",
    "noop",
    "TSMappedType",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSMappedType",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "node",
    "readonly",
    "node",
    "readonly",
    "\\"string\\"",
    "this",
    "operators",
    "add",
    "node",
    "readonly",
    "this",
    "operators",
    "add",
    "\\"readonly\\"",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "optional",
    "node",
    "optional",
    "\\"string\\"",
    "this",
    "operators",
    "add",
    "node",
    "optional",
    "this",
    "operators",
    "add",
    "\\"?\\"",
    "this",
    "operators",
    "add",
    "\\":\\"",
    "TSMethodSignature",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSMethodSignature",
    "node",
    "accessibility",
    "this",
    "operators",
    "add",
    "node",
    "accessibility",
    "node",
    "readonly",
    "this",
    "operators",
    "add",
    "\\"readonly\\"",
    "node",
    "static",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "node",
    "export",
    "this",
    "operators",
    "add",
    "\\"export\\"",
    "node",
    "kind",
    "\\"get\\"",
    "node",
    "kind",
    "\\"set\\"",
    "this",
    "operators",
    "add",
    "node",
    "kind",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "optional",
    "this",
    "operators",
    "add",
    "\\"?\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
    "TSModuleBlock",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "TSModuleDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSModuleDeclaration",
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
    "node",
    "global",
    "this",
    "operators",
    "add",
    "\\"module\\"",
    "TSNamespaceExportDeclaration",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"export\\"",
    "this",
    "operators",
    "add",
    "\\"as\\"",
    "this",
    "operators",
    "add",
    "\\"namespace\\"",
    "TSNamedTupleMember",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSNamedTupleMember",
    "node",
    "optional",
    "this",
    "operators",
    "add",
    "\\"?\\"",
    "this",
    "operators",
    "add",
    "\\":\\"",
    "TSNeverKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"never\\"",
    "TSNonNullExpression",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"!\\"",
    "TSNullKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"null\\"",
    "TSNumberKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"number\\"",
    "TSObjectKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"object\\"",
    "TSOptionalType",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"?\\"",
    "TSParameterProperty",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSParameterProperty",
    "node",
    "accessibility",
    "this",
    "operators",
    "add",
    "node",
    "accessibility",
    "node",
    "readonly",
    "this",
    "operators",
    "add",
    "\\"readonly\\"",
    "node",
    "static",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "node",
    "export",
    "this",
    "operators",
    "add",
    "\\"export\\"",
    "TSPrivateKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"private\\"",
    "TSPropertySignature",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSPropertySignature",
    "node",
    "accessibility",
    "this",
    "operators",
    "add",
    "node",
    "accessibility",
    "node",
    "readonly",
    "this",
    "operators",
    "add",
    "\\"readonly\\"",
    "node",
    "static",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "node",
    "export",
    "this",
    "operators",
    "add",
    "\\"export\\"",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "optional",
    "this",
    "operators",
    "add",
    "\\"?\\"",
    "TSProtectedKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"protected\\"",
    "TSPublicKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"public\\"",
    "TSQualifiedName",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\".\\"",
    "TSReadonlyKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"readonly\\"",
    "TSRestType",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"...\\"",
    "TSStaticKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "TSStringKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"string\\"",
    "TSSymbolKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"symbol\\"",
    "TSTemplateLiteralType",
    "noop",
    "TSThisType",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"this\\"",
    "TSTupleType",
    "this",
    "ExtractTokensContext",
    "node",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "elementTypes",
    "length",
    "1",
    "TSTypeAliasDeclaration",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"=\\"",
    "TSTypeAnnotation",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSTypeAnnotation",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "parent",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSFunctionType",
    "parent",
    "returnType",
    "node",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSConstructorType",
    "parent",
    "returnType",
    "node",
    "this",
    "operators",
    "add",
    "\\"=>\\"",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSTypePredicate",
    "this",
    "operators",
    "add",
    "\\":\\"",
    "TSTypeAssertion",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"<>\\"",
    "TSTypeLiteral",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "TSTypeOperator",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"keyof\\"",
    "TSTypeParameter",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSTypeParameter",
    "parent",
    "node",
    "constraint",
    "parent",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSMappedType",
    "parent",
    "typeParameter",
    "node",
    "this",
    "operators",
    "add",
    "\\"in\\"",
    "this",
    "operators",
    "add",
    "\\"extends\\"",
    "node",
    "default",
    "this",
    "operators",
    "add",
    "\\"=\\"",
    "TSTypeParameterDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSTypeParameterDeclaration",
    "this",
    "operators",
    "add",
    "\\"<>\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
    "TSTypeParameterInstantiation",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSTypeParameterInstantiation",
    "this",
    "operators",
    "add",
    "\\"<>\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
    "TSTypePredicate",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"is\\"",
    "TSTypeQuery",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"typeof\\"",
    "TSTypeReference",
    "noop",
    "TSUndefinedKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"undefined\\"",
    "TSUnionType",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSUnionType",
    "this",
    "operators",
    "add",
    "\\"|\\"",
    "node",
    "types",
    "length",
    "1",
    "TSUnknownKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"unknown\\"",
    "TSVoidKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"void\\"",
  ],
  "operators": Array [
    "{}",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "||",
    "||",
    "!==",
    ".",
    ".",
    "!==",
    ".",
    "[]",
    ".",
    ".",
    ".",
    "[]",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ".",
    ".",
    "if()",
    "===",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ">=",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ">",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "as",
    ".",
    "[]",
    ".",
    "if()",
    ">=",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ":",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ">=",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "&&",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    ".",
    "{}",
    "if()",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "&&",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "!==",
    ".",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ":",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ",",
    ":",
    ":",
    ".",
    ":",
    "|",
    ".",
    "{}",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "||",
    "!",
    "&&",
    "&&",
    "()",
    "!==",
    ".",
    ".",
    "||",
    "!==",
    ".",
    ".",
    "!",
    ".",
    "!==",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ",",
    ":",
    ":",
    ".",
    ":",
    "|",
    ".",
    "{}",
    "if()",
    "{}",
    "if()",
    "&&",
    "&&",
    "===",
    ".",
    ".",
    ".",
    "===",
    ".",
    "return",
    "if()",
    "&&",
    "&&",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
    ".",
    "===",
    ".",
    "return",
    "if()",
    "&&",
    "&&",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
    ".",
    "===",
    ".",
    "return",
    "()",
    ".",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "()",
    ".",
    ".",
    "=>",
    "===",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "&&",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    ":",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "!==",
    ".",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    ":",
    ":",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    ":",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    "else",
    "&&",
    "in",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    "if()",
    "else",
    "&&",
    "in",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ">=",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ">",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "else",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "else",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    "||",
    "===",
    ".",
    "===",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ">=",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    ":",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    "||",
    "===",
    ".",
    "===",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "&&",
    "!",
    ".",
    "!",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    "else",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    ":",
    "()",
    ",",
    ",",
    ":",
    ":",
    ".",
    ":",
    "|",
    ".",
    "{}",
    "let",
    "=",
    "let",
    "=",
    "if()",
    "&&",
    "()",
    "||",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
    "{}",
    "const",
    "=",
    "()",
    ".",
    ".",
    "if()",
    ">",
    "{}",
    "=",
    "if()",
    "<",
    "-",
    ".",
    ".",
    "{}",
    "=",
    "()",
    ".",
    ".",
    ".",
    ".",
    ":",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ">=",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ">=",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "&&",
    ".",
    ">",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    "||",
    "===",
    ".",
    "===",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    ":",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ",",
    ":",
    ":",
    ".",
    ":",
    "|",
    ".",
    "{}",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "||",
    "!",
    "&&",
    "&&",
    "()",
    "!==",
    ".",
    ".",
    "||",
    "!==",
    ".",
    ".",
    "!",
    ".",
    "!==",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    ":",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    ":",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "if()",
    "===",
    "typeof",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "if()",
    "===",
    "typeof",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    "||",
    "===",
    ".",
    "===",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    "!",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    ":",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ",",
    ":",
    ":",
    ".",
    ":",
    "|",
    ".",
    "{}",
    "if()",
    "{}",
    "if()",
    "||",
    "&&",
    "===",
    ".",
    ".",
    "===",
    ".",
    "&&",
    "===",
    ".",
    ".",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "return",
    "if()",
    "===",
    ".",
    ".",
    "{}",
    "return",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "{}",
    "if()",
    "else",
    "&&",
    "&&",
    "===",
    ".",
    ".",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    ":",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Program\`
import { AST_NODE_TYPES } from "@typescript-eslint/types"
import type { TSESTree } from "@typescript-eslint/types"
import type * as ESTree from "estree"
import { walk } from "./walker"
import type { Visitor } from "./visitor"

type AllVisitor = Required<Visitor>
type Operator =
    | TSESTree.AssignmentExpression["operator"]
    | ESTree.BinaryExpression["operator"]
    | TSESTree.LogicalExpression["operator"]
    | TSESTree.UnaryExpression["operator"]
    | TSESTree.UpdateExpression["operator"]
    | TSESTree.VariableDeclaration["kind"]
    | "()"
    | "[]"
    | "{}"
    | ","
    | "."
    | "=>"
    | "?."
    | "?:"
    | "@"
    | ";"
    | ":"
    | "..."
    | "</" // JSXClosingElement, JSXClosingFragment
    | "async"
    | "await"
    | "break"
    | "catch"
    | "class"
    | "extends"
    | "continue"
    | "debugger"
    | "do"
    | "while()"
    | "export"
    | "type"
    | "as"
    | "default"
    | "for()"
    | "of"
    | "function"
    | "if()"
    | "else"
    | "import"
    | "from"
    | "assert"
    | "static"
    | "get"
    | "set"
    | "new"
    | "return"
    | "case"
    | "switch()"
    | "throw"
    | "try"
    | "finally"
    | "with()"
    | "yield"
    // TS
    | "?"
    | "<>"
    | "private"
    | "protected"
    | "public"
    | "implements"
    | "abstract"
    | "declare"
    | "enum"
    | "infer"
    | "interface"
    | "readonly"
    | "module"
    | "namespace"
    | "keyof"
    | "is"

export type ExtractTokensResult = {
    readonly operators: TokensCollection<string>
    readonly operands: TokensCollection<string>
}
export class TokensCollection<T> {
    private readonly total: T[] = []

    private readonly distinct = new Set<T>()

    public add(e: T, count = 1): void {
        if (count === 1) {
            this.total.push(e)
            this.distinct.add(e)
        } else {
            for (let index = 0; index < count; index++) {
                this.total.push(e)
                this.distinct.add(e)
            }
        }
    }

    public get all(): T[] {
        return this.total
    }

    public get distinctSize(): number {
        return this.distinct.size
    }

    public get totalSize(): number {
        return this.total.length
    }
}
class ExtractTokensContext implements ExtractTokensResult {
    public readonly operators = new TokensCollection<Operator>()

    public readonly operands = new TokensCollection<string>()
}

/** noop */
function noop(): void {
    /* noop */
}

/**
 * Get operator precedence
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence
 */
function getPrecedence(node: TSESTree.Expression): number {
    if (node.type === AST_NODE_TYPES.SequenceExpression) {
        return 1
    }
    if (
        node.type === AST_NODE_TYPES.YieldExpression ||
        node.type === AST_NODE_TYPES.AssignmentExpression
    ) {
        return 2
    }
    if (node.type === AST_NODE_TYPES.ConditionalExpression) {
        return 3
    }
    if (node.type === AST_NODE_TYPES.LogicalExpression) {
        if (node.operator === "||" || node.operator === "??") {
            return 4
        }
        if (node.operator === "&&") {
            return 5
        }
        throw new Error(\`Unknown operator precedence:\${node.operator}\`)
    }
    if (node.type === AST_NODE_TYPES.BinaryExpression) {
        if (node.operator === "|") {
            return 6
        }
        if (node.operator === "^") {
            return 7
        }
        if (node.operator === "&") {
            return 8
        }
        if (
            node.operator === "==" ||
            node.operator === "!=" ||
            node.operator === "===" ||
            node.operator === "!=="
        ) {
            return 9
        }
        if (
            node.operator === "<" ||
            node.operator === "<=" ||
            node.operator === ">" ||
            node.operator === ">=" ||
            node.operator === "in" ||
            node.operator === "instanceof"
        ) {
            return 10
        }
        if (
            node.operator === "<<" ||
            node.operator === ">>" ||
            node.operator === ">>>"
        ) {
            return 11
        }
        if (node.operator === "+" || node.operator === "-") {
            return 12
        }
        if (
            node.operator === "*" ||
            node.operator === "/" ||
            node.operator === "%"
        ) {
            return 13
        }
        if (node.operator === "**") {
            return 14
        }
        throw new Error(\`Unknown operator precedence:\${node.operator}\`)
    }
    if (
        node.type === AST_NODE_TYPES.UnaryExpression ||
        node.type === AST_NODE_TYPES.AwaitExpression
    ) {
        return 15
    }
    if (node.type === AST_NODE_TYPES.UpdateExpression) {
        if (node.prefix) {
            return 15
        }
        return 16
    }
    if (
        node.type === AST_NODE_TYPES.NewExpression ||
        node.type === AST_NODE_TYPES.CallExpression ||
        node.type === AST_NODE_TYPES.ImportExpression ||
        node.type === AST_NODE_TYPES.ChainExpression
    ) {
        return 18
    }
    if (node.type === AST_NODE_TYPES.MemberExpression) {
        return 19
    }

    // Others
    if (node.type === AST_NODE_TYPES.ArrowFunctionExpression) {
        return 2
    }
    if (node.type === AST_NODE_TYPES.TSAsExpression) {
        return 14.5
    }
    return Infinity
}

const EXTRACT_TOKENS: AllVisitor = {
    ArrayExpression(
        this: ExtractTokensContext,
        node: TSESTree.ArrayExpression,
    ) {
        this.operators.add("[]")
        this.operators.add(",", node.elements.length - 1)
    },
    ArrayPattern(this: ExtractTokensContext, node: TSESTree.ArrayPattern) {
        this.operators.add("[]")
        this.operators.add(",", node.elements.length - 1)
    },
    ArrowFunctionExpression(
        this: ExtractTokensContext,
        node: TSESTree.ArrowFunctionExpression,
    ) {
        if (node.async) {
            this.operators.add("async")
        }
        if (node.generator) {
            // It cannot actually be used.
            this.operators.add("*")
        }
        if (
            node.params.length !== 1 ||
            node.params[0].type !== AST_NODE_TYPES.Identifier ||
            node.params[0].typeAnnotation
        ) {
            this.operators.add("()")
        }
        this.operators.add(",", node.params.length - 1)

        this.operators.add("=>")

        if (node.body.type === AST_NODE_TYPES.ObjectExpression) {
            this.operators.add("()")
        }
    },
    AssignmentExpression(
        this: ExtractTokensContext,
        node: TSESTree.AssignmentExpression,
    ) {
        this.operators.add(node.operator)

        if (getPrecedence(node) >= getPrecedence(node.right)) {
            this.operators.add("()")
        }
    },
    AssignmentPattern(
        this: ExtractTokensContext,
        _node: TSESTree.AssignmentPattern,
    ) {
        this.operators.add("=")
    },
    AwaitExpression(
        this: ExtractTokensContext,
        node: TSESTree.AwaitExpression,
    ) {
        this.operators.add("await")

        if (getPrecedence(node) > getPrecedence(node.argument)) {
            this.operators.add("()")
        }
    },
    BinaryExpression(
        this: ExtractTokensContext,
        node: TSESTree.BinaryExpression,
    ) {
        this.operators.add(node.operator as ESTree.BinaryExpression["operator"])

        if (getPrecedence(node) >= getPrecedence(node.right)) {
            this.operators.add("()")
        }
    },
    BlockStatement(this: ExtractTokensContext) {
        this.operators.add("{}")
    },
    BreakStatement(this: ExtractTokensContext) {
        this.operators.add("break")
    },
    CallExpression(this: ExtractTokensContext, node: TSESTree.CallExpression) {
        if (node.optional) {
            this.operators.add("?.")
        }
        this.operators.add("()")
        this.operators.add(",", node.arguments.length - 1)
    },
    CatchClause(this: ExtractTokensContext, node: TSESTree.CatchClause) {
        this.operators.add("catch")
        if (node.param) {
            this.operators.add("()")
        }
    },
    ChainExpression: noop,
    ClassBody(this: ExtractTokensContext) {
        this.operators.add("{}")
    },
    ClassDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.ClassDeclaration,
    ) {
        this.operators.add("class")
        if (node.superClass) {
            this.operators.add("extends")
        }
        if (node.implements) {
            this.operators.add("implements")
            this.operators.add(",", node.implements.length - 1)
        }
        if (node.abstract) {
            this.operators.add("abstract")
        }
        if (node.declare) this.operators.add("declare")
    },
    ClassExpression(
        this: ExtractTokensContext,
        node: TSESTree.ClassExpression,
    ) {
        this.operators.add("class")
        if (node.superClass) {
            this.operators.add("extends")
        }
        if (node.implements) {
            this.operators.add("implements")
        }
        if (node.abstract) {
            this.operators.add("abstract")
        }
        if (node.declare) this.operators.add("declare")
    },
    ConditionalExpression(
        this: ExtractTokensContext,
        node: TSESTree.ConditionalExpression,
    ) {
        if (getPrecedence(node) >= getPrecedence(node.test)) {
            this.operators.add("()")
        }
        this.operators.add("?:")
    },
    ContinueStatement(this: ExtractTokensContext) {
        this.operators.add("continue")
    },
    DebuggerStatement(this: ExtractTokensContext) {
        this.operators.add("debugger")
    },
    Decorator(this: ExtractTokensContext) {
        this.operators.add("@")
    },
    DoWhileStatement(this: ExtractTokensContext) {
        this.operators.add("do")
        this.operators.add("while()")
    },
    EmptyStatement(this: ExtractTokensContext) {
        this.operators.add(";")
    },
    ExportAllDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.ExportAllDeclaration,
    ) {
        this.operators.add("export")
        if (node.exportKind === "type") {
            this.operators.add("type")
        }
        this.operators.add("*")
        if (node.exported) {
            this.operators.add("as")
        }
        if (node.source) {
            this.operators.add("from")
        }
        if (node.assertions && node.assertions.length) {
            this.operators.add("assert")
            this.operators.add("{}")
        }
    },
    ExportDefaultDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.ExportDefaultDeclaration,
    ) {
        this.operators.add("export")
        if (node.exportKind === "type") {
            this.operators.add("type")
        }
        this.operators.add("default")
    },
    ExportNamedDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.ExportNamedDeclaration,
    ) {
        this.operators.add("export")
        if (node.specifiers.length) {
            if (node.exportKind === "type") {
                this.operators.add("type")
            }
            this.operators.add("{}")
            this.operators.add(",", node.specifiers.length - 1)
        }
        if (node.source) {
            this.operators.add("from")
        }
        if (node.assertions && node.assertions.length) {
            this.operators.add("assert")
            this.operators.add("{}")
        }
    },
    ExportSpecifier(
        this: ExtractTokensContext,
        node: TSESTree.ExportSpecifier,
    ) {
        if (node.exportKind === "type") {
            this.operators.add("type")
        }
        if (node.local.name !== node.exported.name) {
            this.operators.add("as")
        }
    },
    ExpressionStatement: noop,
    ForInStatement(this: ExtractTokensContext) {
        this.operators.add("for()")
        this.operators.add("in")
    },
    ForOfStatement(this: ExtractTokensContext) {
        this.operators.add("for()")
        this.operators.add("of")
    },
    ForStatement(this: ExtractTokensContext) {
        this.operators.add("for()")
        this.operators.add(";", 2)
    },
    FunctionDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.FunctionDeclaration,
    ) {
        if (node.async) {
            this.operators.add("async")
        }
        this.operators.add("function")
        if (node.generator) {
            this.operators.add("*")
        }
        this.operators.add("()")
        this.operators.add(",", node.params.length - 1)

        if (node.declare) this.operators.add("declare")
    },
    FunctionExpression(
        this: ExtractTokensContext,
        node: TSESTree.FunctionExpression,
        parent: TSESTree.Node | null,
    ) {
        if (node.async) {
            this.operators.add("async")
        }

        if (
            !parent ||
            parent.type !== AST_NODE_TYPES.MethodDefinition &&
                (parent.type !== AST_NODE_TYPES.Property || !parent.method) &&
                parent.type !== AST_NODE_TYPES.TSAbstractMethodDefinition
        ) {
            this.operators.add("function")
        }

        if (node.generator) {
            this.operators.add("*")
        }
        this.operators.add("()")
        this.operators.add(",", node.params.length - 1)

        if (node.declare) this.operators.add("declare")
    },
    Identifier(
        this: ExtractTokensContext,
        node: TSESTree.Identifier,
        parent: TSESTree.Node | null,
    ) {
        if (parent) {
            if (
                parent.type === AST_NODE_TYPES.Property &&
                parent.shorthand &&
                parent.value === node
            )
                return
            if (
                parent.type === AST_NODE_TYPES.ImportSpecifier &&
                parent.imported.name === node.name &&
                parent.local === node
            )
                return
            if (
                parent.type === AST_NODE_TYPES.ExportSpecifier &&
                parent.local.name === node.name &&
                parent.exported === node
            )
                return
        }
        this.operands.add(node.name)
    },
    IfStatement(this: ExtractTokensContext, node: TSESTree.IfStatement) {
        this.operators.add("if()")
        if (node.alternate) {
            this.operators.add("else")
        }
    },
    ImportAttribute(this: ExtractTokensContext) {
        this.operators.add(":")
    },
    ImportDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.ImportDeclaration,
    ) {
        this.operators.add("import")
        if (node.importKind === "type") {
            this.operators.add("type")
        }
        if (
            node.specifiers.some(
                (spec) => spec.type === AST_NODE_TYPES.ImportSpecifier,
            )
        ) {
            this.operators.add("{}")
            this.operators.add(",", node.specifiers.length - 1)
        }
        if (node.specifiers.length) {
            this.operators.add("from")
        }
        if (node.assertions && node.assertions.length) {
            this.operators.add("assert")
            this.operators.add("{}")
        }
    },
    ImportDefaultSpecifier: noop,
    ImportExpression(
        this: ExtractTokensContext,
        node: TSESTree.ImportExpression,
    ) {
        this.operators.add("import")
        if (node.attributes) {
            this.operators.add(",")
        }
    },
    ImportNamespaceSpecifier(this: ExtractTokensContext) {
        this.operators.add("*")
        this.operators.add("as")
    },
    ImportSpecifier(
        this: ExtractTokensContext,
        node: TSESTree.ImportSpecifier,
    ) {
        if (node.importKind === "type") {
            this.operators.add("type")
        }
        if (node.local.name !== node.imported.name) {
            this.operators.add("as")
        }
    },
    JSXAttribute(this: ExtractTokensContext) {
        this.operators.add("=")
    },
    JSXClosingElement(this: ExtractTokensContext) {
        this.operators.add("</")
        this.operators.add(">")
    },
    JSXClosingFragment(this: ExtractTokensContext) {
        this.operators.add("</")
        this.operators.add(">")
    },
    JSXElement: noop,
    JSXEmptyExpression: noop,
    JSXExpressionContainer(this: ExtractTokensContext) {
        this.operators.add("{}")
    },
    JSXFragment: noop,
    JSXIdentifier(this: ExtractTokensContext, node: TSESTree.JSXIdentifier) {
        this.operands.add(node.name)
    },
    JSXMemberExpression(this: ExtractTokensContext) {
        this.operators.add(".")
    },
    JSXNamespacedName(this: ExtractTokensContext) {
        this.operators.add(":")
    },
    JSXOpeningElement(this: ExtractTokensContext) {
        this.operators.add("<")
        this.operators.add(">")
    },
    JSXOpeningFragment(this: ExtractTokensContext) {
        this.operators.add("<")
        this.operators.add(">")
    },
    JSXSpreadAttribute(this: ExtractTokensContext) {
        this.operators.add("{}")
        this.operators.add("...")
    },
    JSXSpreadChild(this: ExtractTokensContext) {
        this.operators.add("{}")
        this.operators.add("...")
    },
    JSXText(this: ExtractTokensContext, node: TSESTree.JSXText) {
        this.operands.add(JSON.stringify(node.value))
    },
    LabeledStatement(this: ExtractTokensContext) {
        this.operators.add(":")
    },
    Literal(this: ExtractTokensContext, node: TSESTree.Literal) {
        if ("bigint" in node && node.bigint) {
            this.operands.add(\`\${node.bigint}n\`)
        } else if ("regex" in node && node.regex) {
            this.operands.add(\`/\${node.regex.pattern}/\${node.regex.flags}\`)
        } else {
            this.operands.add(JSON.stringify(node.value))
        }
    },
    LogicalExpression(
        this: ExtractTokensContext,
        node: TSESTree.LogicalExpression,
    ) {
        this.operators.add(node.operator)

        if (getPrecedence(node) >= getPrecedence(node.right)) {
            this.operators.add("()")
        }
    },
    MemberExpression(
        this: ExtractTokensContext,
        node: TSESTree.MemberExpression,
    ) {
        if (getPrecedence(node) > getPrecedence(node.object)) {
            this.operators.add("()")
        }
        if (node.optional) {
            this.operators.add("?.")
            if (node.computed) {
                this.operators.add("[]")
            }
        } else if (node.computed) {
            this.operators.add("[]")
        } else {
            this.operators.add(".")
        }
    },
    MetaProperty(this: ExtractTokensContext) {
        this.operators.add(".")
    },
    MethodDefinition(
        this: ExtractTokensContext,
        node: TSESTree.MethodDefinition,
    ) {
        if (node.accessibility) this.operators.add(node.accessibility)
        if (node.static) this.operators.add("static")
        if (node.kind === "get" || node.kind === "set")
            this.operators.add(node.kind)
        if (node.computed) {
            this.operators.add("[]")
        }
    },
    NewExpression(this: ExtractTokensContext, node: TSESTree.NewExpression) {
        this.operators.add("new")

        if (getPrecedence(node) >= getPrecedence(node.callee)) {
            this.operators.add("()")
        }

        this.operators.add("()")
        this.operators.add(",", node.arguments.length - 1)
    },
    ObjectExpression(
        this: ExtractTokensContext,
        node: TSESTree.ObjectExpression,
    ) {
        this.operators.add("{}")
        this.operators.add(",", node.properties.length - 1)
    },
    ObjectPattern(this: ExtractTokensContext, node: TSESTree.ObjectPattern) {
        this.operators.add("{}")
        this.operators.add(",", node.properties.length - 1)
    },
    PrivateIdentifier(
        this: ExtractTokensContext,
        node: TSESTree.PrivateIdentifier,
    ) {
        this.operands.add(\`#\${node.name}\`)
    },
    Program: noop,
    Property(this: ExtractTokensContext, node: TSESTree.Property) {
        if (node.kind === "get" || node.kind === "set")
            this.operators.add(node.kind)
        if (node.computed) {
            this.operators.add("[]")
        }
        if (!node.shorthand && !node.method) {
            this.operators.add(":")
        }
    },
    PropertyDefinition(
        this: ExtractTokensContext,
        node: TSESTree.PropertyDefinition,
    ) {
        if (node.accessibility) this.operators.add(node.accessibility)
        if (node.static) this.operators.add("static")
        if (node.readonly) this.operators.add("readonly")
        if (node.computed) {
            this.operators.add("[]")
        }
        if (node.value) {
            this.operators.add("=")
        }
    },
    RestElement(this: ExtractTokensContext) {
        this.operators.add("...")
    },
    ReturnStatement(this: ExtractTokensContext) {
        this.operators.add("return")
    },
    SequenceExpression(
        this: ExtractTokensContext,
        node: TSESTree.SequenceExpression,
    ) {
        this.operators.add(",", node.expressions.length - 1)
    },
    SpreadElement(this: ExtractTokensContext) {
        this.operators.add("...")
    },
    StaticBlock(this: ExtractTokensContext) {
        this.operators.add("static")
        this.operators.add("{}")
    },
    Super(this: ExtractTokensContext) {
        this.operands.add("super")
    },
    SwitchCase(this: ExtractTokensContext, node: TSESTree.SwitchCase) {
        if (node.test) {
            this.operators.add("case")
        } else {
            this.operators.add("default")
        }
        this.operators.add(":")
    },
    SwitchStatement(this: ExtractTokensContext) {
        this.operators.add("switch()")
        this.operators.add("{}")
    },
    TaggedTemplateExpression: noop,
    TemplateElement(
        this: ExtractTokensContext,
        node: TSESTree.TemplateElement,
        parent: TSESTree.Node | null,
    ) {
        let open = "\`"
        let close = "\`"
        if (
            parent &&
            (parent.type === AST_NODE_TYPES.TemplateLiteral ||
                parent.type === AST_NODE_TYPES.TSTemplateLiteralType)
        ) {
            const index = parent.quasis.indexOf(node)
            if (index > 0) {
                open = "}"
            }
            if (index < parent.quasis.length - 1) {
                close = "\${"
            }
        }
        this.operands.add(\`\${open}\${node.value.cooked}\${close}\`)
    },
    TemplateLiteral: noop,
    ThisExpression(this: ExtractTokensContext) {
        this.operands.add("this")
    },
    ThrowStatement(this: ExtractTokensContext) {
        this.operators.add("throw")
    },
    TryStatement(this: ExtractTokensContext, node: TSESTree.TryStatement) {
        this.operators.add("try")
        if (node.finalizer) {
            this.operators.add("finally")
        }
    },
    UnaryExpression(
        this: ExtractTokensContext,
        node: TSESTree.UnaryExpression,
    ) {
        this.operators.add(node.operator)

        if (getPrecedence(node) >= getPrecedence(node.argument)) {
            this.operators.add("()")
        }
    },
    UpdateExpression(
        this: ExtractTokensContext,
        node: TSESTree.UpdateExpression,
    ) {
        this.operators.add(node.operator)

        if (getPrecedence(node) >= getPrecedence(node.argument)) {
            this.operators.add("()")
        }
    },
    VariableDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.VariableDeclaration,
    ) {
        this.operators.add(node.kind)
        this.operators.add(",", node.declarations.length - 1)

        if (node.declare) this.operators.add("declare")
    },
    VariableDeclarator(
        this: ExtractTokensContext,
        node: TSESTree.VariableDeclarator,
    ) {
        if (node.init) {
            this.operators.add("=")
        }
    },
    WhileStatement(this: ExtractTokensContext) {
        this.operators.add("while()")
    },
    WithStatement(this: ExtractTokensContext) {
        this.operators.add("with()")
    },
    YieldExpression(
        this: ExtractTokensContext,
        node: TSESTree.YieldExpression,
    ) {
        this.operators.add("yield")
        if (node.delegate) {
            this.operators.add("*")
        }
        if (
            node.argument &&
            getPrecedence(node) > getPrecedence(node.argument)
        ) {
            this.operators.add("()")
        }
    },

    // TS
    TSAbstractKeyword(this: ExtractTokensContext) {
        this.operators.add("abstract")
    },
    TSAbstractMethodDefinition(
        this: ExtractTokensContext,
        node: TSESTree.TSAbstractMethodDefinition,
    ) {
        this.operators.add("abstract")
        if (node.accessibility) this.operators.add(node.accessibility)
        if (node.static) this.operators.add("static")
        if (node.kind === "get" || node.kind === "set")
            this.operators.add(node.kind)
        if (node.computed) {
            this.operators.add("[]")
        }
    },
    TSAbstractPropertyDefinition(
        this: ExtractTokensContext,
        node: TSESTree.TSAbstractPropertyDefinition,
    ) {
        this.operators.add("abstract")
        if (node.accessibility) this.operators.add(node.accessibility)
        if (node.static) this.operators.add("static")
        if (node.computed) {
            this.operators.add("[]")
        }
        if (node.value) {
            this.operators.add("=")
        }
    },
    TSAnyKeyword(this: ExtractTokensContext) {
        this.operands.add("any")
    },
    TSArrayType(this: ExtractTokensContext) {
        this.operators.add("[]")
    },
    TSAsExpression(this: ExtractTokensContext) {
        this.operators.add("as")
    },
    TSAsyncKeyword(this: ExtractTokensContext) {
        this.operators.add("async")
    },
    TSBigIntKeyword(this: ExtractTokensContext) {
        this.operands.add("bigint")
    },
    TSBooleanKeyword(this: ExtractTokensContext) {
        this.operands.add("boolean")
    },
    TSCallSignatureDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.TSCallSignatureDeclaration,
    ) {
        this.operators.add("()")
        this.operators.add(",", node.params.length - 1)
    },
    TSClassImplements: noop,
    TSConditionalType(this: ExtractTokensContext) {
        this.operators.add("extends")
        this.operators.add("?:")
    },
    TSConstructSignatureDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.TSConstructSignatureDeclaration,
    ) {
        this.operators.add("new")
        this.operators.add("()")
        this.operators.add(",", node.params.length - 1)
    },
    TSConstructorType(
        this: ExtractTokensContext,
        node: TSESTree.TSConstructorType,
    ) {
        this.operators.add("new")
        this.operators.add("()")
        this.operators.add(",", node.params.length - 1)
    },
    TSDeclareFunction(
        this: ExtractTokensContext,
        node: TSESTree.TSDeclareFunction,
    ) {
        if (node.async) {
            this.operators.add("async")
        }
        this.operators.add("function")
        if (node.generator) {
            this.operators.add("*")
        }
        this.operators.add("()")
        this.operators.add(",", node.params.length - 1)
    },
    TSDeclareKeyword(this: ExtractTokensContext) {
        this.operators.add("declare")
    },
    TSEmptyBodyFunctionExpression(
        this: ExtractTokensContext,
        node: TSESTree.TSEmptyBodyFunctionExpression,
        parent: TSESTree.Node | null,
    ) {
        if (node.async) {
            this.operators.add("async")
        }

        if (
            !parent ||
            parent.type !== AST_NODE_TYPES.MethodDefinition &&
                (parent.type !== AST_NODE_TYPES.Property || !parent.method) &&
                parent.type !== AST_NODE_TYPES.TSAbstractMethodDefinition
        ) {
            this.operators.add("function")
        }

        if (node.generator) {
            this.operators.add("*")
        }
        this.operators.add("()")
        this.operators.add(",", node.params.length - 1)

        if (node.declare) this.operators.add("declare")
    },
    TSEnumDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.TSEnumDeclaration,
    ) {
        if (node.const) this.operators.add("const")
        this.operators.add("enum")
        this.operators.add("{}")
        this.operators.add(",", node.members.length - 1)

        if (node.declare) this.operators.add("declare")
    },
    TSEnumMember(this: ExtractTokensContext, node: TSESTree.TSEnumMember) {
        if (node.computed) {
            this.operators.add("[]")
        }
        if (node.initializer) {
            this.operators.add("=")
        }
    },
    TSExportAssignment(this: ExtractTokensContext) {
        this.operators.add("export")
        this.operators.add("=")
    },
    TSExportKeyword(this: ExtractTokensContext) {
        this.operators.add("export")
    },
    TSExternalModuleReference(this: ExtractTokensContext) {
        this.operands.add("require")
        this.operators.add("()")
    },
    TSFunctionType(this: ExtractTokensContext, node: TSESTree.TSFunctionType) {
        this.operators.add("()")
        this.operators.add(",", node.params.length - 1)
    },
    TSImportEqualsDeclaration(this: ExtractTokensContext) {
        this.operators.add("import")
        this.operators.add("=")
    },
    TSImportType(this: ExtractTokensContext, node: TSESTree.TSImportType) {
        this.operators.add("import")
        this.operators.add("()")
        if (node.qualifier) {
            this.operators.add(".")
        }
    },
    TSIndexSignature(this: ExtractTokensContext, node) {
        this.operators.add("[]")
        if (node.readonly) this.operators.add("readonly")
        if (node.static) this.operators.add("static")
        if (node.export) this.operators.add("export")
    },
    TSIndexedAccessType(this: ExtractTokensContext) {
        this.operators.add("[]")
    },
    TSInferType(this: ExtractTokensContext) {
        this.operators.add("infer")
    },
    TSInterfaceBody(this: ExtractTokensContext) {
        this.operators.add("{}")
    },
    TSInterfaceDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.TSInterfaceDeclaration,
    ) {
        this.operators.add("interface")
        if (node.extends) {
            this.operators.add("extends")
            this.operators.add(",", node.extends.length - 1)
        }
        if (node.implements) {
            this.operators.add("implements")
            this.operators.add(",", node.implements.length - 1)
        }
        if (node.abstract) {
            this.operators.add("abstract")
        }
        if (node.declare) this.operators.add("declare")
    },
    TSInterfaceHeritage: noop,
    TSIntersectionType(
        this: ExtractTokensContext,
        node: TSESTree.TSIntersectionType,
    ) {
        this.operators.add("&", node.types.length - 1)
    },
    TSIntrinsicKeyword(this: ExtractTokensContext) {
        this.operands.add("intrinsic")
    },
    TSLiteralType: noop,
    TSMappedType(this: ExtractTokensContext, node: TSESTree.TSMappedType) {
        this.operators.add("{}")
        if (node.readonly) {
            if (typeof node.readonly === "string") {
                this.operators.add(node.readonly)
            }
            this.operators.add("readonly")
        }

        this.operators.add("[]")
        if (node.optional) {
            if (typeof node.optional === "string") {
                this.operators.add(node.optional)
            }
            this.operators.add("?")
        }
        this.operators.add(":")
    },
    TSMethodSignature(
        this: ExtractTokensContext,
        node: TSESTree.TSMethodSignature,
    ) {
        if (node.accessibility) this.operators.add(node.accessibility)
        if (node.readonly) this.operators.add("readonly")
        if (node.static) this.operators.add("static")
        if (node.export) this.operators.add("export")
        if (node.kind === "get" || node.kind === "set")
            this.operators.add(node.kind)
        if (node.computed) this.operators.add("[]")
        if (node.optional) this.operators.add("?")

        this.operators.add("()")
        this.operators.add(",", node.params.length - 1)
    },
    TSModuleBlock(this: ExtractTokensContext) {
        this.operators.add("{}")
    },
    TSModuleDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.TSModuleDeclaration,
    ) {
        if (node.declare) this.operators.add("declare")
        if (!node.global) {
            this.operators.add("module")
        }
    },
    TSNamespaceExportDeclaration(this: ExtractTokensContext) {
        this.operators.add("export")
        this.operators.add("as")
        this.operators.add("namespace")
    },
    TSNamedTupleMember(
        this: ExtractTokensContext,
        node: TSESTree.TSNamedTupleMember,
    ) {
        if (node.optional) this.operators.add("?")
        this.operators.add(":")
    },
    TSNeverKeyword(this: ExtractTokensContext) {
        this.operands.add("never")
    },
    TSNonNullExpression(this: ExtractTokensContext) {
        this.operators.add("!")
    },
    TSNullKeyword(this: ExtractTokensContext) {
        this.operands.add("null")
    },
    TSNumberKeyword(this: ExtractTokensContext) {
        this.operands.add("number")
    },
    TSObjectKeyword(this: ExtractTokensContext) {
        this.operands.add("object")
    },
    TSOptionalType(this: ExtractTokensContext) {
        this.operators.add("?")
    },
    TSParameterProperty(
        this: ExtractTokensContext,
        node: TSESTree.TSParameterProperty,
    ) {
        if (node.accessibility) this.operators.add(node.accessibility)
        if (node.readonly) this.operators.add("readonly")
        if (node.static) this.operators.add("static")
        if (node.export) this.operators.add("export")
    },
    TSPrivateKeyword(this: ExtractTokensContext) {
        this.operators.add("private")
    },
    TSPropertySignature(
        this: ExtractTokensContext,
        node: TSESTree.TSPropertySignature,
    ) {
        if (node.accessibility) this.operators.add(node.accessibility)
        if (node.readonly) this.operators.add("readonly")
        if (node.static) this.operators.add("static")
        if (node.export) this.operators.add("export")
        if (node.computed) this.operators.add("[]")
        if (node.optional) this.operators.add("?")
    },
    TSProtectedKeyword(this: ExtractTokensContext) {
        this.operators.add("protected")
    },
    TSPublicKeyword(this: ExtractTokensContext) {
        this.operators.add("public")
    },
    TSQualifiedName(this: ExtractTokensContext) {
        this.operators.add(".")
    },
    TSReadonlyKeyword(this: ExtractTokensContext) {
        this.operators.add("readonly")
    },
    TSRestType(this: ExtractTokensContext) {
        this.operators.add("...")
    },
    TSStaticKeyword(this: ExtractTokensContext) {
        this.operators.add("static")
    },
    TSStringKeyword(this: ExtractTokensContext) {
        this.operands.add("string")
    },
    TSSymbolKeyword(this: ExtractTokensContext) {
        this.operands.add("symbol")
    },
    TSTemplateLiteralType: noop,
    TSThisType(this: ExtractTokensContext) {
        this.operands.add("this")
    },
    TSTupleType(this: ExtractTokensContext, node) {
        this.operators.add("[]")
        this.operators.add(",", node.elementTypes.length - 1)
    },
    TSTypeAliasDeclaration(this: ExtractTokensContext) {
        this.operators.add("type")
        this.operators.add("=")
    },
    TSTypeAnnotation(
        this: ExtractTokensContext,
        node: TSESTree.TSTypeAnnotation,
        parent: TSESTree.Node | null,
    ) {
        if (parent) {
            if (
                parent.type === AST_NODE_TYPES.TSFunctionType &&
                    parent.returnType === node ||
                parent.type === AST_NODE_TYPES.TSConstructorType &&
                    parent.returnType === node
            ) {
                this.operators.add("=>")
                return
            }
            if (parent.type === AST_NODE_TYPES.TSTypePredicate) {
                return
            }
        }
        this.operators.add(":")
    },
    TSTypeAssertion(this: ExtractTokensContext) {
        this.operators.add("<>")
    },
    TSTypeLiteral(this: ExtractTokensContext) {
        this.operators.add("{}")
    },
    TSTypeOperator(this: ExtractTokensContext) {
        this.operators.add("keyof")
    },
    TSTypeParameter(
        this: ExtractTokensContext,
        node: TSESTree.TSTypeParameter,
        parent,
    ) {
        if (node.constraint) {
            if (
                parent &&
                parent.type === AST_NODE_TYPES.TSMappedType &&
                parent.typeParameter === node
            ) {
                this.operators.add("in")
            } else {
                this.operators.add("extends")
            }
        }
        if (node.default) {
            this.operators.add("=")
        }
    },
    TSTypeParameterDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.TSTypeParameterDeclaration,
    ) {
        this.operators.add("<>")
        this.operators.add(",", node.params.length - 1)
    },
    TSTypeParameterInstantiation(
        this: ExtractTokensContext,
        node: TSESTree.TSTypeParameterInstantiation,
    ) {
        this.operators.add("<>")
        this.operators.add(",", node.params.length - 1)
    },
    TSTypePredicate(this: ExtractTokensContext) {
        this.operators.add("is")
    },
    TSTypeQuery(this: ExtractTokensContext) {
        this.operators.add("typeof")
    },
    TSTypeReference: noop,
    TSUndefinedKeyword(this: ExtractTokensContext) {
        this.operands.add("undefined")
    },
    TSUnionType(this: ExtractTokensContext, node: TSESTree.TSUnionType) {
        this.operators.add("|", node.types.length - 1)
    },
    TSUnknownKeyword(this: ExtractTokensContext) {
        this.operands.add("unknown")
    },
    TSVoidKeyword(this: ExtractTokensContext) {
        this.operands.add("void")
    },
}

/**
 * Extract tokens
 */
export function extractTokens(
    node: ESTree.Node | TSESTree.Node,
): ExtractTokensResult {
    const context = new ExtractTokensContext()

    walk(
        node as TSESTree.Node,
        (node: TSESTree.Node, parent: TSESTree.Node | null) => {
            const extract = EXTRACT_TOKENS[node.type] as any
            if (
                extract &&
                Object.prototype.hasOwnProperty.call(EXTRACT_TOKENS, node.type)
            ) {
                extract.call(context, node, parent)
            }
        },
    )

    return context
}

\` 1`] = `
Object {
  "operands": Array [
    "AST_NODE_TYPES",
    "\\"@typescript-eslint/types\\"",
    "TSESTree",
    "\\"@typescript-eslint/types\\"",
    "ESTree",
    "\\"estree\\"",
    "walk",
    "\\"./walker\\"",
    "Visitor",
    "\\"./visitor\\"",
    "AllVisitor",
    "Required",
    "Visitor",
    "Operator",
    "\\"operator\\"",
    "TSESTree",
    "AssignmentExpression",
    "\\"operator\\"",
    "ESTree",
    "BinaryExpression",
    "\\"operator\\"",
    "TSESTree",
    "LogicalExpression",
    "\\"operator\\"",
    "TSESTree",
    "UnaryExpression",
    "\\"operator\\"",
    "TSESTree",
    "UpdateExpression",
    "\\"kind\\"",
    "TSESTree",
    "VariableDeclaration",
    "\\"()\\"",
    "\\"[]\\"",
    "\\"{}\\"",
    "\\",\\"",
    "\\".\\"",
    "\\"=>\\"",
    "\\"?.\\"",
    "\\"?:\\"",
    "\\"@\\"",
    "\\";\\"",
    "\\":\\"",
    "\\"...\\"",
    "\\"</\\"",
    "\\"async\\"",
    "\\"await\\"",
    "\\"break\\"",
    "\\"catch\\"",
    "\\"class\\"",
    "\\"extends\\"",
    "\\"continue\\"",
    "\\"debugger\\"",
    "\\"do\\"",
    "\\"while()\\"",
    "\\"export\\"",
    "\\"type\\"",
    "\\"as\\"",
    "\\"default\\"",
    "\\"for()\\"",
    "\\"of\\"",
    "\\"function\\"",
    "\\"if()\\"",
    "\\"else\\"",
    "\\"import\\"",
    "\\"from\\"",
    "\\"assert\\"",
    "\\"static\\"",
    "\\"get\\"",
    "\\"set\\"",
    "\\"new\\"",
    "\\"return\\"",
    "\\"case\\"",
    "\\"switch()\\"",
    "\\"throw\\"",
    "\\"try\\"",
    "\\"finally\\"",
    "\\"with()\\"",
    "\\"yield\\"",
    "\\"?\\"",
    "\\"<>\\"",
    "\\"private\\"",
    "\\"protected\\"",
    "\\"public\\"",
    "\\"implements\\"",
    "\\"abstract\\"",
    "\\"declare\\"",
    "\\"enum\\"",
    "\\"infer\\"",
    "\\"interface\\"",
    "\\"readonly\\"",
    "\\"module\\"",
    "\\"namespace\\"",
    "\\"keyof\\"",
    "\\"is\\"",
    "ExtractTokensResult",
    "TokensCollection",
    "string",
    "operators",
    "TokensCollection",
    "string",
    "operands",
    "TokensCollection",
    "T",
    "total",
    "T",
    "distinct",
    "Set",
    "T",
    "add",
    "e",
    "T",
    "count",
    "1",
    "void",
    "count",
    "1",
    "this",
    "total",
    "push",
    "e",
    "this",
    "distinct",
    "add",
    "e",
    "index",
    "0",
    "index",
    "count",
    "index",
    "this",
    "total",
    "push",
    "e",
    "this",
    "distinct",
    "add",
    "e",
    "all",
    "T",
    "this",
    "total",
    "distinctSize",
    "number",
    "this",
    "distinct",
    "size",
    "totalSize",
    "number",
    "this",
    "total",
    "length",
    "ExtractTokensContext",
    "ExtractTokensResult",
    "operators",
    "TokensCollection",
    "Operator",
    "operands",
    "TokensCollection",
    "string",
    "noop",
    "void",
    "getPrecedence",
    "node",
    "TSESTree",
    "Expression",
    "number",
    "node",
    "type",
    "AST_NODE_TYPES",
    "SequenceExpression",
    "1",
    "node",
    "type",
    "AST_NODE_TYPES",
    "YieldExpression",
    "node",
    "type",
    "AST_NODE_TYPES",
    "AssignmentExpression",
    "2",
    "node",
    "type",
    "AST_NODE_TYPES",
    "ConditionalExpression",
    "3",
    "node",
    "type",
    "AST_NODE_TYPES",
    "LogicalExpression",
    "node",
    "operator",
    "\\"||\\"",
    "node",
    "operator",
    "\\"??\\"",
    "4",
    "node",
    "operator",
    "\\"&&\\"",
    "5",
    "Error",
    "\`Unknown operator precedence:\${",
    "}\`",
    "node",
    "operator",
    "node",
    "type",
    "AST_NODE_TYPES",
    "BinaryExpression",
    "node",
    "operator",
    "\\"|\\"",
    "6",
    "node",
    "operator",
    "\\"^\\"",
    "7",
    "node",
    "operator",
    "\\"&\\"",
    "8",
    "node",
    "operator",
    "\\"==\\"",
    "node",
    "operator",
    "\\"!=\\"",
    "node",
    "operator",
    "\\"===\\"",
    "node",
    "operator",
    "\\"!==\\"",
    "9",
    "node",
    "operator",
    "\\"<\\"",
    "node",
    "operator",
    "\\"<=\\"",
    "node",
    "operator",
    "\\">\\"",
    "node",
    "operator",
    "\\">=\\"",
    "node",
    "operator",
    "\\"in\\"",
    "node",
    "operator",
    "\\"instanceof\\"",
    "10",
    "node",
    "operator",
    "\\"<<\\"",
    "node",
    "operator",
    "\\">>\\"",
    "node",
    "operator",
    "\\">>>\\"",
    "11",
    "node",
    "operator",
    "\\"+\\"",
    "node",
    "operator",
    "\\"-\\"",
    "12",
    "node",
    "operator",
    "\\"*\\"",
    "node",
    "operator",
    "\\"/\\"",
    "node",
    "operator",
    "\\"%\\"",
    "13",
    "node",
    "operator",
    "\\"**\\"",
    "14",
    "Error",
    "\`Unknown operator precedence:\${",
    "}\`",
    "node",
    "operator",
    "node",
    "type",
    "AST_NODE_TYPES",
    "UnaryExpression",
    "node",
    "type",
    "AST_NODE_TYPES",
    "AwaitExpression",
    "15",
    "node",
    "type",
    "AST_NODE_TYPES",
    "UpdateExpression",
    "node",
    "prefix",
    "15",
    "16",
    "node",
    "type",
    "AST_NODE_TYPES",
    "NewExpression",
    "node",
    "type",
    "AST_NODE_TYPES",
    "CallExpression",
    "node",
    "type",
    "AST_NODE_TYPES",
    "ImportExpression",
    "node",
    "type",
    "AST_NODE_TYPES",
    "ChainExpression",
    "18",
    "node",
    "type",
    "AST_NODE_TYPES",
    "MemberExpression",
    "19",
    "node",
    "type",
    "AST_NODE_TYPES",
    "ArrowFunctionExpression",
    "2",
    "node",
    "type",
    "AST_NODE_TYPES",
    "TSAsExpression",
    "14.5",
    "Infinity",
    "EXTRACT_TOKENS",
    "AllVisitor",
    "ArrayExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ArrayExpression",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "elements",
    "length",
    "1",
    "ArrayPattern",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ArrayPattern",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "elements",
    "length",
    "1",
    "ArrowFunctionExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ArrowFunctionExpression",
    "node",
    "async",
    "this",
    "operators",
    "add",
    "\\"async\\"",
    "node",
    "generator",
    "this",
    "operators",
    "add",
    "\\"*\\"",
    "node",
    "params",
    "length",
    "1",
    "node",
    "params",
    "0",
    "type",
    "AST_NODE_TYPES",
    "Identifier",
    "node",
    "params",
    "0",
    "typeAnnotation",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
    "this",
    "operators",
    "add",
    "\\"=>\\"",
    "node",
    "body",
    "type",
    "AST_NODE_TYPES",
    "ObjectExpression",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "AssignmentExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "AssignmentExpression",
    "this",
    "operators",
    "add",
    "node",
    "operator",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "right",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "AssignmentPattern",
    "this",
    "ExtractTokensContext",
    "_node",
    "TSESTree",
    "AssignmentPattern",
    "this",
    "operators",
    "add",
    "\\"=\\"",
    "AwaitExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "AwaitExpression",
    "this",
    "operators",
    "add",
    "\\"await\\"",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "argument",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "BinaryExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "BinaryExpression",
    "this",
    "operators",
    "add",
    "node",
    "operator",
    "\\"operator\\"",
    "ESTree",
    "BinaryExpression",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "right",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "BlockStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "BreakStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"break\\"",
    "CallExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "CallExpression",
    "node",
    "optional",
    "this",
    "operators",
    "add",
    "\\"?.\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "arguments",
    "length",
    "1",
    "CatchClause",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "CatchClause",
    "this",
    "operators",
    "add",
    "\\"catch\\"",
    "node",
    "param",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "ChainExpression",
    "noop",
    "ClassBody",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "ClassDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ClassDeclaration",
    "this",
    "operators",
    "add",
    "\\"class\\"",
    "node",
    "superClass",
    "this",
    "operators",
    "add",
    "\\"extends\\"",
    "node",
    "implements",
    "this",
    "operators",
    "add",
    "\\"implements\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "implements",
    "length",
    "1",
    "node",
    "abstract",
    "this",
    "operators",
    "add",
    "\\"abstract\\"",
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
    "ClassExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ClassExpression",
    "this",
    "operators",
    "add",
    "\\"class\\"",
    "node",
    "superClass",
    "this",
    "operators",
    "add",
    "\\"extends\\"",
    "node",
    "implements",
    "this",
    "operators",
    "add",
    "\\"implements\\"",
    "node",
    "abstract",
    "this",
    "operators",
    "add",
    "\\"abstract\\"",
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
    "ConditionalExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ConditionalExpression",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "test",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\"?:\\"",
    "ContinueStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"continue\\"",
    "DebuggerStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"debugger\\"",
    "Decorator",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"@\\"",
    "DoWhileStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"do\\"",
    "this",
    "operators",
    "add",
    "\\"while()\\"",
    "EmptyStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\";\\"",
    "ExportAllDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ExportAllDeclaration",
    "this",
    "operators",
    "add",
    "\\"export\\"",
    "node",
    "exportKind",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"*\\"",
    "node",
    "exported",
    "this",
    "operators",
    "add",
    "\\"as\\"",
    "node",
    "source",
    "this",
    "operators",
    "add",
    "\\"from\\"",
    "node",
    "assertions",
    "node",
    "assertions",
    "length",
    "this",
    "operators",
    "add",
    "\\"assert\\"",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "ExportDefaultDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ExportDefaultDeclaration",
    "this",
    "operators",
    "add",
    "\\"export\\"",
    "node",
    "exportKind",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"default\\"",
    "ExportNamedDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ExportNamedDeclaration",
    "this",
    "operators",
    "add",
    "\\"export\\"",
    "node",
    "specifiers",
    "length",
    "node",
    "exportKind",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "specifiers",
    "length",
    "1",
    "node",
    "source",
    "this",
    "operators",
    "add",
    "\\"from\\"",
    "node",
    "assertions",
    "node",
    "assertions",
    "length",
    "this",
    "operators",
    "add",
    "\\"assert\\"",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "ExportSpecifier",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ExportSpecifier",
    "node",
    "exportKind",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"type\\"",
    "node",
    "local",
    "name",
    "node",
    "exported",
    "name",
    "this",
    "operators",
    "add",
    "\\"as\\"",
    "ExpressionStatement",
    "noop",
    "ForInStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"for()\\"",
    "this",
    "operators",
    "add",
    "\\"in\\"",
    "ForOfStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"for()\\"",
    "this",
    "operators",
    "add",
    "\\"of\\"",
    "ForStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"for()\\"",
    "this",
    "operators",
    "add",
    "\\";\\"",
    "2",
    "FunctionDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "FunctionDeclaration",
    "node",
    "async",
    "this",
    "operators",
    "add",
    "\\"async\\"",
    "this",
    "operators",
    "add",
    "\\"function\\"",
    "node",
    "generator",
    "this",
    "operators",
    "add",
    "\\"*\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
    "FunctionExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "FunctionExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "node",
    "async",
    "this",
    "operators",
    "add",
    "\\"async\\"",
    "parent",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "MethodDefinition",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "Property",
    "parent",
    "method",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSAbstractMethodDefinition",
    "this",
    "operators",
    "add",
    "\\"function\\"",
    "node",
    "generator",
    "this",
    "operators",
    "add",
    "\\"*\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
    "Identifier",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "Identifier",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "parent",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "Property",
    "parent",
    "shorthand",
    "parent",
    "value",
    "node",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "ImportSpecifier",
    "parent",
    "imported",
    "name",
    "node",
    "name",
    "parent",
    "local",
    "node",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "ExportSpecifier",
    "parent",
    "local",
    "name",
    "node",
    "name",
    "parent",
    "exported",
    "node",
    "this",
    "operands",
    "add",
    "node",
    "name",
    "IfStatement",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "IfStatement",
    "this",
    "operators",
    "add",
    "\\"if()\\"",
    "node",
    "alternate",
    "this",
    "operators",
    "add",
    "\\"else\\"",
    "ImportAttribute",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\":\\"",
    "ImportDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ImportDeclaration",
    "this",
    "operators",
    "add",
    "\\"import\\"",
    "node",
    "importKind",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"type\\"",
    "node",
    "specifiers",
    "some",
    "spec",
    "spec",
    "type",
    "AST_NODE_TYPES",
    "ImportSpecifier",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "specifiers",
    "length",
    "1",
    "node",
    "specifiers",
    "length",
    "this",
    "operators",
    "add",
    "\\"from\\"",
    "node",
    "assertions",
    "node",
    "assertions",
    "length",
    "this",
    "operators",
    "add",
    "\\"assert\\"",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "ImportDefaultSpecifier",
    "noop",
    "ImportExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ImportExpression",
    "this",
    "operators",
    "add",
    "\\"import\\"",
    "node",
    "attributes",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "ImportNamespaceSpecifier",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"*\\"",
    "this",
    "operators",
    "add",
    "\\"as\\"",
    "ImportSpecifier",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ImportSpecifier",
    "node",
    "importKind",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"type\\"",
    "node",
    "local",
    "name",
    "node",
    "imported",
    "name",
    "this",
    "operators",
    "add",
    "\\"as\\"",
    "JSXAttribute",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"=\\"",
    "JSXClosingElement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"</\\"",
    "this",
    "operators",
    "add",
    "\\">\\"",
    "JSXClosingFragment",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"</\\"",
    "this",
    "operators",
    "add",
    "\\">\\"",
    "JSXElement",
    "noop",
    "JSXEmptyExpression",
    "noop",
    "JSXExpressionContainer",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "JSXFragment",
    "noop",
    "JSXIdentifier",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "JSXIdentifier",
    "this",
    "operands",
    "add",
    "node",
    "name",
    "JSXMemberExpression",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\".\\"",
    "JSXNamespacedName",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\":\\"",
    "JSXOpeningElement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"<\\"",
    "this",
    "operators",
    "add",
    "\\">\\"",
    "JSXOpeningFragment",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"<\\"",
    "this",
    "operators",
    "add",
    "\\">\\"",
    "JSXSpreadAttribute",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "this",
    "operators",
    "add",
    "\\"...\\"",
    "JSXSpreadChild",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "this",
    "operators",
    "add",
    "\\"...\\"",
    "JSXText",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "JSXText",
    "this",
    "operands",
    "add",
    "JSON",
    "stringify",
    "node",
    "value",
    "LabeledStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\":\\"",
    "Literal",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "Literal",
    "\\"bigint\\"",
    "node",
    "node",
    "bigint",
    "this",
    "operands",
    "add",
    "\`\${",
    "}n\`",
    "node",
    "bigint",
    "\\"regex\\"",
    "node",
    "node",
    "regex",
    "this",
    "operands",
    "add",
    "\`/\${",
    "}/\${",
    "}\`",
    "node",
    "regex",
    "pattern",
    "node",
    "regex",
    "flags",
    "this",
    "operands",
    "add",
    "JSON",
    "stringify",
    "node",
    "value",
    "LogicalExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "LogicalExpression",
    "this",
    "operators",
    "add",
    "node",
    "operator",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "right",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "MemberExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "MemberExpression",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "object",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "node",
    "optional",
    "this",
    "operators",
    "add",
    "\\"?.\\"",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "this",
    "operators",
    "add",
    "\\".\\"",
    "MetaProperty",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\".\\"",
    "MethodDefinition",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "MethodDefinition",
    "node",
    "accessibility",
    "this",
    "operators",
    "add",
    "node",
    "accessibility",
    "node",
    "static",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "node",
    "kind",
    "\\"get\\"",
    "node",
    "kind",
    "\\"set\\"",
    "this",
    "operators",
    "add",
    "node",
    "kind",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "NewExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "NewExpression",
    "this",
    "operators",
    "add",
    "\\"new\\"",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "callee",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "arguments",
    "length",
    "1",
    "ObjectExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ObjectExpression",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "properties",
    "length",
    "1",
    "ObjectPattern",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ObjectPattern",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "properties",
    "length",
    "1",
    "PrivateIdentifier",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "PrivateIdentifier",
    "this",
    "operands",
    "add",
    "\`#\${",
    "}\`",
    "node",
    "name",
    "Program",
    "noop",
    "Property",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "Property",
    "node",
    "kind",
    "\\"get\\"",
    "node",
    "kind",
    "\\"set\\"",
    "this",
    "operators",
    "add",
    "node",
    "kind",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "shorthand",
    "node",
    "method",
    "this",
    "operators",
    "add",
    "\\":\\"",
    "PropertyDefinition",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "PropertyDefinition",
    "node",
    "accessibility",
    "this",
    "operators",
    "add",
    "node",
    "accessibility",
    "node",
    "static",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "node",
    "readonly",
    "this",
    "operators",
    "add",
    "\\"readonly\\"",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "value",
    "this",
    "operators",
    "add",
    "\\"=\\"",
    "RestElement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"...\\"",
    "ReturnStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"return\\"",
    "SequenceExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "SequenceExpression",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "expressions",
    "length",
    "1",
    "SpreadElement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"...\\"",
    "StaticBlock",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "Super",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"super\\"",
    "SwitchCase",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "SwitchCase",
    "node",
    "test",
    "this",
    "operators",
    "add",
    "\\"case\\"",
    "this",
    "operators",
    "add",
    "\\"default\\"",
    "this",
    "operators",
    "add",
    "\\":\\"",
    "SwitchStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"switch()\\"",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "TaggedTemplateExpression",
    "noop",
    "TemplateElement",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TemplateElement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "open",
    "\\"\`\\"",
    "close",
    "\\"\`\\"",
    "parent",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TemplateLiteral",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSTemplateLiteralType",
    "index",
    "parent",
    "quasis",
    "indexOf",
    "node",
    "index",
    "0",
    "open",
    "\\"}\\"",
    "index",
    "parent",
    "quasis",
    "length",
    "1",
    "close",
    "\\"\${\\"",
    "this",
    "operands",
    "add",
    "\`\${",
    "}\${",
    "}\${",
    "}\`",
    "open",
    "node",
    "value",
    "cooked",
    "close",
    "TemplateLiteral",
    "noop",
    "ThisExpression",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"this\\"",
    "ThrowStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"throw\\"",
    "TryStatement",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TryStatement",
    "this",
    "operators",
    "add",
    "\\"try\\"",
    "node",
    "finalizer",
    "this",
    "operators",
    "add",
    "\\"finally\\"",
    "UnaryExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "UnaryExpression",
    "this",
    "operators",
    "add",
    "node",
    "operator",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "argument",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "UpdateExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "UpdateExpression",
    "this",
    "operators",
    "add",
    "node",
    "operator",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "argument",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "VariableDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "VariableDeclaration",
    "this",
    "operators",
    "add",
    "node",
    "kind",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "declarations",
    "length",
    "1",
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
    "VariableDeclarator",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "VariableDeclarator",
    "node",
    "init",
    "this",
    "operators",
    "add",
    "\\"=\\"",
    "WhileStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"while()\\"",
    "WithStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"with()\\"",
    "YieldExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "YieldExpression",
    "this",
    "operators",
    "add",
    "\\"yield\\"",
    "node",
    "delegate",
    "this",
    "operators",
    "add",
    "\\"*\\"",
    "node",
    "argument",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "argument",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "TSAbstractKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"abstract\\"",
    "TSAbstractMethodDefinition",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSAbstractMethodDefinition",
    "this",
    "operators",
    "add",
    "\\"abstract\\"",
    "node",
    "accessibility",
    "this",
    "operators",
    "add",
    "node",
    "accessibility",
    "node",
    "static",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "node",
    "kind",
    "\\"get\\"",
    "node",
    "kind",
    "\\"set\\"",
    "this",
    "operators",
    "add",
    "node",
    "kind",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "TSAbstractPropertyDefinition",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSAbstractPropertyDefinition",
    "this",
    "operators",
    "add",
    "\\"abstract\\"",
    "node",
    "accessibility",
    "this",
    "operators",
    "add",
    "node",
    "accessibility",
    "node",
    "static",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "value",
    "this",
    "operators",
    "add",
    "\\"=\\"",
    "TSAnyKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"any\\"",
    "TSArrayType",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "TSAsExpression",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"as\\"",
    "TSAsyncKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"async\\"",
    "TSBigIntKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"bigint\\"",
    "TSBooleanKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"boolean\\"",
    "TSCallSignatureDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSCallSignatureDeclaration",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
    "TSClassImplements",
    "noop",
    "TSConditionalType",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"extends\\"",
    "this",
    "operators",
    "add",
    "\\"?:\\"",
    "TSConstructSignatureDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSConstructSignatureDeclaration",
    "this",
    "operators",
    "add",
    "\\"new\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
    "TSConstructorType",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSConstructorType",
    "this",
    "operators",
    "add",
    "\\"new\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
    "TSDeclareFunction",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSDeclareFunction",
    "node",
    "async",
    "this",
    "operators",
    "add",
    "\\"async\\"",
    "this",
    "operators",
    "add",
    "\\"function\\"",
    "node",
    "generator",
    "this",
    "operators",
    "add",
    "\\"*\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
    "TSDeclareKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
    "TSEmptyBodyFunctionExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSEmptyBodyFunctionExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "node",
    "async",
    "this",
    "operators",
    "add",
    "\\"async\\"",
    "parent",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "MethodDefinition",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "Property",
    "parent",
    "method",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSAbstractMethodDefinition",
    "this",
    "operators",
    "add",
    "\\"function\\"",
    "node",
    "generator",
    "this",
    "operators",
    "add",
    "\\"*\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
    "TSEnumDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSEnumDeclaration",
    "node",
    "const",
    "this",
    "operators",
    "add",
    "\\"const\\"",
    "this",
    "operators",
    "add",
    "\\"enum\\"",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "members",
    "length",
    "1",
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
    "TSEnumMember",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSEnumMember",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "initializer",
    "this",
    "operators",
    "add",
    "\\"=\\"",
    "TSExportAssignment",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"export\\"",
    "this",
    "operators",
    "add",
    "\\"=\\"",
    "TSExportKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"export\\"",
    "TSExternalModuleReference",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"require\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "TSFunctionType",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSFunctionType",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
    "TSImportEqualsDeclaration",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"import\\"",
    "this",
    "operators",
    "add",
    "\\"=\\"",
    "TSImportType",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSImportType",
    "this",
    "operators",
    "add",
    "\\"import\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "node",
    "qualifier",
    "this",
    "operators",
    "add",
    "\\".\\"",
    "TSIndexSignature",
    "this",
    "ExtractTokensContext",
    "node",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "readonly",
    "this",
    "operators",
    "add",
    "\\"readonly\\"",
    "node",
    "static",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "node",
    "export",
    "this",
    "operators",
    "add",
    "\\"export\\"",
    "TSIndexedAccessType",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "TSInferType",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"infer\\"",
    "TSInterfaceBody",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "TSInterfaceDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSInterfaceDeclaration",
    "this",
    "operators",
    "add",
    "\\"interface\\"",
    "node",
    "extends",
    "this",
    "operators",
    "add",
    "\\"extends\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "extends",
    "length",
    "1",
    "node",
    "implements",
    "this",
    "operators",
    "add",
    "\\"implements\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "implements",
    "length",
    "1",
    "node",
    "abstract",
    "this",
    "operators",
    "add",
    "\\"abstract\\"",
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
    "TSInterfaceHeritage",
    "noop",
    "TSIntersectionType",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSIntersectionType",
    "this",
    "operators",
    "add",
    "\\"&\\"",
    "node",
    "types",
    "length",
    "1",
    "TSIntrinsicKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"intrinsic\\"",
    "TSLiteralType",
    "noop",
    "TSMappedType",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSMappedType",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "node",
    "readonly",
    "node",
    "readonly",
    "\\"string\\"",
    "this",
    "operators",
    "add",
    "node",
    "readonly",
    "this",
    "operators",
    "add",
    "\\"readonly\\"",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "optional",
    "node",
    "optional",
    "\\"string\\"",
    "this",
    "operators",
    "add",
    "node",
    "optional",
    "this",
    "operators",
    "add",
    "\\"?\\"",
    "this",
    "operators",
    "add",
    "\\":\\"",
    "TSMethodSignature",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSMethodSignature",
    "node",
    "accessibility",
    "this",
    "operators",
    "add",
    "node",
    "accessibility",
    "node",
    "readonly",
    "this",
    "operators",
    "add",
    "\\"readonly\\"",
    "node",
    "static",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "node",
    "export",
    "this",
    "operators",
    "add",
    "\\"export\\"",
    "node",
    "kind",
    "\\"get\\"",
    "node",
    "kind",
    "\\"set\\"",
    "this",
    "operators",
    "add",
    "node",
    "kind",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "optional",
    "this",
    "operators",
    "add",
    "\\"?\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
    "TSModuleBlock",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "TSModuleDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSModuleDeclaration",
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
    "node",
    "global",
    "this",
    "operators",
    "add",
    "\\"module\\"",
    "TSNamespaceExportDeclaration",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"export\\"",
    "this",
    "operators",
    "add",
    "\\"as\\"",
    "this",
    "operators",
    "add",
    "\\"namespace\\"",
    "TSNamedTupleMember",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSNamedTupleMember",
    "node",
    "optional",
    "this",
    "operators",
    "add",
    "\\"?\\"",
    "this",
    "operators",
    "add",
    "\\":\\"",
    "TSNeverKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"never\\"",
    "TSNonNullExpression",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"!\\"",
    "TSNullKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"null\\"",
    "TSNumberKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"number\\"",
    "TSObjectKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"object\\"",
    "TSOptionalType",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"?\\"",
    "TSParameterProperty",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSParameterProperty",
    "node",
    "accessibility",
    "this",
    "operators",
    "add",
    "node",
    "accessibility",
    "node",
    "readonly",
    "this",
    "operators",
    "add",
    "\\"readonly\\"",
    "node",
    "static",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "node",
    "export",
    "this",
    "operators",
    "add",
    "\\"export\\"",
    "TSPrivateKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"private\\"",
    "TSPropertySignature",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSPropertySignature",
    "node",
    "accessibility",
    "this",
    "operators",
    "add",
    "node",
    "accessibility",
    "node",
    "readonly",
    "this",
    "operators",
    "add",
    "\\"readonly\\"",
    "node",
    "static",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "node",
    "export",
    "this",
    "operators",
    "add",
    "\\"export\\"",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "optional",
    "this",
    "operators",
    "add",
    "\\"?\\"",
    "TSProtectedKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"protected\\"",
    "TSPublicKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"public\\"",
    "TSQualifiedName",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\".\\"",
    "TSReadonlyKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"readonly\\"",
    "TSRestType",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"...\\"",
    "TSStaticKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "TSStringKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"string\\"",
    "TSSymbolKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"symbol\\"",
    "TSTemplateLiteralType",
    "noop",
    "TSThisType",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"this\\"",
    "TSTupleType",
    "this",
    "ExtractTokensContext",
    "node",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "elementTypes",
    "length",
    "1",
    "TSTypeAliasDeclaration",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"=\\"",
    "TSTypeAnnotation",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSTypeAnnotation",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "parent",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSFunctionType",
    "parent",
    "returnType",
    "node",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSConstructorType",
    "parent",
    "returnType",
    "node",
    "this",
    "operators",
    "add",
    "\\"=>\\"",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSTypePredicate",
    "this",
    "operators",
    "add",
    "\\":\\"",
    "TSTypeAssertion",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"<>\\"",
    "TSTypeLiteral",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "TSTypeOperator",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"keyof\\"",
    "TSTypeParameter",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSTypeParameter",
    "parent",
    "node",
    "constraint",
    "parent",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSMappedType",
    "parent",
    "typeParameter",
    "node",
    "this",
    "operators",
    "add",
    "\\"in\\"",
    "this",
    "operators",
    "add",
    "\\"extends\\"",
    "node",
    "default",
    "this",
    "operators",
    "add",
    "\\"=\\"",
    "TSTypeParameterDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSTypeParameterDeclaration",
    "this",
    "operators",
    "add",
    "\\"<>\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
    "TSTypeParameterInstantiation",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSTypeParameterInstantiation",
    "this",
    "operators",
    "add",
    "\\"<>\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
    "TSTypePredicate",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"is\\"",
    "TSTypeQuery",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"typeof\\"",
    "TSTypeReference",
    "noop",
    "TSUndefinedKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"undefined\\"",
    "TSUnionType",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSUnionType",
    "this",
    "operators",
    "add",
    "\\"|\\"",
    "node",
    "types",
    "length",
    "1",
    "TSUnknownKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"unknown\\"",
    "TSVoidKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"void\\"",
    "extractTokens",
    "node",
    "ESTree",
    "Node",
    "TSESTree",
    "Node",
    "ExtractTokensResult",
    "context",
    "ExtractTokensContext",
    "walk",
    "node",
    "TSESTree",
    "Node",
    "node",
    "TSESTree",
    "Node",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "extract",
    "EXTRACT_TOKENS",
    "node",
    "type",
    "any",
    "extract",
    "Object",
    "prototype",
    "hasOwnProperty",
    "call",
    "EXTRACT_TOKENS",
    "node",
    "type",
    "extract",
    "call",
    "context",
    "node",
    "parent",
    "context",
  ],
  "operators": Array [
    "import",
    "{}",
    "from",
    "import",
    "type",
    "{}",
    "from",
    "import",
    "type",
    "from",
    "*",
    "as",
    "import",
    "{}",
    "from",
    "import",
    "type",
    "{}",
    "from",
    "type",
    "=",
    "<>",
    "type",
    "=",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "[]",
    ".",
    "[]",
    ".",
    "[]",
    ".",
    "[]",
    ".",
    "[]",
    ".",
    "[]",
    ".",
    "export",
    "type",
    "=",
    "{}",
    "readonly",
    ":",
    "<>",
    "readonly",
    ":",
    "<>",
    "export",
    "class",
    "<>",
    "{}",
    "private",
    "readonly",
    "=",
    ":",
    "[]",
    "[]",
    "private",
    "readonly",
    "=",
    "new",
    "()",
    "<>",
    "public",
    "()",
    ",",
    ":",
    "=",
    ":",
    "{}",
    "if()",
    "else",
    "===",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "{}",
    "for()",
    ";",
    ";",
    "let",
    "=",
    "<",
    "++",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "public",
    "get",
    "()",
    ":",
    "[]",
    "{}",
    "return",
    ".",
    "public",
    "get",
    "()",
    ":",
    "{}",
    "return",
    ".",
    ".",
    "public",
    "get",
    "()",
    ":",
    "{}",
    "return",
    ".",
    ".",
    "class",
    "implements",
    "{}",
    "public",
    "readonly",
    "=",
    "new",
    "()",
    "<>",
    "public",
    "readonly",
    "=",
    "new",
    "()",
    "<>",
    "function",
    "()",
    ":",
    "{}",
    "function",
    "()",
    ":",
    ".",
    ":",
    "{}",
    "if()",
    "===",
    ".",
    ".",
    "{}",
    "return",
    "if()",
    "||",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
    "{}",
    "return",
    "if()",
    "===",
    ".",
    ".",
    "{}",
    "return",
    "if()",
    "===",
    ".",
    ".",
    "{}",
    "if()",
    "||",
    "===",
    ".",
    "===",
    ".",
    "{}",
    "return",
    "if()",
    "===",
    ".",
    "{}",
    "return",
    "throw",
    "new",
    "()",
    ".",
    "if()",
    "===",
    ".",
    ".",
    "{}",
    "if()",
    "===",
    ".",
    "{}",
    "return",
    "if()",
    "===",
    ".",
    "{}",
    "return",
    "if()",
    "===",
    ".",
    "{}",
    "return",
    "if()",
    "||",
    "||",
    "||",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
    "{}",
    "return",
    "if()",
    "||",
    "||",
    "||",
    "||",
    "||",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
    "{}",
    "return",
    "if()",
    "||",
    "||",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
    "{}",
    "return",
    "if()",
    "||",
    "===",
    ".",
    "===",
    ".",
    "{}",
    "return",
    "if()",
    "||",
    "||",
    "===",
    ".",
    "===",
    ".",
    "===",
    ".",
    "{}",
    "return",
    "if()",
    "===",
    ".",
    "{}",
    "return",
    "throw",
    "new",
    "()",
    ".",
    "if()",
    "||",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
    "{}",
    "return",
    "if()",
    "===",
    ".",
    ".",
    "{}",
    "if()",
    ".",
    "{}",
    "return",
    "return",
    "if()",
    "||",
    "||",
    "||",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
    "{}",
    "return",
    "if()",
    "===",
    ".",
    ".",
    "{}",
    "return",
    "if()",
    "===",
    ".",
    ".",
    "{}",
    "return",
    "if()",
    "===",
    ".",
    ".",
    "{}",
    "return",
    "return",
    "const",
    "=",
    ":",
    "{}",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "||",
    "||",
    "!==",
    ".",
    ".",
    "!==",
    ".",
    "[]",
    ".",
    ".",
    ".",
    "[]",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ".",
    ".",
    "if()",
    "===",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ">=",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ">",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "as",
    ".",
    "[]",
    ".",
    "if()",
    ">=",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ":",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ">=",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "&&",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    ".",
    "{}",
    "if()",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "&&",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "!==",
    ".",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ":",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ",",
    ":",
    ":",
    ".",
    ":",
    "|",
    ".",
    "{}",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "||",
    "!",
    "&&",
    "&&",
    "()",
    "!==",
    ".",
    ".",
    "||",
    "!==",
    ".",
    ".",
    "!",
    ".",
    "!==",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ",",
    ":",
    ":",
    ".",
    ":",
    "|",
    ".",
    "{}",
    "if()",
    "{}",
    "if()",
    "&&",
    "&&",
    "===",
    ".",
    ".",
    ".",
    "===",
    ".",
    "return",
    "if()",
    "&&",
    "&&",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
    ".",
    "===",
    ".",
    "return",
    "if()",
    "&&",
    "&&",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
    ".",
    "===",
    ".",
    "return",
    "()",
    ".",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "()",
    ".",
    ".",
    "=>",
    "===",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "&&",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    ":",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "!==",
    ".",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    ":",
    ":",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    ":",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    "else",
    "&&",
    "in",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    "if()",
    "else",
    "&&",
    "in",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ">=",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ">",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "else",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "else",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    "||",
    "===",
    ".",
    "===",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ">=",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    ":",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    "||",
    "===",
    ".",
    "===",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "&&",
    "!",
    ".",
    "!",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    "else",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    ":",
    "()",
    ",",
    ",",
    ":",
    ":",
    ".",
    ":",
    "|",
    ".",
    "{}",
    "let",
    "=",
    "let",
    "=",
    "if()",
    "&&",
    "()",
    "||",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
    "{}",
    "const",
    "=",
    "()",
    ".",
    ".",
    "if()",
    ">",
    "{}",
    "=",
    "if()",
    "<",
    "-",
    ".",
    ".",
    "{}",
    "=",
    "()",
    ".",
    ".",
    ".",
    ".",
    ":",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ">=",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ">=",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "&&",
    ".",
    ">",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    "||",
    "===",
    ".",
    "===",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    ":",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ",",
    ":",
    ":",
    ".",
    ":",
    "|",
    ".",
    "{}",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "||",
    "!",
    "&&",
    "&&",
    "()",
    "!==",
    ".",
    ".",
    "||",
    "!==",
    ".",
    ".",
    "!",
    ".",
    "!==",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    ":",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    ":",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "if()",
    "===",
    "typeof",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "if()",
    "===",
    "typeof",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    "||",
    "===",
    ".",
    "===",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    "!",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    ":",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ",",
    ":",
    ":",
    ".",
    ":",
    "|",
    ".",
    "{}",
    "if()",
    "{}",
    "if()",
    "||",
    "&&",
    "===",
    ".",
    ".",
    "===",
    ".",
    "&&",
    "===",
    ".",
    ".",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "return",
    "if()",
    "===",
    ".",
    ".",
    "{}",
    "return",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "{}",
    "if()",
    "else",
    "&&",
    "&&",
    "===",
    ".",
    ".",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    ":",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "export",
    "function",
    "()",
    ":",
    "|",
    ".",
    ".",
    ":",
    "{}",
    "const",
    "=",
    "new",
    "()",
    "()",
    ",",
    "as",
    ".",
    "()",
    ",",
    "=>",
    ":",
    ".",
    ":",
    "|",
    ".",
    "{}",
    "const",
    "=",
    "as",
    "[]",
    ".",
    "if()",
    "&&",
    "()",
    ",",
    ".",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ",",
    ",",
    ".",
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
ArrayExpression(
        this: ExtractTokensContext,
        node: TSESTree.ArrayExpression,
    ) {
        this.operators.add("[]")
        this.operators.add(",", node.elements.length - 1)
    }
\` 1`] = `
Object {
  "operands": Array [
    "ArrayExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ArrayExpression",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "elements",
    "length",
    "1",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
ArrayPattern(this: ExtractTokensContext, node: TSESTree.ArrayPattern) {
        this.operators.add("[]")
        this.operators.add(",", node.elements.length - 1)
    }
\` 1`] = `
Object {
  "operands": Array [
    "ArrayPattern",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ArrayPattern",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "elements",
    "length",
    "1",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
ArrowFunctionExpression(
        this: ExtractTokensContext,
        node: TSESTree.ArrowFunctionExpression,
    ) {
        if (node.async) {
            this.operators.add("async")
        }
        if (node.generator) {
            // It cannot actually be used.
            this.operators.add("*")
        }
        if (
            node.params.length !== 1 ||
            node.params[0].type !== AST_NODE_TYPES.Identifier ||
            node.params[0].typeAnnotation
        ) {
            this.operators.add("()")
        }
        this.operators.add(",", node.params.length - 1)

        this.operators.add("=>")

        if (node.body.type === AST_NODE_TYPES.ObjectExpression) {
            this.operators.add("()")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "ArrowFunctionExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ArrowFunctionExpression",
    "node",
    "async",
    "this",
    "operators",
    "add",
    "\\"async\\"",
    "node",
    "generator",
    "this",
    "operators",
    "add",
    "\\"*\\"",
    "node",
    "params",
    "length",
    "1",
    "node",
    "params",
    "0",
    "type",
    "AST_NODE_TYPES",
    "Identifier",
    "node",
    "params",
    "0",
    "typeAnnotation",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
    "this",
    "operators",
    "add",
    "\\"=>\\"",
    "node",
    "body",
    "type",
    "AST_NODE_TYPES",
    "ObjectExpression",
    "this",
    "operators",
    "add",
    "\\"()\\"",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "||",
    "||",
    "!==",
    ".",
    ".",
    "!==",
    ".",
    "[]",
    ".",
    ".",
    ".",
    "[]",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ".",
    ".",
    "if()",
    "===",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
AssignmentExpression(
        this: ExtractTokensContext,
        node: TSESTree.AssignmentExpression,
    ) {
        this.operators.add(node.operator)

        if (getPrecedence(node) >= getPrecedence(node.right)) {
            this.operators.add("()")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "AssignmentExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "AssignmentExpression",
    "this",
    "operators",
    "add",
    "node",
    "operator",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "right",
    "this",
    "operators",
    "add",
    "\\"()\\"",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ">=",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
AssignmentPattern(
        this: ExtractTokensContext,
        _node: TSESTree.AssignmentPattern,
    ) {
        this.operators.add("=")
    }
\` 1`] = `
Object {
  "operands": Array [
    "AssignmentPattern",
    "this",
    "ExtractTokensContext",
    "_node",
    "TSESTree",
    "AssignmentPattern",
    "this",
    "operators",
    "add",
    "\\"=\\"",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
AwaitExpression(
        this: ExtractTokensContext,
        node: TSESTree.AwaitExpression,
    ) {
        this.operators.add("await")

        if (getPrecedence(node) > getPrecedence(node.argument)) {
            this.operators.add("()")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "AwaitExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "AwaitExpression",
    "this",
    "operators",
    "add",
    "\\"await\\"",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "argument",
    "this",
    "operators",
    "add",
    "\\"()\\"",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ">",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
BinaryExpression(
        this: ExtractTokensContext,
        node: TSESTree.BinaryExpression,
    ) {
        this.operators.add(node.operator as ESTree.BinaryExpression["operator"])

        if (getPrecedence(node) >= getPrecedence(node.right)) {
            this.operators.add("()")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "BinaryExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "BinaryExpression",
    "this",
    "operators",
    "add",
    "node",
    "operator",
    "\\"operator\\"",
    "ESTree",
    "BinaryExpression",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "right",
    "this",
    "operators",
    "add",
    "\\"()\\"",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "as",
    ".",
    "[]",
    ".",
    "if()",
    ">=",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
BlockStatement(this: ExtractTokensContext) {
        this.operators.add("{}")
    }
\` 1`] = `
Object {
  "operands": Array [
    "BlockStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
BreakStatement(this: ExtractTokensContext) {
        this.operators.add("break")
    }
\` 1`] = `
Object {
  "operands": Array [
    "BreakStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"break\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
CallExpression(this: ExtractTokensContext, node: TSESTree.CallExpression) {
        if (node.optional) {
            this.operators.add("?.")
        }
        this.operators.add("()")
        this.operators.add(",", node.arguments.length - 1)
    }
\` 1`] = `
Object {
  "operands": Array [
    "CallExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "CallExpression",
    "node",
    "optional",
    "this",
    "operators",
    "add",
    "\\"?.\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "arguments",
    "length",
    "1",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
CatchClause(this: ExtractTokensContext, node: TSESTree.CatchClause) {
        this.operators.add("catch")
        if (node.param) {
            this.operators.add("()")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "CatchClause",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "CatchClause",
    "this",
    "operators",
    "add",
    "\\"catch\\"",
    "node",
    "param",
    "this",
    "operators",
    "add",
    "\\"()\\"",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
ChainExpression: noop
\` 1`] = `
Object {
  "operands": Array [
    "ChainExpression",
    "noop",
  ],
  "operators": Array [
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
ClassBody(this: ExtractTokensContext) {
        this.operators.add("{}")
    }
\` 1`] = `
Object {
  "operands": Array [
    "ClassBody",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
ClassDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.ClassDeclaration,
    ) {
        this.operators.add("class")
        if (node.superClass) {
            this.operators.add("extends")
        }
        if (node.implements) {
            this.operators.add("implements")
            this.operators.add(",", node.implements.length - 1)
        }
        if (node.abstract) {
            this.operators.add("abstract")
        }
        if (node.declare) this.operators.add("declare")
    }
\` 1`] = `
Object {
  "operands": Array [
    "ClassDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ClassDeclaration",
    "this",
    "operators",
    "add",
    "\\"class\\"",
    "node",
    "superClass",
    "this",
    "operators",
    "add",
    "\\"extends\\"",
    "node",
    "implements",
    "this",
    "operators",
    "add",
    "\\"implements\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "implements",
    "length",
    "1",
    "node",
    "abstract",
    "this",
    "operators",
    "add",
    "\\"abstract\\"",
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
ClassExpression(
        this: ExtractTokensContext,
        node: TSESTree.ClassExpression,
    ) {
        this.operators.add("class")
        if (node.superClass) {
            this.operators.add("extends")
        }
        if (node.implements) {
            this.operators.add("implements")
        }
        if (node.abstract) {
            this.operators.add("abstract")
        }
        if (node.declare) this.operators.add("declare")
    }
\` 1`] = `
Object {
  "operands": Array [
    "ClassExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ClassExpression",
    "this",
    "operators",
    "add",
    "\\"class\\"",
    "node",
    "superClass",
    "this",
    "operators",
    "add",
    "\\"extends\\"",
    "node",
    "implements",
    "this",
    "operators",
    "add",
    "\\"implements\\"",
    "node",
    "abstract",
    "this",
    "operators",
    "add",
    "\\"abstract\\"",
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
ConditionalExpression(
        this: ExtractTokensContext,
        node: TSESTree.ConditionalExpression,
    ) {
        if (getPrecedence(node) >= getPrecedence(node.test)) {
            this.operators.add("()")
        }
        this.operators.add("?:")
    }
\` 1`] = `
Object {
  "operands": Array [
    "ConditionalExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ConditionalExpression",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "test",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\"?:\\"",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ">=",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
ContinueStatement(this: ExtractTokensContext) {
        this.operators.add("continue")
    }
\` 1`] = `
Object {
  "operands": Array [
    "ContinueStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"continue\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
DebuggerStatement(this: ExtractTokensContext) {
        this.operators.add("debugger")
    }
\` 1`] = `
Object {
  "operands": Array [
    "DebuggerStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"debugger\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
Decorator(this: ExtractTokensContext) {
        this.operators.add("@")
    }
\` 1`] = `
Object {
  "operands": Array [
    "Decorator",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"@\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
DoWhileStatement(this: ExtractTokensContext) {
        this.operators.add("do")
        this.operators.add("while()")
    }
\` 1`] = `
Object {
  "operands": Array [
    "DoWhileStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"do\\"",
    "this",
    "operators",
    "add",
    "\\"while()\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
EmptyStatement(this: ExtractTokensContext) {
        this.operators.add(";")
    }
\` 1`] = `
Object {
  "operands": Array [
    "EmptyStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\";\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
ExportAllDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.ExportAllDeclaration,
    ) {
        this.operators.add("export")
        if (node.exportKind === "type") {
            this.operators.add("type")
        }
        this.operators.add("*")
        if (node.exported) {
            this.operators.add("as")
        }
        if (node.source) {
            this.operators.add("from")
        }
        if (node.assertions && node.assertions.length) {
            this.operators.add("assert")
            this.operators.add("{}")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "ExportAllDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ExportAllDeclaration",
    "this",
    "operators",
    "add",
    "\\"export\\"",
    "node",
    "exportKind",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"*\\"",
    "node",
    "exported",
    "this",
    "operators",
    "add",
    "\\"as\\"",
    "node",
    "source",
    "this",
    "operators",
    "add",
    "\\"from\\"",
    "node",
    "assertions",
    "node",
    "assertions",
    "length",
    "this",
    "operators",
    "add",
    "\\"assert\\"",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "&&",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
ExportDefaultDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.ExportDefaultDeclaration,
    ) {
        this.operators.add("export")
        if (node.exportKind === "type") {
            this.operators.add("type")
        }
        this.operators.add("default")
    }
\` 1`] = `
Object {
  "operands": Array [
    "ExportDefaultDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ExportDefaultDeclaration",
    "this",
    "operators",
    "add",
    "\\"export\\"",
    "node",
    "exportKind",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"default\\"",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
ExportNamedDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.ExportNamedDeclaration,
    ) {
        this.operators.add("export")
        if (node.specifiers.length) {
            if (node.exportKind === "type") {
                this.operators.add("type")
            }
            this.operators.add("{}")
            this.operators.add(",", node.specifiers.length - 1)
        }
        if (node.source) {
            this.operators.add("from")
        }
        if (node.assertions && node.assertions.length) {
            this.operators.add("assert")
            this.operators.add("{}")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "ExportNamedDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ExportNamedDeclaration",
    "this",
    "operators",
    "add",
    "\\"export\\"",
    "node",
    "specifiers",
    "length",
    "node",
    "exportKind",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "specifiers",
    "length",
    "1",
    "node",
    "source",
    "this",
    "operators",
    "add",
    "\\"from\\"",
    "node",
    "assertions",
    "node",
    "assertions",
    "length",
    "this",
    "operators",
    "add",
    "\\"assert\\"",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    ".",
    "{}",
    "if()",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "&&",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
ExportSpecifier(
        this: ExtractTokensContext,
        node: TSESTree.ExportSpecifier,
    ) {
        if (node.exportKind === "type") {
            this.operators.add("type")
        }
        if (node.local.name !== node.exported.name) {
            this.operators.add("as")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "ExportSpecifier",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ExportSpecifier",
    "node",
    "exportKind",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"type\\"",
    "node",
    "local",
    "name",
    "node",
    "exported",
    "name",
    "this",
    "operators",
    "add",
    "\\"as\\"",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "!==",
    ".",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
ExpressionStatement: noop
\` 1`] = `
Object {
  "operands": Array [
    "ExpressionStatement",
    "noop",
  ],
  "operators": Array [
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
ForInStatement(this: ExtractTokensContext) {
        this.operators.add("for()")
        this.operators.add("in")
    }
\` 1`] = `
Object {
  "operands": Array [
    "ForInStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"for()\\"",
    "this",
    "operators",
    "add",
    "\\"in\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
ForOfStatement(this: ExtractTokensContext) {
        this.operators.add("for()")
        this.operators.add("of")
    }
\` 1`] = `
Object {
  "operands": Array [
    "ForOfStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"for()\\"",
    "this",
    "operators",
    "add",
    "\\"of\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
ForStatement(this: ExtractTokensContext) {
        this.operators.add("for()")
        this.operators.add(";", 2)
    }
\` 1`] = `
Object {
  "operands": Array [
    "ForStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"for()\\"",
    "this",
    "operators",
    "add",
    "\\";\\"",
    "2",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
FunctionDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.FunctionDeclaration,
    ) {
        if (node.async) {
            this.operators.add("async")
        }
        this.operators.add("function")
        if (node.generator) {
            this.operators.add("*")
        }
        this.operators.add("()")
        this.operators.add(",", node.params.length - 1)

        if (node.declare) this.operators.add("declare")
    }
\` 1`] = `
Object {
  "operands": Array [
    "FunctionDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "FunctionDeclaration",
    "node",
    "async",
    "this",
    "operators",
    "add",
    "\\"async\\"",
    "this",
    "operators",
    "add",
    "\\"function\\"",
    "node",
    "generator",
    "this",
    "operators",
    "add",
    "\\"*\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
FunctionExpression(
        this: ExtractTokensContext,
        node: TSESTree.FunctionExpression,
        parent: TSESTree.Node | null,
    ) {
        if (node.async) {
            this.operators.add("async")
        }

        if (
            !parent ||
            parent.type !== AST_NODE_TYPES.MethodDefinition &&
                (parent.type !== AST_NODE_TYPES.Property || !parent.method) &&
                parent.type !== AST_NODE_TYPES.TSAbstractMethodDefinition
        ) {
            this.operators.add("function")
        }

        if (node.generator) {
            this.operators.add("*")
        }
        this.operators.add("()")
        this.operators.add(",", node.params.length - 1)

        if (node.declare) this.operators.add("declare")
    }
\` 1`] = `
Object {
  "operands": Array [
    "FunctionExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "FunctionExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "node",
    "async",
    "this",
    "operators",
    "add",
    "\\"async\\"",
    "parent",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "MethodDefinition",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "Property",
    "parent",
    "method",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSAbstractMethodDefinition",
    "this",
    "operators",
    "add",
    "\\"function\\"",
    "node",
    "generator",
    "this",
    "operators",
    "add",
    "\\"*\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
  ],
  "operators": Array [
    "()",
    ",",
    ",",
    ":",
    ":",
    ".",
    ":",
    "|",
    ".",
    "{}",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "||",
    "!",
    "&&",
    "&&",
    "()",
    "!==",
    ".",
    ".",
    "||",
    "!==",
    ".",
    ".",
    "!",
    ".",
    "!==",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
Identifier(
        this: ExtractTokensContext,
        node: TSESTree.Identifier,
        parent: TSESTree.Node | null,
    ) {
        if (parent) {
            if (
                parent.type === AST_NODE_TYPES.Property &&
                parent.shorthand &&
                parent.value === node
            )
                return
            if (
                parent.type === AST_NODE_TYPES.ImportSpecifier &&
                parent.imported.name === node.name &&
                parent.local === node
            )
                return
            if (
                parent.type === AST_NODE_TYPES.ExportSpecifier &&
                parent.local.name === node.name &&
                parent.exported === node
            )
                return
        }
        this.operands.add(node.name)
    }
\` 1`] = `
Object {
  "operands": Array [
    "Identifier",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "Identifier",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "parent",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "Property",
    "parent",
    "shorthand",
    "parent",
    "value",
    "node",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "ImportSpecifier",
    "parent",
    "imported",
    "name",
    "node",
    "name",
    "parent",
    "local",
    "node",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "ExportSpecifier",
    "parent",
    "local",
    "name",
    "node",
    "name",
    "parent",
    "exported",
    "node",
    "this",
    "operands",
    "add",
    "node",
    "name",
  ],
  "operators": Array [
    "()",
    ",",
    ",",
    ":",
    ":",
    ".",
    ":",
    "|",
    ".",
    "{}",
    "if()",
    "{}",
    "if()",
    "&&",
    "&&",
    "===",
    ".",
    ".",
    ".",
    "===",
    ".",
    "return",
    "if()",
    "&&",
    "&&",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
    ".",
    "===",
    ".",
    "return",
    "if()",
    "&&",
    "&&",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
    ".",
    "===",
    ".",
    "return",
    "()",
    ".",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
IfStatement(this: ExtractTokensContext, node: TSESTree.IfStatement) {
        this.operators.add("if()")
        if (node.alternate) {
            this.operators.add("else")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "IfStatement",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "IfStatement",
    "this",
    "operators",
    "add",
    "\\"if()\\"",
    "node",
    "alternate",
    "this",
    "operators",
    "add",
    "\\"else\\"",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
ImportAttribute(this: ExtractTokensContext) {
        this.operators.add(":")
    }
\` 1`] = `
Object {
  "operands": Array [
    "ImportAttribute",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\":\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
ImportDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.ImportDeclaration,
    ) {
        this.operators.add("import")
        if (node.importKind === "type") {
            this.operators.add("type")
        }
        if (
            node.specifiers.some(
                (spec) => spec.type === AST_NODE_TYPES.ImportSpecifier,
            )
        ) {
            this.operators.add("{}")
            this.operators.add(",", node.specifiers.length - 1)
        }
        if (node.specifiers.length) {
            this.operators.add("from")
        }
        if (node.assertions && node.assertions.length) {
            this.operators.add("assert")
            this.operators.add("{}")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "ImportDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ImportDeclaration",
    "this",
    "operators",
    "add",
    "\\"import\\"",
    "node",
    "importKind",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"type\\"",
    "node",
    "specifiers",
    "some",
    "spec",
    "spec",
    "type",
    "AST_NODE_TYPES",
    "ImportSpecifier",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "specifiers",
    "length",
    "1",
    "node",
    "specifiers",
    "length",
    "this",
    "operators",
    "add",
    "\\"from\\"",
    "node",
    "assertions",
    "node",
    "assertions",
    "length",
    "this",
    "operators",
    "add",
    "\\"assert\\"",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "()",
    ".",
    ".",
    "=>",
    "===",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "&&",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
ImportDefaultSpecifier: noop
\` 1`] = `
Object {
  "operands": Array [
    "ImportDefaultSpecifier",
    "noop",
  ],
  "operators": Array [
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
ImportExpression(
        this: ExtractTokensContext,
        node: TSESTree.ImportExpression,
    ) {
        this.operators.add("import")
        if (node.attributes) {
            this.operators.add(",")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "ImportExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ImportExpression",
    "this",
    "operators",
    "add",
    "\\"import\\"",
    "node",
    "attributes",
    "this",
    "operators",
    "add",
    "\\",\\"",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
ImportNamespaceSpecifier(this: ExtractTokensContext) {
        this.operators.add("*")
        this.operators.add("as")
    }
\` 1`] = `
Object {
  "operands": Array [
    "ImportNamespaceSpecifier",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"*\\"",
    "this",
    "operators",
    "add",
    "\\"as\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
ImportSpecifier(
        this: ExtractTokensContext,
        node: TSESTree.ImportSpecifier,
    ) {
        if (node.importKind === "type") {
            this.operators.add("type")
        }
        if (node.local.name !== node.imported.name) {
            this.operators.add("as")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "ImportSpecifier",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ImportSpecifier",
    "node",
    "importKind",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"type\\"",
    "node",
    "local",
    "name",
    "node",
    "imported",
    "name",
    "this",
    "operators",
    "add",
    "\\"as\\"",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "!==",
    ".",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
JSXAttribute(this: ExtractTokensContext) {
        this.operators.add("=")
    }
\` 1`] = `
Object {
  "operands": Array [
    "JSXAttribute",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"=\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
JSXClosingElement(this: ExtractTokensContext) {
        this.operators.add("</")
        this.operators.add(">")
    }
\` 1`] = `
Object {
  "operands": Array [
    "JSXClosingElement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"</\\"",
    "this",
    "operators",
    "add",
    "\\">\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
JSXClosingFragment(this: ExtractTokensContext) {
        this.operators.add("</")
        this.operators.add(">")
    }
\` 1`] = `
Object {
  "operands": Array [
    "JSXClosingFragment",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"</\\"",
    "this",
    "operators",
    "add",
    "\\">\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
JSXElement: noop
\` 1`] = `
Object {
  "operands": Array [
    "JSXElement",
    "noop",
  ],
  "operators": Array [
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
JSXEmptyExpression: noop
\` 1`] = `
Object {
  "operands": Array [
    "JSXEmptyExpression",
    "noop",
  ],
  "operators": Array [
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
JSXExpressionContainer(this: ExtractTokensContext) {
        this.operators.add("{}")
    }
\` 1`] = `
Object {
  "operands": Array [
    "JSXExpressionContainer",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
JSXFragment: noop
\` 1`] = `
Object {
  "operands": Array [
    "JSXFragment",
    "noop",
  ],
  "operators": Array [
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
JSXIdentifier(this: ExtractTokensContext, node: TSESTree.JSXIdentifier) {
        this.operands.add(node.name)
    }
\` 1`] = `
Object {
  "operands": Array [
    "JSXIdentifier",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "JSXIdentifier",
    "this",
    "operands",
    "add",
    "node",
    "name",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
JSXMemberExpression(this: ExtractTokensContext) {
        this.operators.add(".")
    }
\` 1`] = `
Object {
  "operands": Array [
    "JSXMemberExpression",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\".\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
JSXNamespacedName(this: ExtractTokensContext) {
        this.operators.add(":")
    }
\` 1`] = `
Object {
  "operands": Array [
    "JSXNamespacedName",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\":\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
JSXOpeningElement(this: ExtractTokensContext) {
        this.operators.add("<")
        this.operators.add(">")
    }
\` 1`] = `
Object {
  "operands": Array [
    "JSXOpeningElement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"<\\"",
    "this",
    "operators",
    "add",
    "\\">\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
JSXOpeningFragment(this: ExtractTokensContext) {
        this.operators.add("<")
        this.operators.add(">")
    }
\` 1`] = `
Object {
  "operands": Array [
    "JSXOpeningFragment",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"<\\"",
    "this",
    "operators",
    "add",
    "\\">\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
JSXSpreadAttribute(this: ExtractTokensContext) {
        this.operators.add("{}")
        this.operators.add("...")
    }
\` 1`] = `
Object {
  "operands": Array [
    "JSXSpreadAttribute",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "this",
    "operators",
    "add",
    "\\"...\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
JSXSpreadChild(this: ExtractTokensContext) {
        this.operators.add("{}")
        this.operators.add("...")
    }
\` 1`] = `
Object {
  "operands": Array [
    "JSXSpreadChild",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "this",
    "operators",
    "add",
    "\\"...\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
JSXText(this: ExtractTokensContext, node: TSESTree.JSXText) {
        this.operands.add(JSON.stringify(node.value))
    }
\` 1`] = `
Object {
  "operands": Array [
    "JSXText",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "JSXText",
    "this",
    "operands",
    "add",
    "JSON",
    "stringify",
    "node",
    "value",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
LabeledStatement(this: ExtractTokensContext) {
        this.operators.add(":")
    }
\` 1`] = `
Object {
  "operands": Array [
    "LabeledStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\":\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
Literal(this: ExtractTokensContext, node: TSESTree.Literal) {
        if ("bigint" in node && node.bigint) {
            this.operands.add(\`\${node.bigint}n\`)
        } else if ("regex" in node && node.regex) {
            this.operands.add(\`/\${node.regex.pattern}/\${node.regex.flags}\`)
        } else {
            this.operands.add(JSON.stringify(node.value))
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "Literal",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "Literal",
    "\\"bigint\\"",
    "node",
    "node",
    "bigint",
    "this",
    "operands",
    "add",
    "\`\${",
    "}n\`",
    "node",
    "bigint",
    "\\"regex\\"",
    "node",
    "node",
    "regex",
    "this",
    "operands",
    "add",
    "\`/\${",
    "}/\${",
    "}\`",
    "node",
    "regex",
    "pattern",
    "node",
    "regex",
    "flags",
    "this",
    "operands",
    "add",
    "JSON",
    "stringify",
    "node",
    "value",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    "else",
    "&&",
    "in",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    "if()",
    "else",
    "&&",
    "in",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
LogicalExpression(
        this: ExtractTokensContext,
        node: TSESTree.LogicalExpression,
    ) {
        this.operators.add(node.operator)

        if (getPrecedence(node) >= getPrecedence(node.right)) {
            this.operators.add("()")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "LogicalExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "LogicalExpression",
    "this",
    "operators",
    "add",
    "node",
    "operator",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "right",
    "this",
    "operators",
    "add",
    "\\"()\\"",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ">=",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
MemberExpression(
        this: ExtractTokensContext,
        node: TSESTree.MemberExpression,
    ) {
        if (getPrecedence(node) > getPrecedence(node.object)) {
            this.operators.add("()")
        }
        if (node.optional) {
            this.operators.add("?.")
            if (node.computed) {
                this.operators.add("[]")
            }
        } else if (node.computed) {
            this.operators.add("[]")
        } else {
            this.operators.add(".")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "MemberExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "MemberExpression",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "object",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "node",
    "optional",
    "this",
    "operators",
    "add",
    "\\"?.\\"",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "this",
    "operators",
    "add",
    "\\".\\"",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ">",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "else",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "else",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
MetaProperty(this: ExtractTokensContext) {
        this.operators.add(".")
    }
\` 1`] = `
Object {
  "operands": Array [
    "MetaProperty",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\".\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
MethodDefinition(
        this: ExtractTokensContext,
        node: TSESTree.MethodDefinition,
    ) {
        if (node.accessibility) this.operators.add(node.accessibility)
        if (node.static) this.operators.add("static")
        if (node.kind === "get" || node.kind === "set")
            this.operators.add(node.kind)
        if (node.computed) {
            this.operators.add("[]")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "MethodDefinition",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "MethodDefinition",
    "node",
    "accessibility",
    "this",
    "operators",
    "add",
    "node",
    "accessibility",
    "node",
    "static",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "node",
    "kind",
    "\\"get\\"",
    "node",
    "kind",
    "\\"set\\"",
    "this",
    "operators",
    "add",
    "node",
    "kind",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    "||",
    "===",
    ".",
    "===",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
NewExpression(this: ExtractTokensContext, node: TSESTree.NewExpression) {
        this.operators.add("new")

        if (getPrecedence(node) >= getPrecedence(node.callee)) {
            this.operators.add("()")
        }

        this.operators.add("()")
        this.operators.add(",", node.arguments.length - 1)
    }
\` 1`] = `
Object {
  "operands": Array [
    "NewExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "NewExpression",
    "this",
    "operators",
    "add",
    "\\"new\\"",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "callee",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "arguments",
    "length",
    "1",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ">=",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
ObjectExpression(
        this: ExtractTokensContext,
        node: TSESTree.ObjectExpression,
    ) {
        this.operators.add("{}")
        this.operators.add(",", node.properties.length - 1)
    }
\` 1`] = `
Object {
  "operands": Array [
    "ObjectExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ObjectExpression",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "properties",
    "length",
    "1",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
ObjectPattern(this: ExtractTokensContext, node: TSESTree.ObjectPattern) {
        this.operators.add("{}")
        this.operators.add(",", node.properties.length - 1)
    }
\` 1`] = `
Object {
  "operands": Array [
    "ObjectPattern",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ObjectPattern",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "properties",
    "length",
    "1",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
PrivateIdentifier(
        this: ExtractTokensContext,
        node: TSESTree.PrivateIdentifier,
    ) {
        this.operands.add(\`#\${node.name}\`)
    }
\` 1`] = `
Object {
  "operands": Array [
    "PrivateIdentifier",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "PrivateIdentifier",
    "this",
    "operands",
    "add",
    "\`#\${",
    "}\`",
    "node",
    "name",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
Program: noop
\` 1`] = `
Object {
  "operands": Array [
    "Program",
    "noop",
  ],
  "operators": Array [
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
Property(this: ExtractTokensContext, node: TSESTree.Property) {
        if (node.kind === "get" || node.kind === "set")
            this.operators.add(node.kind)
        if (node.computed) {
            this.operators.add("[]")
        }
        if (!node.shorthand && !node.method) {
            this.operators.add(":")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "Property",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "Property",
    "node",
    "kind",
    "\\"get\\"",
    "node",
    "kind",
    "\\"set\\"",
    "this",
    "operators",
    "add",
    "node",
    "kind",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "shorthand",
    "node",
    "method",
    "this",
    "operators",
    "add",
    "\\":\\"",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    "||",
    "===",
    ".",
    "===",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "&&",
    "!",
    ".",
    "!",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
PropertyDefinition(
        this: ExtractTokensContext,
        node: TSESTree.PropertyDefinition,
    ) {
        if (node.accessibility) this.operators.add(node.accessibility)
        if (node.static) this.operators.add("static")
        if (node.readonly) this.operators.add("readonly")
        if (node.computed) {
            this.operators.add("[]")
        }
        if (node.value) {
            this.operators.add("=")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "PropertyDefinition",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "PropertyDefinition",
    "node",
    "accessibility",
    "this",
    "operators",
    "add",
    "node",
    "accessibility",
    "node",
    "static",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "node",
    "readonly",
    "this",
    "operators",
    "add",
    "\\"readonly\\"",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "value",
    "this",
    "operators",
    "add",
    "\\"=\\"",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
RestElement(this: ExtractTokensContext) {
        this.operators.add("...")
    }
\` 1`] = `
Object {
  "operands": Array [
    "RestElement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"...\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
ReturnStatement(this: ExtractTokensContext) {
        this.operators.add("return")
    }
\` 1`] = `
Object {
  "operands": Array [
    "ReturnStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"return\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
SequenceExpression(
        this: ExtractTokensContext,
        node: TSESTree.SequenceExpression,
    ) {
        this.operators.add(",", node.expressions.length - 1)
    }
\` 1`] = `
Object {
  "operands": Array [
    "SequenceExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "SequenceExpression",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "expressions",
    "length",
    "1",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
SpreadElement(this: ExtractTokensContext) {
        this.operators.add("...")
    }
\` 1`] = `
Object {
  "operands": Array [
    "SpreadElement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"...\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
StaticBlock(this: ExtractTokensContext) {
        this.operators.add("static")
        this.operators.add("{}")
    }
\` 1`] = `
Object {
  "operands": Array [
    "StaticBlock",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
Super(this: ExtractTokensContext) {
        this.operands.add("super")
    }
\` 1`] = `
Object {
  "operands": Array [
    "Super",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"super\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
SwitchCase(this: ExtractTokensContext, node: TSESTree.SwitchCase) {
        if (node.test) {
            this.operators.add("case")
        } else {
            this.operators.add("default")
        }
        this.operators.add(":")
    }
\` 1`] = `
Object {
  "operands": Array [
    "SwitchCase",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "SwitchCase",
    "node",
    "test",
    "this",
    "operators",
    "add",
    "\\"case\\"",
    "this",
    "operators",
    "add",
    "\\"default\\"",
    "this",
    "operators",
    "add",
    "\\":\\"",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    "else",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
SwitchStatement(this: ExtractTokensContext) {
        this.operators.add("switch()")
        this.operators.add("{}")
    }
\` 1`] = `
Object {
  "operands": Array [
    "SwitchStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"switch()\\"",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSAbstractKeyword(this: ExtractTokensContext) {
        this.operators.add("abstract")
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSAbstractKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"abstract\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSAbstractMethodDefinition(
        this: ExtractTokensContext,
        node: TSESTree.TSAbstractMethodDefinition,
    ) {
        this.operators.add("abstract")
        if (node.accessibility) this.operators.add(node.accessibility)
        if (node.static) this.operators.add("static")
        if (node.kind === "get" || node.kind === "set")
            this.operators.add(node.kind)
        if (node.computed) {
            this.operators.add("[]")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSAbstractMethodDefinition",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSAbstractMethodDefinition",
    "this",
    "operators",
    "add",
    "\\"abstract\\"",
    "node",
    "accessibility",
    "this",
    "operators",
    "add",
    "node",
    "accessibility",
    "node",
    "static",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "node",
    "kind",
    "\\"get\\"",
    "node",
    "kind",
    "\\"set\\"",
    "this",
    "operators",
    "add",
    "node",
    "kind",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    "||",
    "===",
    ".",
    "===",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSAbstractPropertyDefinition(
        this: ExtractTokensContext,
        node: TSESTree.TSAbstractPropertyDefinition,
    ) {
        this.operators.add("abstract")
        if (node.accessibility) this.operators.add(node.accessibility)
        if (node.static) this.operators.add("static")
        if (node.computed) {
            this.operators.add("[]")
        }
        if (node.value) {
            this.operators.add("=")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSAbstractPropertyDefinition",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSAbstractPropertyDefinition",
    "this",
    "operators",
    "add",
    "\\"abstract\\"",
    "node",
    "accessibility",
    "this",
    "operators",
    "add",
    "node",
    "accessibility",
    "node",
    "static",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "value",
    "this",
    "operators",
    "add",
    "\\"=\\"",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSAnyKeyword(this: ExtractTokensContext) {
        this.operands.add("any")
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSAnyKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"any\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSArrayType(this: ExtractTokensContext) {
        this.operators.add("[]")
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSArrayType",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSAsExpression(this: ExtractTokensContext) {
        this.operators.add("as")
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSAsExpression",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"as\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSAsyncKeyword(this: ExtractTokensContext) {
        this.operators.add("async")
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSAsyncKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"async\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSBigIntKeyword(this: ExtractTokensContext) {
        this.operands.add("bigint")
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSBigIntKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"bigint\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSBooleanKeyword(this: ExtractTokensContext) {
        this.operands.add("boolean")
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSBooleanKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"boolean\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSCallSignatureDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.TSCallSignatureDeclaration,
    ) {
        this.operators.add("()")
        this.operators.add(",", node.params.length - 1)
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSCallSignatureDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSCallSignatureDeclaration",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSClassImplements: noop
\` 1`] = `
Object {
  "operands": Array [
    "TSClassImplements",
    "noop",
  ],
  "operators": Array [
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSConditionalType(this: ExtractTokensContext) {
        this.operators.add("extends")
        this.operators.add("?:")
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSConditionalType",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"extends\\"",
    "this",
    "operators",
    "add",
    "\\"?:\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSConstructSignatureDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.TSConstructSignatureDeclaration,
    ) {
        this.operators.add("new")
        this.operators.add("()")
        this.operators.add(",", node.params.length - 1)
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSConstructSignatureDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSConstructSignatureDeclaration",
    "this",
    "operators",
    "add",
    "\\"new\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSConstructorType(
        this: ExtractTokensContext,
        node: TSESTree.TSConstructorType,
    ) {
        this.operators.add("new")
        this.operators.add("()")
        this.operators.add(",", node.params.length - 1)
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSConstructorType",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSConstructorType",
    "this",
    "operators",
    "add",
    "\\"new\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSDeclareFunction(
        this: ExtractTokensContext,
        node: TSESTree.TSDeclareFunction,
    ) {
        if (node.async) {
            this.operators.add("async")
        }
        this.operators.add("function")
        if (node.generator) {
            this.operators.add("*")
        }
        this.operators.add("()")
        this.operators.add(",", node.params.length - 1)
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSDeclareFunction",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSDeclareFunction",
    "node",
    "async",
    "this",
    "operators",
    "add",
    "\\"async\\"",
    "this",
    "operators",
    "add",
    "\\"function\\"",
    "node",
    "generator",
    "this",
    "operators",
    "add",
    "\\"*\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSDeclareKeyword(this: ExtractTokensContext) {
        this.operators.add("declare")
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSDeclareKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSEmptyBodyFunctionExpression(
        this: ExtractTokensContext,
        node: TSESTree.TSEmptyBodyFunctionExpression,
        parent: TSESTree.Node | null,
    ) {
        if (node.async) {
            this.operators.add("async")
        }

        if (
            !parent ||
            parent.type !== AST_NODE_TYPES.MethodDefinition &&
                (parent.type !== AST_NODE_TYPES.Property || !parent.method) &&
                parent.type !== AST_NODE_TYPES.TSAbstractMethodDefinition
        ) {
            this.operators.add("function")
        }

        if (node.generator) {
            this.operators.add("*")
        }
        this.operators.add("()")
        this.operators.add(",", node.params.length - 1)

        if (node.declare) this.operators.add("declare")
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSEmptyBodyFunctionExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSEmptyBodyFunctionExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "node",
    "async",
    "this",
    "operators",
    "add",
    "\\"async\\"",
    "parent",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "MethodDefinition",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "Property",
    "parent",
    "method",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSAbstractMethodDefinition",
    "this",
    "operators",
    "add",
    "\\"function\\"",
    "node",
    "generator",
    "this",
    "operators",
    "add",
    "\\"*\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
  ],
  "operators": Array [
    "()",
    ",",
    ",",
    ":",
    ":",
    ".",
    ":",
    "|",
    ".",
    "{}",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "||",
    "!",
    "&&",
    "&&",
    "()",
    "!==",
    ".",
    ".",
    "||",
    "!==",
    ".",
    ".",
    "!",
    ".",
    "!==",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSEnumDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.TSEnumDeclaration,
    ) {
        if (node.const) this.operators.add("const")
        this.operators.add("enum")
        this.operators.add("{}")
        this.operators.add(",", node.members.length - 1)

        if (node.declare) this.operators.add("declare")
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSEnumDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSEnumDeclaration",
    "node",
    "const",
    "this",
    "operators",
    "add",
    "\\"const\\"",
    "this",
    "operators",
    "add",
    "\\"enum\\"",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "members",
    "length",
    "1",
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSEnumMember(this: ExtractTokensContext, node: TSESTree.TSEnumMember) {
        if (node.computed) {
            this.operators.add("[]")
        }
        if (node.initializer) {
            this.operators.add("=")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSEnumMember",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSEnumMember",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "initializer",
    "this",
    "operators",
    "add",
    "\\"=\\"",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSExportAssignment(this: ExtractTokensContext) {
        this.operators.add("export")
        this.operators.add("=")
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSExportAssignment",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"export\\"",
    "this",
    "operators",
    "add",
    "\\"=\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSExportKeyword(this: ExtractTokensContext) {
        this.operators.add("export")
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSExportKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"export\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSExternalModuleReference(this: ExtractTokensContext) {
        this.operands.add("require")
        this.operators.add("()")
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSExternalModuleReference",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"require\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSFunctionType(this: ExtractTokensContext, node: TSESTree.TSFunctionType) {
        this.operators.add("()")
        this.operators.add(",", node.params.length - 1)
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSFunctionType",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSFunctionType",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSImportEqualsDeclaration(this: ExtractTokensContext) {
        this.operators.add("import")
        this.operators.add("=")
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSImportEqualsDeclaration",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"import\\"",
    "this",
    "operators",
    "add",
    "\\"=\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSImportType(this: ExtractTokensContext, node: TSESTree.TSImportType) {
        this.operators.add("import")
        this.operators.add("()")
        if (node.qualifier) {
            this.operators.add(".")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSImportType",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSImportType",
    "this",
    "operators",
    "add",
    "\\"import\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "node",
    "qualifier",
    "this",
    "operators",
    "add",
    "\\".\\"",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSIndexSignature(this: ExtractTokensContext, node) {
        this.operators.add("[]")
        if (node.readonly) this.operators.add("readonly")
        if (node.static) this.operators.add("static")
        if (node.export) this.operators.add("export")
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSIndexSignature",
    "this",
    "ExtractTokensContext",
    "node",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "readonly",
    "this",
    "operators",
    "add",
    "\\"readonly\\"",
    "node",
    "static",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "node",
    "export",
    "this",
    "operators",
    "add",
    "\\"export\\"",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSIndexedAccessType(this: ExtractTokensContext) {
        this.operators.add("[]")
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSIndexedAccessType",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSInferType(this: ExtractTokensContext) {
        this.operators.add("infer")
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSInferType",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"infer\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSInterfaceBody(this: ExtractTokensContext) {
        this.operators.add("{}")
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSInterfaceBody",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSInterfaceDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.TSInterfaceDeclaration,
    ) {
        this.operators.add("interface")
        if (node.extends) {
            this.operators.add("extends")
            this.operators.add(",", node.extends.length - 1)
        }
        if (node.implements) {
            this.operators.add("implements")
            this.operators.add(",", node.implements.length - 1)
        }
        if (node.abstract) {
            this.operators.add("abstract")
        }
        if (node.declare) this.operators.add("declare")
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSInterfaceDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSInterfaceDeclaration",
    "this",
    "operators",
    "add",
    "\\"interface\\"",
    "node",
    "extends",
    "this",
    "operators",
    "add",
    "\\"extends\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "extends",
    "length",
    "1",
    "node",
    "implements",
    "this",
    "operators",
    "add",
    "\\"implements\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "implements",
    "length",
    "1",
    "node",
    "abstract",
    "this",
    "operators",
    "add",
    "\\"abstract\\"",
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSInterfaceHeritage: noop
\` 1`] = `
Object {
  "operands": Array [
    "TSInterfaceHeritage",
    "noop",
  ],
  "operators": Array [
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSIntersectionType(
        this: ExtractTokensContext,
        node: TSESTree.TSIntersectionType,
    ) {
        this.operators.add("&", node.types.length - 1)
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSIntersectionType",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSIntersectionType",
    "this",
    "operators",
    "add",
    "\\"&\\"",
    "node",
    "types",
    "length",
    "1",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSIntrinsicKeyword(this: ExtractTokensContext) {
        this.operands.add("intrinsic")
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSIntrinsicKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"intrinsic\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSLiteralType: noop
\` 1`] = `
Object {
  "operands": Array [
    "TSLiteralType",
    "noop",
  ],
  "operators": Array [
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSMappedType(this: ExtractTokensContext, node: TSESTree.TSMappedType) {
        this.operators.add("{}")
        if (node.readonly) {
            if (typeof node.readonly === "string") {
                this.operators.add(node.readonly)
            }
            this.operators.add("readonly")
        }

        this.operators.add("[]")
        if (node.optional) {
            if (typeof node.optional === "string") {
                this.operators.add(node.optional)
            }
            this.operators.add("?")
        }
        this.operators.add(":")
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSMappedType",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSMappedType",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "node",
    "readonly",
    "node",
    "readonly",
    "\\"string\\"",
    "this",
    "operators",
    "add",
    "node",
    "readonly",
    "this",
    "operators",
    "add",
    "\\"readonly\\"",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "optional",
    "node",
    "optional",
    "\\"string\\"",
    "this",
    "operators",
    "add",
    "node",
    "optional",
    "this",
    "operators",
    "add",
    "\\"?\\"",
    "this",
    "operators",
    "add",
    "\\":\\"",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "if()",
    "===",
    "typeof",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "if()",
    "===",
    "typeof",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSMethodSignature(
        this: ExtractTokensContext,
        node: TSESTree.TSMethodSignature,
    ) {
        if (node.accessibility) this.operators.add(node.accessibility)
        if (node.readonly) this.operators.add("readonly")
        if (node.static) this.operators.add("static")
        if (node.export) this.operators.add("export")
        if (node.kind === "get" || node.kind === "set")
            this.operators.add(node.kind)
        if (node.computed) this.operators.add("[]")
        if (node.optional) this.operators.add("?")

        this.operators.add("()")
        this.operators.add(",", node.params.length - 1)
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSMethodSignature",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSMethodSignature",
    "node",
    "accessibility",
    "this",
    "operators",
    "add",
    "node",
    "accessibility",
    "node",
    "readonly",
    "this",
    "operators",
    "add",
    "\\"readonly\\"",
    "node",
    "static",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "node",
    "export",
    "this",
    "operators",
    "add",
    "\\"export\\"",
    "node",
    "kind",
    "\\"get\\"",
    "node",
    "kind",
    "\\"set\\"",
    "this",
    "operators",
    "add",
    "node",
    "kind",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "optional",
    "this",
    "operators",
    "add",
    "\\"?\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    "||",
    "===",
    ".",
    "===",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSModuleBlock(this: ExtractTokensContext) {
        this.operators.add("{}")
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSModuleBlock",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSModuleDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.TSModuleDeclaration,
    ) {
        if (node.declare) this.operators.add("declare")
        if (!node.global) {
            this.operators.add("module")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSModuleDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSModuleDeclaration",
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
    "node",
    "global",
    "this",
    "operators",
    "add",
    "\\"module\\"",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    "!",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSNamedTupleMember(
        this: ExtractTokensContext,
        node: TSESTree.TSNamedTupleMember,
    ) {
        if (node.optional) this.operators.add("?")
        this.operators.add(":")
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSNamedTupleMember",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSNamedTupleMember",
    "node",
    "optional",
    "this",
    "operators",
    "add",
    "\\"?\\"",
    "this",
    "operators",
    "add",
    "\\":\\"",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSNamespaceExportDeclaration(this: ExtractTokensContext) {
        this.operators.add("export")
        this.operators.add("as")
        this.operators.add("namespace")
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSNamespaceExportDeclaration",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"export\\"",
    "this",
    "operators",
    "add",
    "\\"as\\"",
    "this",
    "operators",
    "add",
    "\\"namespace\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSNeverKeyword(this: ExtractTokensContext) {
        this.operands.add("never")
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSNeverKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"never\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSNonNullExpression(this: ExtractTokensContext) {
        this.operators.add("!")
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSNonNullExpression",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"!\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSNullKeyword(this: ExtractTokensContext) {
        this.operands.add("null")
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSNullKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"null\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSNumberKeyword(this: ExtractTokensContext) {
        this.operands.add("number")
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSNumberKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"number\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSObjectKeyword(this: ExtractTokensContext) {
        this.operands.add("object")
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSObjectKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"object\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSOptionalType(this: ExtractTokensContext) {
        this.operators.add("?")
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSOptionalType",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"?\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSParameterProperty(
        this: ExtractTokensContext,
        node: TSESTree.TSParameterProperty,
    ) {
        if (node.accessibility) this.operators.add(node.accessibility)
        if (node.readonly) this.operators.add("readonly")
        if (node.static) this.operators.add("static")
        if (node.export) this.operators.add("export")
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSParameterProperty",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSParameterProperty",
    "node",
    "accessibility",
    "this",
    "operators",
    "add",
    "node",
    "accessibility",
    "node",
    "readonly",
    "this",
    "operators",
    "add",
    "\\"readonly\\"",
    "node",
    "static",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "node",
    "export",
    "this",
    "operators",
    "add",
    "\\"export\\"",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSPrivateKeyword(this: ExtractTokensContext) {
        this.operators.add("private")
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSPrivateKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"private\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSPropertySignature(
        this: ExtractTokensContext,
        node: TSESTree.TSPropertySignature,
    ) {
        if (node.accessibility) this.operators.add(node.accessibility)
        if (node.readonly) this.operators.add("readonly")
        if (node.static) this.operators.add("static")
        if (node.export) this.operators.add("export")
        if (node.computed) this.operators.add("[]")
        if (node.optional) this.operators.add("?")
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSPropertySignature",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSPropertySignature",
    "node",
    "accessibility",
    "this",
    "operators",
    "add",
    "node",
    "accessibility",
    "node",
    "readonly",
    "this",
    "operators",
    "add",
    "\\"readonly\\"",
    "node",
    "static",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "node",
    "export",
    "this",
    "operators",
    "add",
    "\\"export\\"",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "optional",
    "this",
    "operators",
    "add",
    "\\"?\\"",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSProtectedKeyword(this: ExtractTokensContext) {
        this.operators.add("protected")
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSProtectedKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"protected\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSPublicKeyword(this: ExtractTokensContext) {
        this.operators.add("public")
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSPublicKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"public\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSQualifiedName(this: ExtractTokensContext) {
        this.operators.add(".")
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSQualifiedName",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\".\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSReadonlyKeyword(this: ExtractTokensContext) {
        this.operators.add("readonly")
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSReadonlyKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"readonly\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSRestType(this: ExtractTokensContext) {
        this.operators.add("...")
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSRestType",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"...\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSStaticKeyword(this: ExtractTokensContext) {
        this.operators.add("static")
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSStaticKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"static\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSStringKeyword(this: ExtractTokensContext) {
        this.operands.add("string")
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSStringKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"string\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSSymbolKeyword(this: ExtractTokensContext) {
        this.operands.add("symbol")
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSSymbolKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"symbol\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSTemplateLiteralType: noop
\` 1`] = `
Object {
  "operands": Array [
    "TSTemplateLiteralType",
    "noop",
  ],
  "operators": Array [
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSThisType(this: ExtractTokensContext) {
        this.operands.add("this")
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSThisType",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"this\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSTupleType(this: ExtractTokensContext, node) {
        this.operators.add("[]")
        this.operators.add(",", node.elementTypes.length - 1)
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSTupleType",
    "this",
    "ExtractTokensContext",
    "node",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "elementTypes",
    "length",
    "1",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSTypeAliasDeclaration(this: ExtractTokensContext) {
        this.operators.add("type")
        this.operators.add("=")
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSTypeAliasDeclaration",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"=\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSTypeAnnotation(
        this: ExtractTokensContext,
        node: TSESTree.TSTypeAnnotation,
        parent: TSESTree.Node | null,
    ) {
        if (parent) {
            if (
                parent.type === AST_NODE_TYPES.TSFunctionType &&
                    parent.returnType === node ||
                parent.type === AST_NODE_TYPES.TSConstructorType &&
                    parent.returnType === node
            ) {
                this.operators.add("=>")
                return
            }
            if (parent.type === AST_NODE_TYPES.TSTypePredicate) {
                return
            }
        }
        this.operators.add(":")
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSTypeAnnotation",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSTypeAnnotation",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "parent",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSFunctionType",
    "parent",
    "returnType",
    "node",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSConstructorType",
    "parent",
    "returnType",
    "node",
    "this",
    "operators",
    "add",
    "\\"=>\\"",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSTypePredicate",
    "this",
    "operators",
    "add",
    "\\":\\"",
  ],
  "operators": Array [
    "()",
    ",",
    ",",
    ":",
    ":",
    ".",
    ":",
    "|",
    ".",
    "{}",
    "if()",
    "{}",
    "if()",
    "||",
    "&&",
    "===",
    ".",
    ".",
    "===",
    ".",
    "&&",
    "===",
    ".",
    ".",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "return",
    "if()",
    "===",
    ".",
    ".",
    "{}",
    "return",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSTypeAssertion(this: ExtractTokensContext) {
        this.operators.add("<>")
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSTypeAssertion",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"<>\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSTypeLiteral(this: ExtractTokensContext) {
        this.operators.add("{}")
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSTypeLiteral",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSTypeOperator(this: ExtractTokensContext) {
        this.operators.add("keyof")
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSTypeOperator",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"keyof\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSTypeParameter(
        this: ExtractTokensContext,
        node: TSESTree.TSTypeParameter,
        parent,
    ) {
        if (node.constraint) {
            if (
                parent &&
                parent.type === AST_NODE_TYPES.TSMappedType &&
                parent.typeParameter === node
            ) {
                this.operators.add("in")
            } else {
                this.operators.add("extends")
            }
        }
        if (node.default) {
            this.operators.add("=")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSTypeParameter",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSTypeParameter",
    "parent",
    "node",
    "constraint",
    "parent",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSMappedType",
    "parent",
    "typeParameter",
    "node",
    "this",
    "operators",
    "add",
    "\\"in\\"",
    "this",
    "operators",
    "add",
    "\\"extends\\"",
    "node",
    "default",
    "this",
    "operators",
    "add",
    "\\"=\\"",
  ],
  "operators": Array [
    "()",
    ",",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "{}",
    "if()",
    "else",
    "&&",
    "&&",
    "===",
    ".",
    ".",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSTypeParameterDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.TSTypeParameterDeclaration,
    ) {
        this.operators.add("<>")
        this.operators.add(",", node.params.length - 1)
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSTypeParameterDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSTypeParameterDeclaration",
    "this",
    "operators",
    "add",
    "\\"<>\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSTypeParameterInstantiation(
        this: ExtractTokensContext,
        node: TSESTree.TSTypeParameterInstantiation,
    ) {
        this.operators.add("<>")
        this.operators.add(",", node.params.length - 1)
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSTypeParameterInstantiation",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSTypeParameterInstantiation",
    "this",
    "operators",
    "add",
    "\\"<>\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSTypePredicate(this: ExtractTokensContext) {
        this.operators.add("is")
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSTypePredicate",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"is\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSTypeQuery(this: ExtractTokensContext) {
        this.operators.add("typeof")
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSTypeQuery",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"typeof\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSTypeReference: noop
\` 1`] = `
Object {
  "operands": Array [
    "TSTypeReference",
    "noop",
  ],
  "operators": Array [
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSUndefinedKeyword(this: ExtractTokensContext) {
        this.operands.add("undefined")
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSUndefinedKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"undefined\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSUnionType(this: ExtractTokensContext, node: TSESTree.TSUnionType) {
        this.operators.add("|", node.types.length - 1)
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSUnionType",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSUnionType",
    "this",
    "operators",
    "add",
    "\\"|\\"",
    "node",
    "types",
    "length",
    "1",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSUnknownKeyword(this: ExtractTokensContext) {
        this.operands.add("unknown")
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSUnknownKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"unknown\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TSVoidKeyword(this: ExtractTokensContext) {
        this.operands.add("void")
    }
\` 1`] = `
Object {
  "operands": Array [
    "TSVoidKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"void\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TaggedTemplateExpression: noop
\` 1`] = `
Object {
  "operands": Array [
    "TaggedTemplateExpression",
    "noop",
  ],
  "operators": Array [
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TemplateElement(
        this: ExtractTokensContext,
        node: TSESTree.TemplateElement,
        parent: TSESTree.Node | null,
    ) {
        let open = "\`"
        let close = "\`"
        if (
            parent &&
            (parent.type === AST_NODE_TYPES.TemplateLiteral ||
                parent.type === AST_NODE_TYPES.TSTemplateLiteralType)
        ) {
            const index = parent.quasis.indexOf(node)
            if (index > 0) {
                open = "}"
            }
            if (index < parent.quasis.length - 1) {
                close = "\${"
            }
        }
        this.operands.add(\`\${open}\${node.value.cooked}\${close}\`)
    }
\` 1`] = `
Object {
  "operands": Array [
    "TemplateElement",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TemplateElement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "open",
    "\\"\`\\"",
    "close",
    "\\"\`\\"",
    "parent",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TemplateLiteral",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSTemplateLiteralType",
    "index",
    "parent",
    "quasis",
    "indexOf",
    "node",
    "index",
    "0",
    "open",
    "\\"}\\"",
    "index",
    "parent",
    "quasis",
    "length",
    "1",
    "close",
    "\\"\${\\"",
    "this",
    "operands",
    "add",
    "\`\${",
    "}\${",
    "}\${",
    "}\`",
    "open",
    "node",
    "value",
    "cooked",
    "close",
  ],
  "operators": Array [
    "()",
    ",",
    ",",
    ":",
    ":",
    ".",
    ":",
    "|",
    ".",
    "{}",
    "let",
    "=",
    "let",
    "=",
    "if()",
    "&&",
    "()",
    "||",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
    "{}",
    "const",
    "=",
    "()",
    ".",
    ".",
    "if()",
    ">",
    "{}",
    "=",
    "if()",
    "<",
    "-",
    ".",
    ".",
    "{}",
    "=",
    "()",
    ".",
    ".",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TemplateLiteral: noop
\` 1`] = `
Object {
  "operands": Array [
    "TemplateLiteral",
    "noop",
  ],
  "operators": Array [
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
ThisExpression(this: ExtractTokensContext) {
        this.operands.add("this")
    }
\` 1`] = `
Object {
  "operands": Array [
    "ThisExpression",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"this\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
ThrowStatement(this: ExtractTokensContext) {
        this.operators.add("throw")
    }
\` 1`] = `
Object {
  "operands": Array [
    "ThrowStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"throw\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
TryStatement(this: ExtractTokensContext, node: TSESTree.TryStatement) {
        this.operators.add("try")
        if (node.finalizer) {
            this.operators.add("finally")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "TryStatement",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TryStatement",
    "this",
    "operators",
    "add",
    "\\"try\\"",
    "node",
    "finalizer",
    "this",
    "operators",
    "add",
    "\\"finally\\"",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
UnaryExpression(
        this: ExtractTokensContext,
        node: TSESTree.UnaryExpression,
    ) {
        this.operators.add(node.operator)

        if (getPrecedence(node) >= getPrecedence(node.argument)) {
            this.operators.add("()")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "UnaryExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "UnaryExpression",
    "this",
    "operators",
    "add",
    "node",
    "operator",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "argument",
    "this",
    "operators",
    "add",
    "\\"()\\"",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ">=",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
UpdateExpression(
        this: ExtractTokensContext,
        node: TSESTree.UpdateExpression,
    ) {
        this.operators.add(node.operator)

        if (getPrecedence(node) >= getPrecedence(node.argument)) {
            this.operators.add("()")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "UpdateExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "UpdateExpression",
    "this",
    "operators",
    "add",
    "node",
    "operator",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "argument",
    "this",
    "operators",
    "add",
    "\\"()\\"",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ">=",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
VariableDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.VariableDeclaration,
    ) {
        this.operators.add(node.kind)
        this.operators.add(",", node.declarations.length - 1)

        if (node.declare) this.operators.add("declare")
    }
\` 1`] = `
Object {
  "operands": Array [
    "VariableDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "VariableDeclaration",
    "this",
    "operators",
    "add",
    "node",
    "kind",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "declarations",
    "length",
    "1",
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
VariableDeclarator(
        this: ExtractTokensContext,
        node: TSESTree.VariableDeclarator,
    ) {
        if (node.init) {
            this.operators.add("=")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "VariableDeclarator",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "VariableDeclarator",
    "node",
    "init",
    "this",
    "operators",
    "add",
    "\\"=\\"",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
WhileStatement(this: ExtractTokensContext) {
        this.operators.add("while()")
    }
\` 1`] = `
Object {
  "operands": Array [
    "WhileStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"while()\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
WithStatement(this: ExtractTokensContext) {
        this.operators.add("with()")
    }
\` 1`] = `
Object {
  "operands": Array [
    "WithStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"with()\\"",
  ],
  "operators": Array [
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts Property\`
YieldExpression(
        this: ExtractTokensContext,
        node: TSESTree.YieldExpression,
    ) {
        this.operators.add("yield")
        if (node.delegate) {
            this.operators.add("*")
        }
        if (
            node.argument &&
            getPrecedence(node) > getPrecedence(node.argument)
        ) {
            this.operators.add("()")
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "YieldExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "YieldExpression",
    "this",
    "operators",
    "add",
    "\\"yield\\"",
    "node",
    "delegate",
    "this",
    "operators",
    "add",
    "\\"*\\"",
    "node",
    "argument",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "argument",
    "this",
    "operators",
    "add",
    "\\"()\\"",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "&&",
    ".",
    ">",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts PropertyDefinition\`
private readonly distinct = new Set<T>()
\` 1`] = `
Object {
  "operands": Array [
    "distinct",
    "Set",
    "T",
  ],
  "operators": Array [
    "private",
    "readonly",
    "=",
    "new",
    "()",
    "<>",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts PropertyDefinition\`
private readonly total: T[] = []
\` 1`] = `
Object {
  "operands": Array [
    "total",
    "T",
  ],
  "operators": Array [
    "private",
    "readonly",
    "=",
    ":",
    "[]",
    "[]",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts PropertyDefinition\`
public readonly operands = new TokensCollection<string>()
\` 1`] = `
Object {
  "operands": Array [
    "operands",
    "TokensCollection",
    "string",
  ],
  "operators": Array [
    "public",
    "readonly",
    "=",
    "new",
    "()",
    "<>",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts PropertyDefinition\`
public readonly operators = new TokensCollection<Operator>()
\` 1`] = `
Object {
  "operands": Array [
    "operators",
    "TokensCollection",
    "Operator",
  ],
  "operators": Array [
    "public",
    "readonly",
    "=",
    "new",
    "()",
    "<>",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ReturnStatement\`
return
\` 1`] = `
Object {
  "operands": Array [],
  "operators": Array [
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ReturnStatement\`
return 1
\` 1`] = `
Object {
  "operands": Array [
    "1",
  ],
  "operators": Array [
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ReturnStatement\`
return 2
\` 1`] = `
Object {
  "operands": Array [
    "2",
  ],
  "operators": Array [
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ReturnStatement\`
return 3
\` 1`] = `
Object {
  "operands": Array [
    "3",
  ],
  "operators": Array [
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ReturnStatement\`
return 4
\` 1`] = `
Object {
  "operands": Array [
    "4",
  ],
  "operators": Array [
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ReturnStatement\`
return 5
\` 1`] = `
Object {
  "operands": Array [
    "5",
  ],
  "operators": Array [
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ReturnStatement\`
return 6
\` 1`] = `
Object {
  "operands": Array [
    "6",
  ],
  "operators": Array [
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ReturnStatement\`
return 7
\` 1`] = `
Object {
  "operands": Array [
    "7",
  ],
  "operators": Array [
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ReturnStatement\`
return 8
\` 1`] = `
Object {
  "operands": Array [
    "8",
  ],
  "operators": Array [
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ReturnStatement\`
return 9
\` 1`] = `
Object {
  "operands": Array [
    "9",
  ],
  "operators": Array [
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ReturnStatement\`
return 10
\` 1`] = `
Object {
  "operands": Array [
    "10",
  ],
  "operators": Array [
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ReturnStatement\`
return 11
\` 1`] = `
Object {
  "operands": Array [
    "11",
  ],
  "operators": Array [
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ReturnStatement\`
return 12
\` 1`] = `
Object {
  "operands": Array [
    "12",
  ],
  "operators": Array [
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ReturnStatement\`
return 13
\` 1`] = `
Object {
  "operands": Array [
    "13",
  ],
  "operators": Array [
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ReturnStatement\`
return 14
\` 1`] = `
Object {
  "operands": Array [
    "14",
  ],
  "operators": Array [
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ReturnStatement\`
return 14.5
\` 1`] = `
Object {
  "operands": Array [
    "14.5",
  ],
  "operators": Array [
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ReturnStatement\`
return 15
\` 1`] = `
Object {
  "operands": Array [
    "15",
  ],
  "operators": Array [
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ReturnStatement\`
return 16
\` 1`] = `
Object {
  "operands": Array [
    "16",
  ],
  "operators": Array [
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ReturnStatement\`
return 18
\` 1`] = `
Object {
  "operands": Array [
    "18",
  ],
  "operators": Array [
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ReturnStatement\`
return 19
\` 1`] = `
Object {
  "operands": Array [
    "19",
  ],
  "operators": Array [
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ReturnStatement\`
return Infinity
\` 1`] = `
Object {
  "operands": Array [
    "Infinity",
  ],
  "operators": Array [
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ReturnStatement\`
return context
\` 1`] = `
Object {
  "operands": Array [
    "context",
  ],
  "operators": Array [
    "return",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ReturnStatement\`
return this.distinct.size
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "distinct",
    "size",
  ],
  "operators": Array [
    "return",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ReturnStatement\`
return this.total
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "total",
  ],
  "operators": Array [
    "return",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ReturnStatement\`
return this.total.length
\` 1`] = `
Object {
  "operands": Array [
    "this",
    "total",
    "length",
  ],
  "operators": Array [
    "return",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSAnyKeyword\`
any
\` 1`] = `
Object {
  "operands": Array [
    "any",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSArrayType\`
T[]
\` 1`] = `
Object {
  "operands": Array [
    "T",
  ],
  "operators": Array [
    "[]",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSAsExpression\`
EXTRACT_TOKENS[node.type] as any
\` 1`] = `
Object {
  "operands": Array [
    "EXTRACT_TOKENS",
    "node",
    "type",
    "any",
  ],
  "operators": Array [
    "as",
    "[]",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSAsExpression\`
node as TSESTree.Node
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "Node",
  ],
  "operators": Array [
    "as",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSAsExpression\`
node.operator as ESTree.BinaryExpression["operator"]
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "operator",
    "\\"operator\\"",
    "ESTree",
    "BinaryExpression",
  ],
  "operators": Array [
    "as",
    ".",
    "[]",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSClassImplements\`
ExtractTokensResult
\` 1`] = `
Object {
  "operands": Array [
    "ExtractTokensResult",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSIndexedAccessType\`
ESTree.BinaryExpression["operator"]
\` 1`] = `
Object {
  "operands": Array [
    "\\"operator\\"",
    "ESTree",
    "BinaryExpression",
  ],
  "operators": Array [
    "[]",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSIndexedAccessType\`
TSESTree.AssignmentExpression["operator"]
\` 1`] = `
Object {
  "operands": Array [
    "\\"operator\\"",
    "TSESTree",
    "AssignmentExpression",
  ],
  "operators": Array [
    "[]",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSIndexedAccessType\`
TSESTree.LogicalExpression["operator"]
\` 1`] = `
Object {
  "operands": Array [
    "\\"operator\\"",
    "TSESTree",
    "LogicalExpression",
  ],
  "operators": Array [
    "[]",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSIndexedAccessType\`
TSESTree.UnaryExpression["operator"]
\` 1`] = `
Object {
  "operands": Array [
    "\\"operator\\"",
    "TSESTree",
    "UnaryExpression",
  ],
  "operators": Array [
    "[]",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSIndexedAccessType\`
TSESTree.UpdateExpression["operator"]
\` 1`] = `
Object {
  "operands": Array [
    "\\"operator\\"",
    "TSESTree",
    "UpdateExpression",
  ],
  "operators": Array [
    "[]",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSIndexedAccessType\`
TSESTree.VariableDeclaration["kind"]
\` 1`] = `
Object {
  "operands": Array [
    "\\"kind\\"",
    "TSESTree",
    "VariableDeclaration",
  ],
  "operators": Array [
    "[]",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"()"
\` 1`] = `
Object {
  "operands": Array [
    "\\"()\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
","
\` 1`] = `
Object {
  "operands": Array [
    "\\",\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"."
\` 1`] = `
Object {
  "operands": Array [
    "\\".\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"..."
\` 1`] = `
Object {
  "operands": Array [
    "\\"...\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
":"
\` 1`] = `
Object {
  "operands": Array [
    "\\":\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
";"
\` 1`] = `
Object {
  "operands": Array [
    "\\";\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"</"
\` 1`] = `
Object {
  "operands": Array [
    "\\"</\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"<>"
\` 1`] = `
Object {
  "operands": Array [
    "\\"<>\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"=>"
\` 1`] = `
Object {
  "operands": Array [
    "\\"=>\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"?"
\` 1`] = `
Object {
  "operands": Array [
    "\\"?\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"?."
\` 1`] = `
Object {
  "operands": Array [
    "\\"?.\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"?:"
\` 1`] = `
Object {
  "operands": Array [
    "\\"?:\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"@"
\` 1`] = `
Object {
  "operands": Array [
    "\\"@\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"[]"
\` 1`] = `
Object {
  "operands": Array [
    "\\"[]\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"{}"
\` 1`] = `
Object {
  "operands": Array [
    "\\"{}\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"abstract"
\` 1`] = `
Object {
  "operands": Array [
    "\\"abstract\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"as"
\` 1`] = `
Object {
  "operands": Array [
    "\\"as\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"assert"
\` 1`] = `
Object {
  "operands": Array [
    "\\"assert\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"async"
\` 1`] = `
Object {
  "operands": Array [
    "\\"async\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"await"
\` 1`] = `
Object {
  "operands": Array [
    "\\"await\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"break"
\` 1`] = `
Object {
  "operands": Array [
    "\\"break\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"case"
\` 1`] = `
Object {
  "operands": Array [
    "\\"case\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"catch"
\` 1`] = `
Object {
  "operands": Array [
    "\\"catch\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"class"
\` 1`] = `
Object {
  "operands": Array [
    "\\"class\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"continue"
\` 1`] = `
Object {
  "operands": Array [
    "\\"continue\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"debugger"
\` 1`] = `
Object {
  "operands": Array [
    "\\"debugger\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"declare"
\` 1`] = `
Object {
  "operands": Array [
    "\\"declare\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"default"
\` 1`] = `
Object {
  "operands": Array [
    "\\"default\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"do"
\` 1`] = `
Object {
  "operands": Array [
    "\\"do\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"else"
\` 1`] = `
Object {
  "operands": Array [
    "\\"else\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"enum"
\` 1`] = `
Object {
  "operands": Array [
    "\\"enum\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"export"
\` 1`] = `
Object {
  "operands": Array [
    "\\"export\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"extends"
\` 1`] = `
Object {
  "operands": Array [
    "\\"extends\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"finally"
\` 1`] = `
Object {
  "operands": Array [
    "\\"finally\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"for()"
\` 1`] = `
Object {
  "operands": Array [
    "\\"for()\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"from"
\` 1`] = `
Object {
  "operands": Array [
    "\\"from\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"function"
\` 1`] = `
Object {
  "operands": Array [
    "\\"function\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"get"
\` 1`] = `
Object {
  "operands": Array [
    "\\"get\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"if()"
\` 1`] = `
Object {
  "operands": Array [
    "\\"if()\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"implements"
\` 1`] = `
Object {
  "operands": Array [
    "\\"implements\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"import"
\` 1`] = `
Object {
  "operands": Array [
    "\\"import\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"infer"
\` 1`] = `
Object {
  "operands": Array [
    "\\"infer\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"interface"
\` 1`] = `
Object {
  "operands": Array [
    "\\"interface\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"is"
\` 1`] = `
Object {
  "operands": Array [
    "\\"is\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"keyof"
\` 1`] = `
Object {
  "operands": Array [
    "\\"keyof\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"kind"
\` 1`] = `
Object {
  "operands": Array [
    "\\"kind\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"module"
\` 1`] = `
Object {
  "operands": Array [
    "\\"module\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"namespace"
\` 1`] = `
Object {
  "operands": Array [
    "\\"namespace\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"new"
\` 1`] = `
Object {
  "operands": Array [
    "\\"new\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"of"
\` 1`] = `
Object {
  "operands": Array [
    "\\"of\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"operator"
\` 1`] = `
Object {
  "operands": Array [
    "\\"operator\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"private"
\` 1`] = `
Object {
  "operands": Array [
    "\\"private\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"protected"
\` 1`] = `
Object {
  "operands": Array [
    "\\"protected\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"public"
\` 1`] = `
Object {
  "operands": Array [
    "\\"public\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"readonly"
\` 1`] = `
Object {
  "operands": Array [
    "\\"readonly\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"return"
\` 1`] = `
Object {
  "operands": Array [
    "\\"return\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"set"
\` 1`] = `
Object {
  "operands": Array [
    "\\"set\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"static"
\` 1`] = `
Object {
  "operands": Array [
    "\\"static\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"switch()"
\` 1`] = `
Object {
  "operands": Array [
    "\\"switch()\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"throw"
\` 1`] = `
Object {
  "operands": Array [
    "\\"throw\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"try"
\` 1`] = `
Object {
  "operands": Array [
    "\\"try\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"type"
\` 1`] = `
Object {
  "operands": Array [
    "\\"type\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"while()"
\` 1`] = `
Object {
  "operands": Array [
    "\\"while()\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"with()"
\` 1`] = `
Object {
  "operands": Array [
    "\\"with()\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSLiteralType\`
"yield"
\` 1`] = `
Object {
  "operands": Array [
    "\\"yield\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSNullKeyword\`
null
\` 1`] = `
Object {
  "operands": Array [
    "null",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSNumberKeyword\`
number
\` 1`] = `
Object {
  "operands": Array [
    "number",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSPropertySignature\`
readonly operands: TokensCollection<string>
\` 1`] = `
Object {
  "operands": Array [
    "TokensCollection",
    "string",
    "operands",
  ],
  "operators": Array [
    "readonly",
    ":",
    "<>",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSPropertySignature\`
readonly operators: TokensCollection<string>
\` 1`] = `
Object {
  "operands": Array [
    "TokensCollection",
    "string",
    "operators",
  ],
  "operators": Array [
    "readonly",
    ":",
    "<>",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSStringKeyword\`
string
\` 1`] = `
Object {
  "operands": Array [
    "string",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAliasDeclaration\`
type AllVisitor = Required<Visitor>
\` 1`] = `
Object {
  "operands": Array [
    "AllVisitor",
    "Required",
    "Visitor",
  ],
  "operators": Array [
    "type",
    "=",
    "<>",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAliasDeclaration\`
type ExtractTokensResult = {
    readonly operators: TokensCollection<string>
    readonly operands: TokensCollection<string>
}
\` 1`] = `
Object {
  "operands": Array [
    "ExtractTokensResult",
    "TokensCollection",
    "string",
    "operators",
    "TokensCollection",
    "string",
    "operands",
  ],
  "operators": Array [
    "type",
    "=",
    "{}",
    "readonly",
    ":",
    "<>",
    "readonly",
    ":",
    "<>",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAliasDeclaration\`
type Operator =
    | TSESTree.AssignmentExpression["operator"]
    | ESTree.BinaryExpression["operator"]
    | TSESTree.LogicalExpression["operator"]
    | TSESTree.UnaryExpression["operator"]
    | TSESTree.UpdateExpression["operator"]
    | TSESTree.VariableDeclaration["kind"]
    | "()"
    | "[]"
    | "{}"
    | ","
    | "."
    | "=>"
    | "?."
    | "?:"
    | "@"
    | ";"
    | ":"
    | "..."
    | "</" // JSXClosingElement, JSXClosingFragment
    | "async"
    | "await"
    | "break"
    | "catch"
    | "class"
    | "extends"
    | "continue"
    | "debugger"
    | "do"
    | "while()"
    | "export"
    | "type"
    | "as"
    | "default"
    | "for()"
    | "of"
    | "function"
    | "if()"
    | "else"
    | "import"
    | "from"
    | "assert"
    | "static"
    | "get"
    | "set"
    | "new"
    | "return"
    | "case"
    | "switch()"
    | "throw"
    | "try"
    | "finally"
    | "with()"
    | "yield"
    // TS
    | "?"
    | "<>"
    | "private"
    | "protected"
    | "public"
    | "implements"
    | "abstract"
    | "declare"
    | "enum"
    | "infer"
    | "interface"
    | "readonly"
    | "module"
    | "namespace"
    | "keyof"
    | "is"
\` 1`] = `
Object {
  "operands": Array [
    "Operator",
    "\\"operator\\"",
    "TSESTree",
    "AssignmentExpression",
    "\\"operator\\"",
    "ESTree",
    "BinaryExpression",
    "\\"operator\\"",
    "TSESTree",
    "LogicalExpression",
    "\\"operator\\"",
    "TSESTree",
    "UnaryExpression",
    "\\"operator\\"",
    "TSESTree",
    "UpdateExpression",
    "\\"kind\\"",
    "TSESTree",
    "VariableDeclaration",
    "\\"()\\"",
    "\\"[]\\"",
    "\\"{}\\"",
    "\\",\\"",
    "\\".\\"",
    "\\"=>\\"",
    "\\"?.\\"",
    "\\"?:\\"",
    "\\"@\\"",
    "\\";\\"",
    "\\":\\"",
    "\\"...\\"",
    "\\"</\\"",
    "\\"async\\"",
    "\\"await\\"",
    "\\"break\\"",
    "\\"catch\\"",
    "\\"class\\"",
    "\\"extends\\"",
    "\\"continue\\"",
    "\\"debugger\\"",
    "\\"do\\"",
    "\\"while()\\"",
    "\\"export\\"",
    "\\"type\\"",
    "\\"as\\"",
    "\\"default\\"",
    "\\"for()\\"",
    "\\"of\\"",
    "\\"function\\"",
    "\\"if()\\"",
    "\\"else\\"",
    "\\"import\\"",
    "\\"from\\"",
    "\\"assert\\"",
    "\\"static\\"",
    "\\"get\\"",
    "\\"set\\"",
    "\\"new\\"",
    "\\"return\\"",
    "\\"case\\"",
    "\\"switch()\\"",
    "\\"throw\\"",
    "\\"try\\"",
    "\\"finally\\"",
    "\\"with()\\"",
    "\\"yield\\"",
    "\\"?\\"",
    "\\"<>\\"",
    "\\"private\\"",
    "\\"protected\\"",
    "\\"public\\"",
    "\\"implements\\"",
    "\\"abstract\\"",
    "\\"declare\\"",
    "\\"enum\\"",
    "\\"infer\\"",
    "\\"interface\\"",
    "\\"readonly\\"",
    "\\"module\\"",
    "\\"namespace\\"",
    "\\"keyof\\"",
    "\\"is\\"",
  ],
  "operators": Array [
    "type",
    "=",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "[]",
    ".",
    "[]",
    ".",
    "[]",
    ".",
    "[]",
    ".",
    "[]",
    ".",
    "[]",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: AllVisitor
\` 1`] = `
Object {
  "operands": Array [
    "AllVisitor",
  ],
  "operators": Array [
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: ESTree.Node | TSESTree.Node
\` 1`] = `
Object {
  "operands": Array [
    "ESTree",
    "Node",
    "TSESTree",
    "Node",
  ],
  "operators": Array [
    ":",
    "|",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: ExtractTokensContext
\` 1`] = `
Object {
  "operands": Array [
    "ExtractTokensContext",
  ],
  "operators": Array [
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: ExtractTokensResult
\` 1`] = `
Object {
  "operands": Array [
    "ExtractTokensResult",
  ],
  "operators": Array [
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: T
\` 1`] = `
Object {
  "operands": Array [
    "T",
  ],
  "operators": Array [
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: T[]
\` 1`] = `
Object {
  "operands": Array [
    "T",
  ],
  "operators": Array [
    ":",
    "[]",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.ArrayExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ArrayExpression",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.ArrayPattern
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ArrayPattern",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.ArrowFunctionExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ArrowFunctionExpression",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.AssignmentExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "AssignmentExpression",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.AssignmentPattern
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "AssignmentPattern",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.AwaitExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "AwaitExpression",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.BinaryExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "BinaryExpression",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.CallExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "CallExpression",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.CatchClause
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "CatchClause",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.ClassDeclaration
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ClassDeclaration",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.ClassExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ClassExpression",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.ConditionalExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ConditionalExpression",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.ExportAllDeclaration
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ExportAllDeclaration",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.ExportDefaultDeclaration
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ExportDefaultDeclaration",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.ExportNamedDeclaration
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ExportNamedDeclaration",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.ExportSpecifier
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ExportSpecifier",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.Expression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "Expression",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.FunctionDeclaration
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "FunctionDeclaration",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.FunctionExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "FunctionExpression",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.Identifier
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "Identifier",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.IfStatement
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "IfStatement",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.ImportDeclaration
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ImportDeclaration",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.ImportExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ImportExpression",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.ImportSpecifier
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ImportSpecifier",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.JSXIdentifier
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "JSXIdentifier",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.JSXText
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "JSXText",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.Literal
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "Literal",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.LogicalExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "LogicalExpression",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.MemberExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "MemberExpression",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.MethodDefinition
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "MethodDefinition",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.NewExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "NewExpression",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.Node
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "Node",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.Node | null
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "Node",
    "null",
  ],
  "operators": Array [
    ":",
    "|",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.ObjectExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ObjectExpression",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.ObjectPattern
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ObjectPattern",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.PrivateIdentifier
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "PrivateIdentifier",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.Property
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "Property",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.PropertyDefinition
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "PropertyDefinition",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.SequenceExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "SequenceExpression",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.SwitchCase
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "SwitchCase",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.TSAbstractMethodDefinition
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSAbstractMethodDefinition",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.TSAbstractPropertyDefinition
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSAbstractPropertyDefinition",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.TSCallSignatureDeclaration
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSCallSignatureDeclaration",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.TSConstructSignatureDeclaration
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSConstructSignatureDeclaration",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.TSConstructorType
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSConstructorType",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.TSDeclareFunction
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSDeclareFunction",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.TSEmptyBodyFunctionExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSEmptyBodyFunctionExpression",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.TSEnumDeclaration
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSEnumDeclaration",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.TSEnumMember
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSEnumMember",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.TSFunctionType
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSFunctionType",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.TSImportType
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSImportType",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.TSInterfaceDeclaration
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSInterfaceDeclaration",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.TSIntersectionType
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSIntersectionType",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.TSMappedType
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSMappedType",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.TSMethodSignature
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSMethodSignature",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.TSModuleDeclaration
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSModuleDeclaration",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.TSNamedTupleMember
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSNamedTupleMember",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.TSParameterProperty
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSParameterProperty",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.TSPropertySignature
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSPropertySignature",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.TSTypeAnnotation
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSTypeAnnotation",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.TSTypeParameter
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSTypeParameter",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.TSTypeParameterDeclaration
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSTypeParameterDeclaration",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.TSTypeParameterInstantiation
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSTypeParameterInstantiation",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.TSUnionType
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSUnionType",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.TemplateElement
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TemplateElement",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.TryStatement
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TryStatement",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.UnaryExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "UnaryExpression",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.UpdateExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "UpdateExpression",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.VariableDeclaration
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "VariableDeclaration",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.VariableDeclarator
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "VariableDeclarator",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TSESTree.YieldExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "YieldExpression",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: TokensCollection<string>
\` 1`] = `
Object {
  "operands": Array [
    "TokensCollection",
    "string",
  ],
  "operators": Array [
    ":",
    "<>",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: number
\` 1`] = `
Object {
  "operands": Array [
    "number",
  ],
  "operators": Array [
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeAnnotation\`
: void
\` 1`] = `
Object {
  "operands": Array [
    "void",
  ],
  "operators": Array [
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeLiteral\`
{
    readonly operators: TokensCollection<string>
    readonly operands: TokensCollection<string>
}
\` 1`] = `
Object {
  "operands": Array [
    "TokensCollection",
    "string",
    "operators",
    "TokensCollection",
    "string",
    "operands",
  ],
  "operators": Array [
    "{}",
    "readonly",
    ":",
    "<>",
    "readonly",
    ":",
    "<>",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeParameter\`
T
\` 1`] = `
Object {
  "operands": Array [
    "T",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeParameterDeclaration\`
<T>
\` 1`] = `
Object {
  "operands": Array [
    "T",
  ],
  "operators": Array [
    "<>",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeParameterInstantiation\`
<Operator>
\` 1`] = `
Object {
  "operands": Array [
    "Operator",
  ],
  "operators": Array [
    "<>",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeParameterInstantiation\`
<Visitor>
\` 1`] = `
Object {
  "operands": Array [
    "Visitor",
  ],
  "operators": Array [
    "<>",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeParameterInstantiation\`
<string>
\` 1`] = `
Object {
  "operands": Array [
    "string",
  ],
  "operators": Array [
    "<>",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
AllVisitor
\` 1`] = `
Object {
  "operands": Array [
    "AllVisitor",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
ESTree.BinaryExpression
\` 1`] = `
Object {
  "operands": Array [
    "ESTree",
    "BinaryExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
ESTree.Node
\` 1`] = `
Object {
  "operands": Array [
    "ESTree",
    "Node",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
ExtractTokensContext
\` 1`] = `
Object {
  "operands": Array [
    "ExtractTokensContext",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
Operator
\` 1`] = `
Object {
  "operands": Array [
    "Operator",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
Required<Visitor>
\` 1`] = `
Object {
  "operands": Array [
    "Required",
    "Visitor",
  ],
  "operators": Array [
    "<>",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.ArrayExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ArrayExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.ArrayPattern
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ArrayPattern",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.ArrowFunctionExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ArrowFunctionExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.AssignmentExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "AssignmentExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.AssignmentPattern
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "AssignmentPattern",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.AwaitExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "AwaitExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.BinaryExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "BinaryExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.CallExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "CallExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.CatchClause
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "CatchClause",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.ClassDeclaration
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ClassDeclaration",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.ClassExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ClassExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.ConditionalExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ConditionalExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.ExportAllDeclaration
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ExportAllDeclaration",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.ExportDefaultDeclaration
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ExportDefaultDeclaration",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.ExportNamedDeclaration
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ExportNamedDeclaration",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.ExportSpecifier
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ExportSpecifier",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.Expression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "Expression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.FunctionDeclaration
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "FunctionDeclaration",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.FunctionExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "FunctionExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.Identifier
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "Identifier",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.IfStatement
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "IfStatement",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.ImportDeclaration
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ImportDeclaration",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.ImportExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ImportExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.ImportSpecifier
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ImportSpecifier",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.JSXIdentifier
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "JSXIdentifier",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.JSXText
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "JSXText",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.Literal
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "Literal",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.LogicalExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "LogicalExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.MemberExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "MemberExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.MethodDefinition
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "MethodDefinition",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.NewExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "NewExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.Node
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "Node",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.ObjectExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ObjectExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.ObjectPattern
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ObjectPattern",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.PrivateIdentifier
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "PrivateIdentifier",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.Property
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "Property",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.PropertyDefinition
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "PropertyDefinition",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.SequenceExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "SequenceExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.SwitchCase
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "SwitchCase",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.TSAbstractMethodDefinition
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSAbstractMethodDefinition",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.TSAbstractPropertyDefinition
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSAbstractPropertyDefinition",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.TSCallSignatureDeclaration
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSCallSignatureDeclaration",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.TSConstructSignatureDeclaration
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSConstructSignatureDeclaration",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.TSConstructorType
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSConstructorType",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.TSDeclareFunction
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSDeclareFunction",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.TSEmptyBodyFunctionExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSEmptyBodyFunctionExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.TSEnumDeclaration
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSEnumDeclaration",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.TSEnumMember
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSEnumMember",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.TSFunctionType
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSFunctionType",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.TSImportType
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSImportType",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.TSInterfaceDeclaration
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSInterfaceDeclaration",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.TSIntersectionType
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSIntersectionType",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.TSMappedType
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSMappedType",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.TSMethodSignature
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSMethodSignature",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.TSModuleDeclaration
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSModuleDeclaration",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.TSNamedTupleMember
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSNamedTupleMember",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.TSParameterProperty
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSParameterProperty",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.TSPropertySignature
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSPropertySignature",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.TSTypeAnnotation
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSTypeAnnotation",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.TSTypeParameter
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSTypeParameter",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.TSTypeParameterDeclaration
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSTypeParameterDeclaration",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.TSTypeParameterInstantiation
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSTypeParameterInstantiation",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.TSUnionType
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSUnionType",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.TemplateElement
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TemplateElement",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.TryStatement
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TryStatement",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.UnaryExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "UnaryExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.UpdateExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "UpdateExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.VariableDeclaration
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "VariableDeclaration",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.VariableDeclarator
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "VariableDeclarator",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TSESTree.YieldExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "YieldExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSTypeReference\`
TokensCollection<string>
\` 1`] = `
Object {
  "operands": Array [
    "TokensCollection",
    "string",
  ],
  "operators": Array [
    "<>",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSUnionType\`
| TSESTree.AssignmentExpression["operator"]
    | ESTree.BinaryExpression["operator"]
    | TSESTree.LogicalExpression["operator"]
    | TSESTree.UnaryExpression["operator"]
    | TSESTree.UpdateExpression["operator"]
    | TSESTree.VariableDeclaration["kind"]
    | "()"
    | "[]"
    | "{}"
    | ","
    | "."
    | "=>"
    | "?."
    | "?:"
    | "@"
    | ";"
    | ":"
    | "..."
    | "</" // JSXClosingElement, JSXClosingFragment
    | "async"
    | "await"
    | "break"
    | "catch"
    | "class"
    | "extends"
    | "continue"
    | "debugger"
    | "do"
    | "while()"
    | "export"
    | "type"
    | "as"
    | "default"
    | "for()"
    | "of"
    | "function"
    | "if()"
    | "else"
    | "import"
    | "from"
    | "assert"
    | "static"
    | "get"
    | "set"
    | "new"
    | "return"
    | "case"
    | "switch()"
    | "throw"
    | "try"
    | "finally"
    | "with()"
    | "yield"
    // TS
    | "?"
    | "<>"
    | "private"
    | "protected"
    | "public"
    | "implements"
    | "abstract"
    | "declare"
    | "enum"
    | "infer"
    | "interface"
    | "readonly"
    | "module"
    | "namespace"
    | "keyof"
    | "is"
\` 1`] = `
Object {
  "operands": Array [
    "\\"operator\\"",
    "TSESTree",
    "AssignmentExpression",
    "\\"operator\\"",
    "ESTree",
    "BinaryExpression",
    "\\"operator\\"",
    "TSESTree",
    "LogicalExpression",
    "\\"operator\\"",
    "TSESTree",
    "UnaryExpression",
    "\\"operator\\"",
    "TSESTree",
    "UpdateExpression",
    "\\"kind\\"",
    "TSESTree",
    "VariableDeclaration",
    "\\"()\\"",
    "\\"[]\\"",
    "\\"{}\\"",
    "\\",\\"",
    "\\".\\"",
    "\\"=>\\"",
    "\\"?.\\"",
    "\\"?:\\"",
    "\\"@\\"",
    "\\";\\"",
    "\\":\\"",
    "\\"...\\"",
    "\\"</\\"",
    "\\"async\\"",
    "\\"await\\"",
    "\\"break\\"",
    "\\"catch\\"",
    "\\"class\\"",
    "\\"extends\\"",
    "\\"continue\\"",
    "\\"debugger\\"",
    "\\"do\\"",
    "\\"while()\\"",
    "\\"export\\"",
    "\\"type\\"",
    "\\"as\\"",
    "\\"default\\"",
    "\\"for()\\"",
    "\\"of\\"",
    "\\"function\\"",
    "\\"if()\\"",
    "\\"else\\"",
    "\\"import\\"",
    "\\"from\\"",
    "\\"assert\\"",
    "\\"static\\"",
    "\\"get\\"",
    "\\"set\\"",
    "\\"new\\"",
    "\\"return\\"",
    "\\"case\\"",
    "\\"switch()\\"",
    "\\"throw\\"",
    "\\"try\\"",
    "\\"finally\\"",
    "\\"with()\\"",
    "\\"yield\\"",
    "\\"?\\"",
    "\\"<>\\"",
    "\\"private\\"",
    "\\"protected\\"",
    "\\"public\\"",
    "\\"implements\\"",
    "\\"abstract\\"",
    "\\"declare\\"",
    "\\"enum\\"",
    "\\"infer\\"",
    "\\"interface\\"",
    "\\"readonly\\"",
    "\\"module\\"",
    "\\"namespace\\"",
    "\\"keyof\\"",
    "\\"is\\"",
  ],
  "operators": Array [
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "|",
    "[]",
    ".",
    "[]",
    ".",
    "[]",
    ".",
    "[]",
    ".",
    "[]",
    ".",
    "[]",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSUnionType\`
ESTree.Node | TSESTree.Node
\` 1`] = `
Object {
  "operands": Array [
    "ESTree",
    "Node",
    "TSESTree",
    "Node",
  ],
  "operators": Array [
    "|",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSUnionType\`
TSESTree.Node | null
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "Node",
    "null",
  ],
  "operators": Array [
    "|",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TSVoidKeyword\`
void
\` 1`] = `
Object {
  "operands": Array [
    "void",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TemplateElement\`
\`#\${
\` 1`] = `
Object {
  "operands": Array [
    "\`#\`",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TemplateElement\`
\`\${
\` 1`] = `
Object {
  "operands": Array [
    "\`\`",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TemplateElement\`
\`/\${
\` 1`] = `
Object {
  "operands": Array [
    "\`/\`",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TemplateElement\`
\`Unknown operator precedence:\${
\` 1`] = `
Object {
  "operands": Array [
    "\`Unknown operator precedence:\`",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TemplateElement\`
}\${
\` 1`] = `
Object {
  "operands": Array [
    "\`\`",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TemplateElement\`
}/\${
\` 1`] = `
Object {
  "operands": Array [
    "\`/\`",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TemplateElement\`
}\`
\` 1`] = `
Object {
  "operands": Array [
    "\`\`",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TemplateElement\`
}n\`
\` 1`] = `
Object {
  "operands": Array [
    "\`n\`",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TemplateLiteral\`
\`#\${node.name}\`
\` 1`] = `
Object {
  "operands": Array [
    "\`#\${",
    "}\`",
    "node",
    "name",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TemplateLiteral\`
\`\${node.bigint}n\`
\` 1`] = `
Object {
  "operands": Array [
    "\`\${",
    "}n\`",
    "node",
    "bigint",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TemplateLiteral\`
\`\${open}\${node.value.cooked}\${close}\`
\` 1`] = `
Object {
  "operands": Array [
    "\`\${",
    "}\${",
    "}\${",
    "}\`",
    "open",
    "node",
    "value",
    "cooked",
    "close",
  ],
  "operators": Array [
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TemplateLiteral\`
\`/\${node.regex.pattern}/\${node.regex.flags}\`
\` 1`] = `
Object {
  "operands": Array [
    "\`/\${",
    "}/\${",
    "}\`",
    "node",
    "regex",
    "pattern",
    "node",
    "regex",
    "flags",
  ],
  "operators": Array [
    ".",
    ".",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts TemplateLiteral\`
\`Unknown operator precedence:\${node.operator}\`
\` 1`] = `
Object {
  "operands": Array [
    "\`Unknown operator precedence:\${",
    "}\`",
    "node",
    "operator",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ThisExpression\`
this
\` 1`] = `
Object {
  "operands": Array [
    "this",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts ThrowStatement\`
throw new Error(\`Unknown operator precedence:\${node.operator}\`)
\` 1`] = `
Object {
  "operands": Array [
    "Error",
    "\`Unknown operator precedence:\${",
    "}\`",
    "node",
    "operator",
  ],
  "operators": Array [
    "throw",
    "new",
    "()",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts UnaryExpression\`
!node.global
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "global",
  ],
  "operators": Array [
    "!",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts UnaryExpression\`
!node.method
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "method",
  ],
  "operators": Array [
    "!",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts UnaryExpression\`
!node.shorthand
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "shorthand",
  ],
  "operators": Array [
    "!",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts UnaryExpression\`
!parent
\` 1`] = `
Object {
  "operands": Array [
    "parent",
  ],
  "operators": Array [
    "!",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts UnaryExpression\`
!parent.method
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "method",
  ],
  "operators": Array [
    "!",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts UnaryExpression\`
typeof node.optional
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "optional",
  ],
  "operators": Array [
    "typeof",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts UnaryExpression\`
typeof node.readonly
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "readonly",
  ],
  "operators": Array [
    "typeof",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts UpdateExpression\`
index++
\` 1`] = `
Object {
  "operands": Array [
    "index",
  ],
  "operators": Array [
    "++",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts VariableDeclaration\`
const EXTRACT_TOKENS: AllVisitor = {
    ArrayExpression(
        this: ExtractTokensContext,
        node: TSESTree.ArrayExpression,
    ) {
        this.operators.add("[]")
        this.operators.add(",", node.elements.length - 1)
    },
    ArrayPattern(this: ExtractTokensContext, node: TSESTree.ArrayPattern) {
        this.operators.add("[]")
        this.operators.add(",", node.elements.length - 1)
    },
    ArrowFunctionExpression(
        this: ExtractTokensContext,
        node: TSESTree.ArrowFunctionExpression,
    ) {
        if (node.async) {
            this.operators.add("async")
        }
        if (node.generator) {
            // It cannot actually be used.
            this.operators.add("*")
        }
        if (
            node.params.length !== 1 ||
            node.params[0].type !== AST_NODE_TYPES.Identifier ||
            node.params[0].typeAnnotation
        ) {
            this.operators.add("()")
        }
        this.operators.add(",", node.params.length - 1)

        this.operators.add("=>")

        if (node.body.type === AST_NODE_TYPES.ObjectExpression) {
            this.operators.add("()")
        }
    },
    AssignmentExpression(
        this: ExtractTokensContext,
        node: TSESTree.AssignmentExpression,
    ) {
        this.operators.add(node.operator)

        if (getPrecedence(node) >= getPrecedence(node.right)) {
            this.operators.add("()")
        }
    },
    AssignmentPattern(
        this: ExtractTokensContext,
        _node: TSESTree.AssignmentPattern,
    ) {
        this.operators.add("=")
    },
    AwaitExpression(
        this: ExtractTokensContext,
        node: TSESTree.AwaitExpression,
    ) {
        this.operators.add("await")

        if (getPrecedence(node) > getPrecedence(node.argument)) {
            this.operators.add("()")
        }
    },
    BinaryExpression(
        this: ExtractTokensContext,
        node: TSESTree.BinaryExpression,
    ) {
        this.operators.add(node.operator as ESTree.BinaryExpression["operator"])

        if (getPrecedence(node) >= getPrecedence(node.right)) {
            this.operators.add("()")
        }
    },
    BlockStatement(this: ExtractTokensContext) {
        this.operators.add("{}")
    },
    BreakStatement(this: ExtractTokensContext) {
        this.operators.add("break")
    },
    CallExpression(this: ExtractTokensContext, node: TSESTree.CallExpression) {
        if (node.optional) {
            this.operators.add("?.")
        }
        this.operators.add("()")
        this.operators.add(",", node.arguments.length - 1)
    },
    CatchClause(this: ExtractTokensContext, node: TSESTree.CatchClause) {
        this.operators.add("catch")
        if (node.param) {
            this.operators.add("()")
        }
    },
    ChainExpression: noop,
    ClassBody(this: ExtractTokensContext) {
        this.operators.add("{}")
    },
    ClassDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.ClassDeclaration,
    ) {
        this.operators.add("class")
        if (node.superClass) {
            this.operators.add("extends")
        }
        if (node.implements) {
            this.operators.add("implements")
            this.operators.add(",", node.implements.length - 1)
        }
        if (node.abstract) {
            this.operators.add("abstract")
        }
        if (node.declare) this.operators.add("declare")
    },
    ClassExpression(
        this: ExtractTokensContext,
        node: TSESTree.ClassExpression,
    ) {
        this.operators.add("class")
        if (node.superClass) {
            this.operators.add("extends")
        }
        if (node.implements) {
            this.operators.add("implements")
        }
        if (node.abstract) {
            this.operators.add("abstract")
        }
        if (node.declare) this.operators.add("declare")
    },
    ConditionalExpression(
        this: ExtractTokensContext,
        node: TSESTree.ConditionalExpression,
    ) {
        if (getPrecedence(node) >= getPrecedence(node.test)) {
            this.operators.add("()")
        }
        this.operators.add("?:")
    },
    ContinueStatement(this: ExtractTokensContext) {
        this.operators.add("continue")
    },
    DebuggerStatement(this: ExtractTokensContext) {
        this.operators.add("debugger")
    },
    Decorator(this: ExtractTokensContext) {
        this.operators.add("@")
    },
    DoWhileStatement(this: ExtractTokensContext) {
        this.operators.add("do")
        this.operators.add("while()")
    },
    EmptyStatement(this: ExtractTokensContext) {
        this.operators.add(";")
    },
    ExportAllDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.ExportAllDeclaration,
    ) {
        this.operators.add("export")
        if (node.exportKind === "type") {
            this.operators.add("type")
        }
        this.operators.add("*")
        if (node.exported) {
            this.operators.add("as")
        }
        if (node.source) {
            this.operators.add("from")
        }
        if (node.assertions && node.assertions.length) {
            this.operators.add("assert")
            this.operators.add("{}")
        }
    },
    ExportDefaultDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.ExportDefaultDeclaration,
    ) {
        this.operators.add("export")
        if (node.exportKind === "type") {
            this.operators.add("type")
        }
        this.operators.add("default")
    },
    ExportNamedDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.ExportNamedDeclaration,
    ) {
        this.operators.add("export")
        if (node.specifiers.length) {
            if (node.exportKind === "type") {
                this.operators.add("type")
            }
            this.operators.add("{}")
            this.operators.add(",", node.specifiers.length - 1)
        }
        if (node.source) {
            this.operators.add("from")
        }
        if (node.assertions && node.assertions.length) {
            this.operators.add("assert")
            this.operators.add("{}")
        }
    },
    ExportSpecifier(
        this: ExtractTokensContext,
        node: TSESTree.ExportSpecifier,
    ) {
        if (node.exportKind === "type") {
            this.operators.add("type")
        }
        if (node.local.name !== node.exported.name) {
            this.operators.add("as")
        }
    },
    ExpressionStatement: noop,
    ForInStatement(this: ExtractTokensContext) {
        this.operators.add("for()")
        this.operators.add("in")
    },
    ForOfStatement(this: ExtractTokensContext) {
        this.operators.add("for()")
        this.operators.add("of")
    },
    ForStatement(this: ExtractTokensContext) {
        this.operators.add("for()")
        this.operators.add(";", 2)
    },
    FunctionDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.FunctionDeclaration,
    ) {
        if (node.async) {
            this.operators.add("async")
        }
        this.operators.add("function")
        if (node.generator) {
            this.operators.add("*")
        }
        this.operators.add("()")
        this.operators.add(",", node.params.length - 1)

        if (node.declare) this.operators.add("declare")
    },
    FunctionExpression(
        this: ExtractTokensContext,
        node: TSESTree.FunctionExpression,
        parent: TSESTree.Node | null,
    ) {
        if (node.async) {
            this.operators.add("async")
        }

        if (
            !parent ||
            parent.type !== AST_NODE_TYPES.MethodDefinition &&
                (parent.type !== AST_NODE_TYPES.Property || !parent.method) &&
                parent.type !== AST_NODE_TYPES.TSAbstractMethodDefinition
        ) {
            this.operators.add("function")
        }

        if (node.generator) {
            this.operators.add("*")
        }
        this.operators.add("()")
        this.operators.add(",", node.params.length - 1)

        if (node.declare) this.operators.add("declare")
    },
    Identifier(
        this: ExtractTokensContext,
        node: TSESTree.Identifier,
        parent: TSESTree.Node | null,
    ) {
        if (parent) {
            if (
                parent.type === AST_NODE_TYPES.Property &&
                parent.shorthand &&
                parent.value === node
            )
                return
            if (
                parent.type === AST_NODE_TYPES.ImportSpecifier &&
                parent.imported.name === node.name &&
                parent.local === node
            )
                return
            if (
                parent.type === AST_NODE_TYPES.ExportSpecifier &&
                parent.local.name === node.name &&
                parent.exported === node
            )
                return
        }
        this.operands.add(node.name)
    },
    IfStatement(this: ExtractTokensContext, node: TSESTree.IfStatement) {
        this.operators.add("if()")
        if (node.alternate) {
            this.operators.add("else")
        }
    },
    ImportAttribute(this: ExtractTokensContext) {
        this.operators.add(":")
    },
    ImportDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.ImportDeclaration,
    ) {
        this.operators.add("import")
        if (node.importKind === "type") {
            this.operators.add("type")
        }
        if (
            node.specifiers.some(
                (spec) => spec.type === AST_NODE_TYPES.ImportSpecifier,
            )
        ) {
            this.operators.add("{}")
            this.operators.add(",", node.specifiers.length - 1)
        }
        if (node.specifiers.length) {
            this.operators.add("from")
        }
        if (node.assertions && node.assertions.length) {
            this.operators.add("assert")
            this.operators.add("{}")
        }
    },
    ImportDefaultSpecifier: noop,
    ImportExpression(
        this: ExtractTokensContext,
        node: TSESTree.ImportExpression,
    ) {
        this.operators.add("import")
        if (node.attributes) {
            this.operators.add(",")
        }
    },
    ImportNamespaceSpecifier(this: ExtractTokensContext) {
        this.operators.add("*")
        this.operators.add("as")
    },
    ImportSpecifier(
        this: ExtractTokensContext,
        node: TSESTree.ImportSpecifier,
    ) {
        if (node.importKind === "type") {
            this.operators.add("type")
        }
        if (node.local.name !== node.imported.name) {
            this.operators.add("as")
        }
    },
    JSXAttribute(this: ExtractTokensContext) {
        this.operators.add("=")
    },
    JSXClosingElement(this: ExtractTokensContext) {
        this.operators.add("</")
        this.operators.add(">")
    },
    JSXClosingFragment(this: ExtractTokensContext) {
        this.operators.add("</")
        this.operators.add(">")
    },
    JSXElement: noop,
    JSXEmptyExpression: noop,
    JSXExpressionContainer(this: ExtractTokensContext) {
        this.operators.add("{}")
    },
    JSXFragment: noop,
    JSXIdentifier(this: ExtractTokensContext, node: TSESTree.JSXIdentifier) {
        this.operands.add(node.name)
    },
    JSXMemberExpression(this: ExtractTokensContext) {
        this.operators.add(".")
    },
    JSXNamespacedName(this: ExtractTokensContext) {
        this.operators.add(":")
    },
    JSXOpeningElement(this: ExtractTokensContext) {
        this.operators.add("<")
        this.operators.add(">")
    },
    JSXOpeningFragment(this: ExtractTokensContext) {
        this.operators.add("<")
        this.operators.add(">")
    },
    JSXSpreadAttribute(this: ExtractTokensContext) {
        this.operators.add("{}")
        this.operators.add("...")
    },
    JSXSpreadChild(this: ExtractTokensContext) {
        this.operators.add("{}")
        this.operators.add("...")
    },
    JSXText(this: ExtractTokensContext, node: TSESTree.JSXText) {
        this.operands.add(JSON.stringify(node.value))
    },
    LabeledStatement(this: ExtractTokensContext) {
        this.operators.add(":")
    },
    Literal(this: ExtractTokensContext, node: TSESTree.Literal) {
        if ("bigint" in node && node.bigint) {
            this.operands.add(\`\${node.bigint}n\`)
        } else if ("regex" in node && node.regex) {
            this.operands.add(\`/\${node.regex.pattern}/\${node.regex.flags}\`)
        } else {
            this.operands.add(JSON.stringify(node.value))
        }
    },
    LogicalExpression(
        this: ExtractTokensContext,
        node: TSESTree.LogicalExpression,
    ) {
        this.operators.add(node.operator)

        if (getPrecedence(node) >= getPrecedence(node.right)) {
            this.operators.add("()")
        }
    },
    MemberExpression(
        this: ExtractTokensContext,
        node: TSESTree.MemberExpression,
    ) {
        if (getPrecedence(node) > getPrecedence(node.object)) {
            this.operators.add("()")
        }
        if (node.optional) {
            this.operators.add("?.")
            if (node.computed) {
                this.operators.add("[]")
            }
        } else if (node.computed) {
            this.operators.add("[]")
        } else {
            this.operators.add(".")
        }
    },
    MetaProperty(this: ExtractTokensContext) {
        this.operators.add(".")
    },
    MethodDefinition(
        this: ExtractTokensContext,
        node: TSESTree.MethodDefinition,
    ) {
        if (node.accessibility) this.operators.add(node.accessibility)
        if (node.static) this.operators.add("static")
        if (node.kind === "get" || node.kind === "set")
            this.operators.add(node.kind)
        if (node.computed) {
            this.operators.add("[]")
        }
    },
    NewExpression(this: ExtractTokensContext, node: TSESTree.NewExpression) {
        this.operators.add("new")

        if (getPrecedence(node) >= getPrecedence(node.callee)) {
            this.operators.add("()")
        }

        this.operators.add("()")
        this.operators.add(",", node.arguments.length - 1)
    },
    ObjectExpression(
        this: ExtractTokensContext,
        node: TSESTree.ObjectExpression,
    ) {
        this.operators.add("{}")
        this.operators.add(",", node.properties.length - 1)
    },
    ObjectPattern(this: ExtractTokensContext, node: TSESTree.ObjectPattern) {
        this.operators.add("{}")
        this.operators.add(",", node.properties.length - 1)
    },
    PrivateIdentifier(
        this: ExtractTokensContext,
        node: TSESTree.PrivateIdentifier,
    ) {
        this.operands.add(\`#\${node.name}\`)
    },
    Program: noop,
    Property(this: ExtractTokensContext, node: TSESTree.Property) {
        if (node.kind === "get" || node.kind === "set")
            this.operators.add(node.kind)
        if (node.computed) {
            this.operators.add("[]")
        }
        if (!node.shorthand && !node.method) {
            this.operators.add(":")
        }
    },
    PropertyDefinition(
        this: ExtractTokensContext,
        node: TSESTree.PropertyDefinition,
    ) {
        if (node.accessibility) this.operators.add(node.accessibility)
        if (node.static) this.operators.add("static")
        if (node.readonly) this.operators.add("readonly")
        if (node.computed) {
            this.operators.add("[]")
        }
        if (node.value) {
            this.operators.add("=")
        }
    },
    RestElement(this: ExtractTokensContext) {
        this.operators.add("...")
    },
    ReturnStatement(this: ExtractTokensContext) {
        this.operators.add("return")
    },
    SequenceExpression(
        this: ExtractTokensContext,
        node: TSESTree.SequenceExpression,
    ) {
        this.operators.add(",", node.expressions.length - 1)
    },
    SpreadElement(this: ExtractTokensContext) {
        this.operators.add("...")
    },
    StaticBlock(this: ExtractTokensContext) {
        this.operators.add("static")
        this.operators.add("{}")
    },
    Super(this: ExtractTokensContext) {
        this.operands.add("super")
    },
    SwitchCase(this: ExtractTokensContext, node: TSESTree.SwitchCase) {
        if (node.test) {
            this.operators.add("case")
        } else {
            this.operators.add("default")
        }
        this.operators.add(":")
    },
    SwitchStatement(this: ExtractTokensContext) {
        this.operators.add("switch()")
        this.operators.add("{}")
    },
    TaggedTemplateExpression: noop,
    TemplateElement(
        this: ExtractTokensContext,
        node: TSESTree.TemplateElement,
        parent: TSESTree.Node | null,
    ) {
        let open = "\`"
        let close = "\`"
        if (
            parent &&
            (parent.type === AST_NODE_TYPES.TemplateLiteral ||
                parent.type === AST_NODE_TYPES.TSTemplateLiteralType)
        ) {
            const index = parent.quasis.indexOf(node)
            if (index > 0) {
                open = "}"
            }
            if (index < parent.quasis.length - 1) {
                close = "\${"
            }
        }
        this.operands.add(\`\${open}\${node.value.cooked}\${close}\`)
    },
    TemplateLiteral: noop,
    ThisExpression(this: ExtractTokensContext) {
        this.operands.add("this")
    },
    ThrowStatement(this: ExtractTokensContext) {
        this.operators.add("throw")
    },
    TryStatement(this: ExtractTokensContext, node: TSESTree.TryStatement) {
        this.operators.add("try")
        if (node.finalizer) {
            this.operators.add("finally")
        }
    },
    UnaryExpression(
        this: ExtractTokensContext,
        node: TSESTree.UnaryExpression,
    ) {
        this.operators.add(node.operator)

        if (getPrecedence(node) >= getPrecedence(node.argument)) {
            this.operators.add("()")
        }
    },
    UpdateExpression(
        this: ExtractTokensContext,
        node: TSESTree.UpdateExpression,
    ) {
        this.operators.add(node.operator)

        if (getPrecedence(node) >= getPrecedence(node.argument)) {
            this.operators.add("()")
        }
    },
    VariableDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.VariableDeclaration,
    ) {
        this.operators.add(node.kind)
        this.operators.add(",", node.declarations.length - 1)

        if (node.declare) this.operators.add("declare")
    },
    VariableDeclarator(
        this: ExtractTokensContext,
        node: TSESTree.VariableDeclarator,
    ) {
        if (node.init) {
            this.operators.add("=")
        }
    },
    WhileStatement(this: ExtractTokensContext) {
        this.operators.add("while()")
    },
    WithStatement(this: ExtractTokensContext) {
        this.operators.add("with()")
    },
    YieldExpression(
        this: ExtractTokensContext,
        node: TSESTree.YieldExpression,
    ) {
        this.operators.add("yield")
        if (node.delegate) {
            this.operators.add("*")
        }
        if (
            node.argument &&
            getPrecedence(node) > getPrecedence(node.argument)
        ) {
            this.operators.add("()")
        }
    },

    // TS
    TSAbstractKeyword(this: ExtractTokensContext) {
        this.operators.add("abstract")
    },
    TSAbstractMethodDefinition(
        this: ExtractTokensContext,
        node: TSESTree.TSAbstractMethodDefinition,
    ) {
        this.operators.add("abstract")
        if (node.accessibility) this.operators.add(node.accessibility)
        if (node.static) this.operators.add("static")
        if (node.kind === "get" || node.kind === "set")
            this.operators.add(node.kind)
        if (node.computed) {
            this.operators.add("[]")
        }
    },
    TSAbstractPropertyDefinition(
        this: ExtractTokensContext,
        node: TSESTree.TSAbstractPropertyDefinition,
    ) {
        this.operators.add("abstract")
        if (node.accessibility) this.operators.add(node.accessibility)
        if (node.static) this.operators.add("static")
        if (node.computed) {
            this.operators.add("[]")
        }
        if (node.value) {
            this.operators.add("=")
        }
    },
    TSAnyKeyword(this: ExtractTokensContext) {
        this.operands.add("any")
    },
    TSArrayType(this: ExtractTokensContext) {
        this.operators.add("[]")
    },
    TSAsExpression(this: ExtractTokensContext) {
        this.operators.add("as")
    },
    TSAsyncKeyword(this: ExtractTokensContext) {
        this.operators.add("async")
    },
    TSBigIntKeyword(this: ExtractTokensContext) {
        this.operands.add("bigint")
    },
    TSBooleanKeyword(this: ExtractTokensContext) {
        this.operands.add("boolean")
    },
    TSCallSignatureDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.TSCallSignatureDeclaration,
    ) {
        this.operators.add("()")
        this.operators.add(",", node.params.length - 1)
    },
    TSClassImplements: noop,
    TSConditionalType(this: ExtractTokensContext) {
        this.operators.add("extends")
        this.operators.add("?:")
    },
    TSConstructSignatureDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.TSConstructSignatureDeclaration,
    ) {
        this.operators.add("new")
        this.operators.add("()")
        this.operators.add(",", node.params.length - 1)
    },
    TSConstructorType(
        this: ExtractTokensContext,
        node: TSESTree.TSConstructorType,
    ) {
        this.operators.add("new")
        this.operators.add("()")
        this.operators.add(",", node.params.length - 1)
    },
    TSDeclareFunction(
        this: ExtractTokensContext,
        node: TSESTree.TSDeclareFunction,
    ) {
        if (node.async) {
            this.operators.add("async")
        }
        this.operators.add("function")
        if (node.generator) {
            this.operators.add("*")
        }
        this.operators.add("()")
        this.operators.add(",", node.params.length - 1)
    },
    TSDeclareKeyword(this: ExtractTokensContext) {
        this.operators.add("declare")
    },
    TSEmptyBodyFunctionExpression(
        this: ExtractTokensContext,
        node: TSESTree.TSEmptyBodyFunctionExpression,
        parent: TSESTree.Node | null,
    ) {
        if (node.async) {
            this.operators.add("async")
        }

        if (
            !parent ||
            parent.type !== AST_NODE_TYPES.MethodDefinition &&
                (parent.type !== AST_NODE_TYPES.Property || !parent.method) &&
                parent.type !== AST_NODE_TYPES.TSAbstractMethodDefinition
        ) {
            this.operators.add("function")
        }

        if (node.generator) {
            this.operators.add("*")
        }
        this.operators.add("()")
        this.operators.add(",", node.params.length - 1)

        if (node.declare) this.operators.add("declare")
    },
    TSEnumDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.TSEnumDeclaration,
    ) {
        if (node.const) this.operators.add("const")
        this.operators.add("enum")
        this.operators.add("{}")
        this.operators.add(",", node.members.length - 1)

        if (node.declare) this.operators.add("declare")
    },
    TSEnumMember(this: ExtractTokensContext, node: TSESTree.TSEnumMember) {
        if (node.computed) {
            this.operators.add("[]")
        }
        if (node.initializer) {
            this.operators.add("=")
        }
    },
    TSExportAssignment(this: ExtractTokensContext) {
        this.operators.add("export")
        this.operators.add("=")
    },
    TSExportKeyword(this: ExtractTokensContext) {
        this.operators.add("export")
    },
    TSExternalModuleReference(this: ExtractTokensContext) {
        this.operands.add("require")
        this.operators.add("()")
    },
    TSFunctionType(this: ExtractTokensContext, node: TSESTree.TSFunctionType) {
        this.operators.add("()")
        this.operators.add(",", node.params.length - 1)
    },
    TSImportEqualsDeclaration(this: ExtractTokensContext) {
        this.operators.add("import")
        this.operators.add("=")
    },
    TSImportType(this: ExtractTokensContext, node: TSESTree.TSImportType) {
        this.operators.add("import")
        this.operators.add("()")
        if (node.qualifier) {
            this.operators.add(".")
        }
    },
    TSIndexSignature(this: ExtractTokensContext, node) {
        this.operators.add("[]")
        if (node.readonly) this.operators.add("readonly")
        if (node.static) this.operators.add("static")
        if (node.export) this.operators.add("export")
    },
    TSIndexedAccessType(this: ExtractTokensContext) {
        this.operators.add("[]")
    },
    TSInferType(this: ExtractTokensContext) {
        this.operators.add("infer")
    },
    TSInterfaceBody(this: ExtractTokensContext) {
        this.operators.add("{}")
    },
    TSInterfaceDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.TSInterfaceDeclaration,
    ) {
        this.operators.add("interface")
        if (node.extends) {
            this.operators.add("extends")
            this.operators.add(",", node.extends.length - 1)
        }
        if (node.implements) {
            this.operators.add("implements")
            this.operators.add(",", node.implements.length - 1)
        }
        if (node.abstract) {
            this.operators.add("abstract")
        }
        if (node.declare) this.operators.add("declare")
    },
    TSInterfaceHeritage: noop,
    TSIntersectionType(
        this: ExtractTokensContext,
        node: TSESTree.TSIntersectionType,
    ) {
        this.operators.add("&", node.types.length - 1)
    },
    TSIntrinsicKeyword(this: ExtractTokensContext) {
        this.operands.add("intrinsic")
    },
    TSLiteralType: noop,
    TSMappedType(this: ExtractTokensContext, node: TSESTree.TSMappedType) {
        this.operators.add("{}")
        if (node.readonly) {
            if (typeof node.readonly === "string") {
                this.operators.add(node.readonly)
            }
            this.operators.add("readonly")
        }

        this.operators.add("[]")
        if (node.optional) {
            if (typeof node.optional === "string") {
                this.operators.add(node.optional)
            }
            this.operators.add("?")
        }
        this.operators.add(":")
    },
    TSMethodSignature(
        this: ExtractTokensContext,
        node: TSESTree.TSMethodSignature,
    ) {
        if (node.accessibility) this.operators.add(node.accessibility)
        if (node.readonly) this.operators.add("readonly")
        if (node.static) this.operators.add("static")
        if (node.export) this.operators.add("export")
        if (node.kind === "get" || node.kind === "set")
            this.operators.add(node.kind)
        if (node.computed) this.operators.add("[]")
        if (node.optional) this.operators.add("?")

        this.operators.add("()")
        this.operators.add(",", node.params.length - 1)
    },
    TSModuleBlock(this: ExtractTokensContext) {
        this.operators.add("{}")
    },
    TSModuleDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.TSModuleDeclaration,
    ) {
        if (node.declare) this.operators.add("declare")
        if (!node.global) {
            this.operators.add("module")
        }
    },
    TSNamespaceExportDeclaration(this: ExtractTokensContext) {
        this.operators.add("export")
        this.operators.add("as")
        this.operators.add("namespace")
    },
    TSNamedTupleMember(
        this: ExtractTokensContext,
        node: TSESTree.TSNamedTupleMember,
    ) {
        if (node.optional) this.operators.add("?")
        this.operators.add(":")
    },
    TSNeverKeyword(this: ExtractTokensContext) {
        this.operands.add("never")
    },
    TSNonNullExpression(this: ExtractTokensContext) {
        this.operators.add("!")
    },
    TSNullKeyword(this: ExtractTokensContext) {
        this.operands.add("null")
    },
    TSNumberKeyword(this: ExtractTokensContext) {
        this.operands.add("number")
    },
    TSObjectKeyword(this: ExtractTokensContext) {
        this.operands.add("object")
    },
    TSOptionalType(this: ExtractTokensContext) {
        this.operators.add("?")
    },
    TSParameterProperty(
        this: ExtractTokensContext,
        node: TSESTree.TSParameterProperty,
    ) {
        if (node.accessibility) this.operators.add(node.accessibility)
        if (node.readonly) this.operators.add("readonly")
        if (node.static) this.operators.add("static")
        if (node.export) this.operators.add("export")
    },
    TSPrivateKeyword(this: ExtractTokensContext) {
        this.operators.add("private")
    },
    TSPropertySignature(
        this: ExtractTokensContext,
        node: TSESTree.TSPropertySignature,
    ) {
        if (node.accessibility) this.operators.add(node.accessibility)
        if (node.readonly) this.operators.add("readonly")
        if (node.static) this.operators.add("static")
        if (node.export) this.operators.add("export")
        if (node.computed) this.operators.add("[]")
        if (node.optional) this.operators.add("?")
    },
    TSProtectedKeyword(this: ExtractTokensContext) {
        this.operators.add("protected")
    },
    TSPublicKeyword(this: ExtractTokensContext) {
        this.operators.add("public")
    },
    TSQualifiedName(this: ExtractTokensContext) {
        this.operators.add(".")
    },
    TSReadonlyKeyword(this: ExtractTokensContext) {
        this.operators.add("readonly")
    },
    TSRestType(this: ExtractTokensContext) {
        this.operators.add("...")
    },
    TSStaticKeyword(this: ExtractTokensContext) {
        this.operators.add("static")
    },
    TSStringKeyword(this: ExtractTokensContext) {
        this.operands.add("string")
    },
    TSSymbolKeyword(this: ExtractTokensContext) {
        this.operands.add("symbol")
    },
    TSTemplateLiteralType: noop,
    TSThisType(this: ExtractTokensContext) {
        this.operands.add("this")
    },
    TSTupleType(this: ExtractTokensContext, node) {
        this.operators.add("[]")
        this.operators.add(",", node.elementTypes.length - 1)
    },
    TSTypeAliasDeclaration(this: ExtractTokensContext) {
        this.operators.add("type")
        this.operators.add("=")
    },
    TSTypeAnnotation(
        this: ExtractTokensContext,
        node: TSESTree.TSTypeAnnotation,
        parent: TSESTree.Node | null,
    ) {
        if (parent) {
            if (
                parent.type === AST_NODE_TYPES.TSFunctionType &&
                    parent.returnType === node ||
                parent.type === AST_NODE_TYPES.TSConstructorType &&
                    parent.returnType === node
            ) {
                this.operators.add("=>")
                return
            }
            if (parent.type === AST_NODE_TYPES.TSTypePredicate) {
                return
            }
        }
        this.operators.add(":")
    },
    TSTypeAssertion(this: ExtractTokensContext) {
        this.operators.add("<>")
    },
    TSTypeLiteral(this: ExtractTokensContext) {
        this.operators.add("{}")
    },
    TSTypeOperator(this: ExtractTokensContext) {
        this.operators.add("keyof")
    },
    TSTypeParameter(
        this: ExtractTokensContext,
        node: TSESTree.TSTypeParameter,
        parent,
    ) {
        if (node.constraint) {
            if (
                parent &&
                parent.type === AST_NODE_TYPES.TSMappedType &&
                parent.typeParameter === node
            ) {
                this.operators.add("in")
            } else {
                this.operators.add("extends")
            }
        }
        if (node.default) {
            this.operators.add("=")
        }
    },
    TSTypeParameterDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.TSTypeParameterDeclaration,
    ) {
        this.operators.add("<>")
        this.operators.add(",", node.params.length - 1)
    },
    TSTypeParameterInstantiation(
        this: ExtractTokensContext,
        node: TSESTree.TSTypeParameterInstantiation,
    ) {
        this.operators.add("<>")
        this.operators.add(",", node.params.length - 1)
    },
    TSTypePredicate(this: ExtractTokensContext) {
        this.operators.add("is")
    },
    TSTypeQuery(this: ExtractTokensContext) {
        this.operators.add("typeof")
    },
    TSTypeReference: noop,
    TSUndefinedKeyword(this: ExtractTokensContext) {
        this.operands.add("undefined")
    },
    TSUnionType(this: ExtractTokensContext, node: TSESTree.TSUnionType) {
        this.operators.add("|", node.types.length - 1)
    },
    TSUnknownKeyword(this: ExtractTokensContext) {
        this.operands.add("unknown")
    },
    TSVoidKeyword(this: ExtractTokensContext) {
        this.operands.add("void")
    },
}
\` 1`] = `
Object {
  "operands": Array [
    "EXTRACT_TOKENS",
    "AllVisitor",
    "ArrayExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ArrayExpression",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "elements",
    "length",
    "1",
    "ArrayPattern",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ArrayPattern",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "elements",
    "length",
    "1",
    "ArrowFunctionExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ArrowFunctionExpression",
    "node",
    "async",
    "this",
    "operators",
    "add",
    "\\"async\\"",
    "node",
    "generator",
    "this",
    "operators",
    "add",
    "\\"*\\"",
    "node",
    "params",
    "length",
    "1",
    "node",
    "params",
    "0",
    "type",
    "AST_NODE_TYPES",
    "Identifier",
    "node",
    "params",
    "0",
    "typeAnnotation",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
    "this",
    "operators",
    "add",
    "\\"=>\\"",
    "node",
    "body",
    "type",
    "AST_NODE_TYPES",
    "ObjectExpression",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "AssignmentExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "AssignmentExpression",
    "this",
    "operators",
    "add",
    "node",
    "operator",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "right",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "AssignmentPattern",
    "this",
    "ExtractTokensContext",
    "_node",
    "TSESTree",
    "AssignmentPattern",
    "this",
    "operators",
    "add",
    "\\"=\\"",
    "AwaitExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "AwaitExpression",
    "this",
    "operators",
    "add",
    "\\"await\\"",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "argument",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "BinaryExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "BinaryExpression",
    "this",
    "operators",
    "add",
    "node",
    "operator",
    "\\"operator\\"",
    "ESTree",
    "BinaryExpression",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "right",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "BlockStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "BreakStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"break\\"",
    "CallExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "CallExpression",
    "node",
    "optional",
    "this",
    "operators",
    "add",
    "\\"?.\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "arguments",
    "length",
    "1",
    "CatchClause",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "CatchClause",
    "this",
    "operators",
    "add",
    "\\"catch\\"",
    "node",
    "param",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "ChainExpression",
    "noop",
    "ClassBody",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "ClassDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ClassDeclaration",
    "this",
    "operators",
    "add",
    "\\"class\\"",
    "node",
    "superClass",
    "this",
    "operators",
    "add",
    "\\"extends\\"",
    "node",
    "implements",
    "this",
    "operators",
    "add",
    "\\"implements\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "implements",
    "length",
    "1",
    "node",
    "abstract",
    "this",
    "operators",
    "add",
    "\\"abstract\\"",
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
    "ClassExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ClassExpression",
    "this",
    "operators",
    "add",
    "\\"class\\"",
    "node",
    "superClass",
    "this",
    "operators",
    "add",
    "\\"extends\\"",
    "node",
    "implements",
    "this",
    "operators",
    "add",
    "\\"implements\\"",
    "node",
    "abstract",
    "this",
    "operators",
    "add",
    "\\"abstract\\"",
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
    "ConditionalExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ConditionalExpression",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "test",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\"?:\\"",
    "ContinueStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"continue\\"",
    "DebuggerStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"debugger\\"",
    "Decorator",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"@\\"",
    "DoWhileStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"do\\"",
    "this",
    "operators",
    "add",
    "\\"while()\\"",
    "EmptyStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\";\\"",
    "ExportAllDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ExportAllDeclaration",
    "this",
    "operators",
    "add",
    "\\"export\\"",
    "node",
    "exportKind",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"*\\"",
    "node",
    "exported",
    "this",
    "operators",
    "add",
    "\\"as\\"",
    "node",
    "source",
    "this",
    "operators",
    "add",
    "\\"from\\"",
    "node",
    "assertions",
    "node",
    "assertions",
    "length",
    "this",
    "operators",
    "add",
    "\\"assert\\"",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "ExportDefaultDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ExportDefaultDeclaration",
    "this",
    "operators",
    "add",
    "\\"export\\"",
    "node",
    "exportKind",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"default\\"",
    "ExportNamedDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ExportNamedDeclaration",
    "this",
    "operators",
    "add",
    "\\"export\\"",
    "node",
    "specifiers",
    "length",
    "node",
    "exportKind",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "specifiers",
    "length",
    "1",
    "node",
    "source",
    "this",
    "operators",
    "add",
    "\\"from\\"",
    "node",
    "assertions",
    "node",
    "assertions",
    "length",
    "this",
    "operators",
    "add",
    "\\"assert\\"",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "ExportSpecifier",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ExportSpecifier",
    "node",
    "exportKind",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"type\\"",
    "node",
    "local",
    "name",
    "node",
    "exported",
    "name",
    "this",
    "operators",
    "add",
    "\\"as\\"",
    "ExpressionStatement",
    "noop",
    "ForInStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"for()\\"",
    "this",
    "operators",
    "add",
    "\\"in\\"",
    "ForOfStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"for()\\"",
    "this",
    "operators",
    "add",
    "\\"of\\"",
    "ForStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"for()\\"",
    "this",
    "operators",
    "add",
    "\\";\\"",
    "2",
    "FunctionDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "FunctionDeclaration",
    "node",
    "async",
    "this",
    "operators",
    "add",
    "\\"async\\"",
    "this",
    "operators",
    "add",
    "\\"function\\"",
    "node",
    "generator",
    "this",
    "operators",
    "add",
    "\\"*\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
    "FunctionExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "FunctionExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "node",
    "async",
    "this",
    "operators",
    "add",
    "\\"async\\"",
    "parent",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "MethodDefinition",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "Property",
    "parent",
    "method",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSAbstractMethodDefinition",
    "this",
    "operators",
    "add",
    "\\"function\\"",
    "node",
    "generator",
    "this",
    "operators",
    "add",
    "\\"*\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
    "Identifier",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "Identifier",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "parent",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "Property",
    "parent",
    "shorthand",
    "parent",
    "value",
    "node",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "ImportSpecifier",
    "parent",
    "imported",
    "name",
    "node",
    "name",
    "parent",
    "local",
    "node",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "ExportSpecifier",
    "parent",
    "local",
    "name",
    "node",
    "name",
    "parent",
    "exported",
    "node",
    "this",
    "operands",
    "add",
    "node",
    "name",
    "IfStatement",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "IfStatement",
    "this",
    "operators",
    "add",
    "\\"if()\\"",
    "node",
    "alternate",
    "this",
    "operators",
    "add",
    "\\"else\\"",
    "ImportAttribute",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\":\\"",
    "ImportDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ImportDeclaration",
    "this",
    "operators",
    "add",
    "\\"import\\"",
    "node",
    "importKind",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"type\\"",
    "node",
    "specifiers",
    "some",
    "spec",
    "spec",
    "type",
    "AST_NODE_TYPES",
    "ImportSpecifier",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "specifiers",
    "length",
    "1",
    "node",
    "specifiers",
    "length",
    "this",
    "operators",
    "add",
    "\\"from\\"",
    "node",
    "assertions",
    "node",
    "assertions",
    "length",
    "this",
    "operators",
    "add",
    "\\"assert\\"",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "ImportDefaultSpecifier",
    "noop",
    "ImportExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ImportExpression",
    "this",
    "operators",
    "add",
    "\\"import\\"",
    "node",
    "attributes",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "ImportNamespaceSpecifier",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"*\\"",
    "this",
    "operators",
    "add",
    "\\"as\\"",
    "ImportSpecifier",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ImportSpecifier",
    "node",
    "importKind",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"type\\"",
    "node",
    "local",
    "name",
    "node",
    "imported",
    "name",
    "this",
    "operators",
    "add",
    "\\"as\\"",
    "JSXAttribute",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"=\\"",
    "JSXClosingElement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"</\\"",
    "this",
    "operators",
    "add",
    "\\">\\"",
    "JSXClosingFragment",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"</\\"",
    "this",
    "operators",
    "add",
    "\\">\\"",
    "JSXElement",
    "noop",
    "JSXEmptyExpression",
    "noop",
    "JSXExpressionContainer",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "JSXFragment",
    "noop",
    "JSXIdentifier",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "JSXIdentifier",
    "this",
    "operands",
    "add",
    "node",
    "name",
    "JSXMemberExpression",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\".\\"",
    "JSXNamespacedName",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\":\\"",
    "JSXOpeningElement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"<\\"",
    "this",
    "operators",
    "add",
    "\\">\\"",
    "JSXOpeningFragment",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"<\\"",
    "this",
    "operators",
    "add",
    "\\">\\"",
    "JSXSpreadAttribute",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "this",
    "operators",
    "add",
    "\\"...\\"",
    "JSXSpreadChild",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "this",
    "operators",
    "add",
    "\\"...\\"",
    "JSXText",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "JSXText",
    "this",
    "operands",
    "add",
    "JSON",
    "stringify",
    "node",
    "value",
    "LabeledStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\":\\"",
    "Literal",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "Literal",
    "\\"bigint\\"",
    "node",
    "node",
    "bigint",
    "this",
    "operands",
    "add",
    "\`\${",
    "}n\`",
    "node",
    "bigint",
    "\\"regex\\"",
    "node",
    "node",
    "regex",
    "this",
    "operands",
    "add",
    "\`/\${",
    "}/\${",
    "}\`",
    "node",
    "regex",
    "pattern",
    "node",
    "regex",
    "flags",
    "this",
    "operands",
    "add",
    "JSON",
    "stringify",
    "node",
    "value",
    "LogicalExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "LogicalExpression",
    "this",
    "operators",
    "add",
    "node",
    "operator",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "right",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "MemberExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "MemberExpression",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "object",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "node",
    "optional",
    "this",
    "operators",
    "add",
    "\\"?.\\"",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "this",
    "operators",
    "add",
    "\\".\\"",
    "MetaProperty",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\".\\"",
    "MethodDefinition",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "MethodDefinition",
    "node",
    "accessibility",
    "this",
    "operators",
    "add",
    "node",
    "accessibility",
    "node",
    "static",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "node",
    "kind",
    "\\"get\\"",
    "node",
    "kind",
    "\\"set\\"",
    "this",
    "operators",
    "add",
    "node",
    "kind",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "NewExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "NewExpression",
    "this",
    "operators",
    "add",
    "\\"new\\"",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "callee",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "arguments",
    "length",
    "1",
    "ObjectExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ObjectExpression",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "properties",
    "length",
    "1",
    "ObjectPattern",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ObjectPattern",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "properties",
    "length",
    "1",
    "PrivateIdentifier",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "PrivateIdentifier",
    "this",
    "operands",
    "add",
    "\`#\${",
    "}\`",
    "node",
    "name",
    "Program",
    "noop",
    "Property",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "Property",
    "node",
    "kind",
    "\\"get\\"",
    "node",
    "kind",
    "\\"set\\"",
    "this",
    "operators",
    "add",
    "node",
    "kind",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "shorthand",
    "node",
    "method",
    "this",
    "operators",
    "add",
    "\\":\\"",
    "PropertyDefinition",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "PropertyDefinition",
    "node",
    "accessibility",
    "this",
    "operators",
    "add",
    "node",
    "accessibility",
    "node",
    "static",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "node",
    "readonly",
    "this",
    "operators",
    "add",
    "\\"readonly\\"",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "value",
    "this",
    "operators",
    "add",
    "\\"=\\"",
    "RestElement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"...\\"",
    "ReturnStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"return\\"",
    "SequenceExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "SequenceExpression",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "expressions",
    "length",
    "1",
    "SpreadElement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"...\\"",
    "StaticBlock",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "Super",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"super\\"",
    "SwitchCase",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "SwitchCase",
    "node",
    "test",
    "this",
    "operators",
    "add",
    "\\"case\\"",
    "this",
    "operators",
    "add",
    "\\"default\\"",
    "this",
    "operators",
    "add",
    "\\":\\"",
    "SwitchStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"switch()\\"",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "TaggedTemplateExpression",
    "noop",
    "TemplateElement",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TemplateElement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "open",
    "\\"\`\\"",
    "close",
    "\\"\`\\"",
    "parent",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TemplateLiteral",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSTemplateLiteralType",
    "index",
    "parent",
    "quasis",
    "indexOf",
    "node",
    "index",
    "0",
    "open",
    "\\"}\\"",
    "index",
    "parent",
    "quasis",
    "length",
    "1",
    "close",
    "\\"\${\\"",
    "this",
    "operands",
    "add",
    "\`\${",
    "}\${",
    "}\${",
    "}\`",
    "open",
    "node",
    "value",
    "cooked",
    "close",
    "TemplateLiteral",
    "noop",
    "ThisExpression",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"this\\"",
    "ThrowStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"throw\\"",
    "TryStatement",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TryStatement",
    "this",
    "operators",
    "add",
    "\\"try\\"",
    "node",
    "finalizer",
    "this",
    "operators",
    "add",
    "\\"finally\\"",
    "UnaryExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "UnaryExpression",
    "this",
    "operators",
    "add",
    "node",
    "operator",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "argument",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "UpdateExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "UpdateExpression",
    "this",
    "operators",
    "add",
    "node",
    "operator",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "argument",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "VariableDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "VariableDeclaration",
    "this",
    "operators",
    "add",
    "node",
    "kind",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "declarations",
    "length",
    "1",
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
    "VariableDeclarator",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "VariableDeclarator",
    "node",
    "init",
    "this",
    "operators",
    "add",
    "\\"=\\"",
    "WhileStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"while()\\"",
    "WithStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"with()\\"",
    "YieldExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "YieldExpression",
    "this",
    "operators",
    "add",
    "\\"yield\\"",
    "node",
    "delegate",
    "this",
    "operators",
    "add",
    "\\"*\\"",
    "node",
    "argument",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "argument",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "TSAbstractKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"abstract\\"",
    "TSAbstractMethodDefinition",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSAbstractMethodDefinition",
    "this",
    "operators",
    "add",
    "\\"abstract\\"",
    "node",
    "accessibility",
    "this",
    "operators",
    "add",
    "node",
    "accessibility",
    "node",
    "static",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "node",
    "kind",
    "\\"get\\"",
    "node",
    "kind",
    "\\"set\\"",
    "this",
    "operators",
    "add",
    "node",
    "kind",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "TSAbstractPropertyDefinition",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSAbstractPropertyDefinition",
    "this",
    "operators",
    "add",
    "\\"abstract\\"",
    "node",
    "accessibility",
    "this",
    "operators",
    "add",
    "node",
    "accessibility",
    "node",
    "static",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "value",
    "this",
    "operators",
    "add",
    "\\"=\\"",
    "TSAnyKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"any\\"",
    "TSArrayType",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "TSAsExpression",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"as\\"",
    "TSAsyncKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"async\\"",
    "TSBigIntKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"bigint\\"",
    "TSBooleanKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"boolean\\"",
    "TSCallSignatureDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSCallSignatureDeclaration",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
    "TSClassImplements",
    "noop",
    "TSConditionalType",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"extends\\"",
    "this",
    "operators",
    "add",
    "\\"?:\\"",
    "TSConstructSignatureDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSConstructSignatureDeclaration",
    "this",
    "operators",
    "add",
    "\\"new\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
    "TSConstructorType",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSConstructorType",
    "this",
    "operators",
    "add",
    "\\"new\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
    "TSDeclareFunction",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSDeclareFunction",
    "node",
    "async",
    "this",
    "operators",
    "add",
    "\\"async\\"",
    "this",
    "operators",
    "add",
    "\\"function\\"",
    "node",
    "generator",
    "this",
    "operators",
    "add",
    "\\"*\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
    "TSDeclareKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
    "TSEmptyBodyFunctionExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSEmptyBodyFunctionExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "node",
    "async",
    "this",
    "operators",
    "add",
    "\\"async\\"",
    "parent",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "MethodDefinition",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "Property",
    "parent",
    "method",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSAbstractMethodDefinition",
    "this",
    "operators",
    "add",
    "\\"function\\"",
    "node",
    "generator",
    "this",
    "operators",
    "add",
    "\\"*\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
    "TSEnumDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSEnumDeclaration",
    "node",
    "const",
    "this",
    "operators",
    "add",
    "\\"const\\"",
    "this",
    "operators",
    "add",
    "\\"enum\\"",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "members",
    "length",
    "1",
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
    "TSEnumMember",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSEnumMember",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "initializer",
    "this",
    "operators",
    "add",
    "\\"=\\"",
    "TSExportAssignment",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"export\\"",
    "this",
    "operators",
    "add",
    "\\"=\\"",
    "TSExportKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"export\\"",
    "TSExternalModuleReference",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"require\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "TSFunctionType",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSFunctionType",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
    "TSImportEqualsDeclaration",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"import\\"",
    "this",
    "operators",
    "add",
    "\\"=\\"",
    "TSImportType",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSImportType",
    "this",
    "operators",
    "add",
    "\\"import\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "node",
    "qualifier",
    "this",
    "operators",
    "add",
    "\\".\\"",
    "TSIndexSignature",
    "this",
    "ExtractTokensContext",
    "node",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "readonly",
    "this",
    "operators",
    "add",
    "\\"readonly\\"",
    "node",
    "static",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "node",
    "export",
    "this",
    "operators",
    "add",
    "\\"export\\"",
    "TSIndexedAccessType",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "TSInferType",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"infer\\"",
    "TSInterfaceBody",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "TSInterfaceDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSInterfaceDeclaration",
    "this",
    "operators",
    "add",
    "\\"interface\\"",
    "node",
    "extends",
    "this",
    "operators",
    "add",
    "\\"extends\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "extends",
    "length",
    "1",
    "node",
    "implements",
    "this",
    "operators",
    "add",
    "\\"implements\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "implements",
    "length",
    "1",
    "node",
    "abstract",
    "this",
    "operators",
    "add",
    "\\"abstract\\"",
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
    "TSInterfaceHeritage",
    "noop",
    "TSIntersectionType",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSIntersectionType",
    "this",
    "operators",
    "add",
    "\\"&\\"",
    "node",
    "types",
    "length",
    "1",
    "TSIntrinsicKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"intrinsic\\"",
    "TSLiteralType",
    "noop",
    "TSMappedType",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSMappedType",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "node",
    "readonly",
    "node",
    "readonly",
    "\\"string\\"",
    "this",
    "operators",
    "add",
    "node",
    "readonly",
    "this",
    "operators",
    "add",
    "\\"readonly\\"",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "optional",
    "node",
    "optional",
    "\\"string\\"",
    "this",
    "operators",
    "add",
    "node",
    "optional",
    "this",
    "operators",
    "add",
    "\\"?\\"",
    "this",
    "operators",
    "add",
    "\\":\\"",
    "TSMethodSignature",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSMethodSignature",
    "node",
    "accessibility",
    "this",
    "operators",
    "add",
    "node",
    "accessibility",
    "node",
    "readonly",
    "this",
    "operators",
    "add",
    "\\"readonly\\"",
    "node",
    "static",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "node",
    "export",
    "this",
    "operators",
    "add",
    "\\"export\\"",
    "node",
    "kind",
    "\\"get\\"",
    "node",
    "kind",
    "\\"set\\"",
    "this",
    "operators",
    "add",
    "node",
    "kind",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "optional",
    "this",
    "operators",
    "add",
    "\\"?\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
    "TSModuleBlock",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "TSModuleDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSModuleDeclaration",
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
    "node",
    "global",
    "this",
    "operators",
    "add",
    "\\"module\\"",
    "TSNamespaceExportDeclaration",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"export\\"",
    "this",
    "operators",
    "add",
    "\\"as\\"",
    "this",
    "operators",
    "add",
    "\\"namespace\\"",
    "TSNamedTupleMember",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSNamedTupleMember",
    "node",
    "optional",
    "this",
    "operators",
    "add",
    "\\"?\\"",
    "this",
    "operators",
    "add",
    "\\":\\"",
    "TSNeverKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"never\\"",
    "TSNonNullExpression",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"!\\"",
    "TSNullKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"null\\"",
    "TSNumberKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"number\\"",
    "TSObjectKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"object\\"",
    "TSOptionalType",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"?\\"",
    "TSParameterProperty",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSParameterProperty",
    "node",
    "accessibility",
    "this",
    "operators",
    "add",
    "node",
    "accessibility",
    "node",
    "readonly",
    "this",
    "operators",
    "add",
    "\\"readonly\\"",
    "node",
    "static",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "node",
    "export",
    "this",
    "operators",
    "add",
    "\\"export\\"",
    "TSPrivateKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"private\\"",
    "TSPropertySignature",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSPropertySignature",
    "node",
    "accessibility",
    "this",
    "operators",
    "add",
    "node",
    "accessibility",
    "node",
    "readonly",
    "this",
    "operators",
    "add",
    "\\"readonly\\"",
    "node",
    "static",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "node",
    "export",
    "this",
    "operators",
    "add",
    "\\"export\\"",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "optional",
    "this",
    "operators",
    "add",
    "\\"?\\"",
    "TSProtectedKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"protected\\"",
    "TSPublicKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"public\\"",
    "TSQualifiedName",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\".\\"",
    "TSReadonlyKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"readonly\\"",
    "TSRestType",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"...\\"",
    "TSStaticKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "TSStringKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"string\\"",
    "TSSymbolKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"symbol\\"",
    "TSTemplateLiteralType",
    "noop",
    "TSThisType",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"this\\"",
    "TSTupleType",
    "this",
    "ExtractTokensContext",
    "node",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "elementTypes",
    "length",
    "1",
    "TSTypeAliasDeclaration",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"=\\"",
    "TSTypeAnnotation",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSTypeAnnotation",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "parent",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSFunctionType",
    "parent",
    "returnType",
    "node",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSConstructorType",
    "parent",
    "returnType",
    "node",
    "this",
    "operators",
    "add",
    "\\"=>\\"",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSTypePredicate",
    "this",
    "operators",
    "add",
    "\\":\\"",
    "TSTypeAssertion",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"<>\\"",
    "TSTypeLiteral",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "TSTypeOperator",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"keyof\\"",
    "TSTypeParameter",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSTypeParameter",
    "parent",
    "node",
    "constraint",
    "parent",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSMappedType",
    "parent",
    "typeParameter",
    "node",
    "this",
    "operators",
    "add",
    "\\"in\\"",
    "this",
    "operators",
    "add",
    "\\"extends\\"",
    "node",
    "default",
    "this",
    "operators",
    "add",
    "\\"=\\"",
    "TSTypeParameterDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSTypeParameterDeclaration",
    "this",
    "operators",
    "add",
    "\\"<>\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
    "TSTypeParameterInstantiation",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSTypeParameterInstantiation",
    "this",
    "operators",
    "add",
    "\\"<>\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
    "TSTypePredicate",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"is\\"",
    "TSTypeQuery",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"typeof\\"",
    "TSTypeReference",
    "noop",
    "TSUndefinedKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"undefined\\"",
    "TSUnionType",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSUnionType",
    "this",
    "operators",
    "add",
    "\\"|\\"",
    "node",
    "types",
    "length",
    "1",
    "TSUnknownKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"unknown\\"",
    "TSVoidKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"void\\"",
  ],
  "operators": Array [
    "const",
    "=",
    ":",
    "{}",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "||",
    "||",
    "!==",
    ".",
    ".",
    "!==",
    ".",
    "[]",
    ".",
    ".",
    ".",
    "[]",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ".",
    ".",
    "if()",
    "===",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ">=",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ">",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "as",
    ".",
    "[]",
    ".",
    "if()",
    ">=",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ":",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ">=",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "&&",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    ".",
    "{}",
    "if()",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "&&",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "!==",
    ".",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ":",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ",",
    ":",
    ":",
    ".",
    ":",
    "|",
    ".",
    "{}",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "||",
    "!",
    "&&",
    "&&",
    "()",
    "!==",
    ".",
    ".",
    "||",
    "!==",
    ".",
    ".",
    "!",
    ".",
    "!==",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ",",
    ":",
    ":",
    ".",
    ":",
    "|",
    ".",
    "{}",
    "if()",
    "{}",
    "if()",
    "&&",
    "&&",
    "===",
    ".",
    ".",
    ".",
    "===",
    ".",
    "return",
    "if()",
    "&&",
    "&&",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
    ".",
    "===",
    ".",
    "return",
    "if()",
    "&&",
    "&&",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
    ".",
    "===",
    ".",
    "return",
    "()",
    ".",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "()",
    ".",
    ".",
    "=>",
    "===",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "&&",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    ":",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "!==",
    ".",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    ":",
    ":",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    ":",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    "else",
    "&&",
    "in",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    "if()",
    "else",
    "&&",
    "in",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ">=",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ">",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "else",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "else",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    "||",
    "===",
    ".",
    "===",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ">=",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    ":",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    "||",
    "===",
    ".",
    "===",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "&&",
    "!",
    ".",
    "!",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    "else",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    ":",
    "()",
    ",",
    ",",
    ":",
    ":",
    ".",
    ":",
    "|",
    ".",
    "{}",
    "let",
    "=",
    "let",
    "=",
    "if()",
    "&&",
    "()",
    "||",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
    "{}",
    "const",
    "=",
    "()",
    ".",
    ".",
    "if()",
    ">",
    "{}",
    "=",
    "if()",
    "<",
    "-",
    ".",
    ".",
    "{}",
    "=",
    "()",
    ".",
    ".",
    ".",
    ".",
    ":",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ">=",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ">=",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "&&",
    ".",
    ">",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    "||",
    "===",
    ".",
    "===",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    ":",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ",",
    ":",
    ":",
    ".",
    ":",
    "|",
    ".",
    "{}",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "||",
    "!",
    "&&",
    "&&",
    "()",
    "!==",
    ".",
    ".",
    "||",
    "!==",
    ".",
    ".",
    "!",
    ".",
    "!==",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    ":",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    ":",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "if()",
    "===",
    "typeof",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "if()",
    "===",
    "typeof",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    "||",
    "===",
    ".",
    "===",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    "!",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    ":",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ",",
    ":",
    ":",
    ".",
    ":",
    "|",
    ".",
    "{}",
    "if()",
    "{}",
    "if()",
    "||",
    "&&",
    "===",
    ".",
    ".",
    "===",
    ".",
    "&&",
    "===",
    ".",
    ".",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "return",
    "if()",
    "===",
    ".",
    ".",
    "{}",
    "return",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "{}",
    "if()",
    "else",
    "&&",
    "&&",
    "===",
    ".",
    ".",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    ":",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts VariableDeclaration\`
const context = new ExtractTokensContext()
\` 1`] = `
Object {
  "operands": Array [
    "context",
    "ExtractTokensContext",
  ],
  "operators": Array [
    "const",
    "=",
    "new",
    "()",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts VariableDeclaration\`
const extract = EXTRACT_TOKENS[node.type] as any
\` 1`] = `
Object {
  "operands": Array [
    "extract",
    "EXTRACT_TOKENS",
    "node",
    "type",
    "any",
  ],
  "operators": Array [
    "const",
    "=",
    "as",
    "[]",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts VariableDeclaration\`
const index = parent.quasis.indexOf(node)
\` 1`] = `
Object {
  "operands": Array [
    "index",
    "parent",
    "quasis",
    "indexOf",
    "node",
  ],
  "operators": Array [
    "const",
    "=",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts VariableDeclaration\`
let close = "\`"
\` 1`] = `
Object {
  "operands": Array [
    "close",
    "\\"\`\\"",
  ],
  "operators": Array [
    "let",
    "=",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts VariableDeclaration\`
let index = 0
\` 1`] = `
Object {
  "operands": Array [
    "index",
    "0",
  ],
  "operators": Array [
    "let",
    "=",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts VariableDeclaration\`
let open = "\`"
\` 1`] = `
Object {
  "operands": Array [
    "open",
    "\\"\`\\"",
  ],
  "operators": Array [
    "let",
    "=",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts VariableDeclarator\`
EXTRACT_TOKENS: AllVisitor = {
    ArrayExpression(
        this: ExtractTokensContext,
        node: TSESTree.ArrayExpression,
    ) {
        this.operators.add("[]")
        this.operators.add(",", node.elements.length - 1)
    },
    ArrayPattern(this: ExtractTokensContext, node: TSESTree.ArrayPattern) {
        this.operators.add("[]")
        this.operators.add(",", node.elements.length - 1)
    },
    ArrowFunctionExpression(
        this: ExtractTokensContext,
        node: TSESTree.ArrowFunctionExpression,
    ) {
        if (node.async) {
            this.operators.add("async")
        }
        if (node.generator) {
            // It cannot actually be used.
            this.operators.add("*")
        }
        if (
            node.params.length !== 1 ||
            node.params[0].type !== AST_NODE_TYPES.Identifier ||
            node.params[0].typeAnnotation
        ) {
            this.operators.add("()")
        }
        this.operators.add(",", node.params.length - 1)

        this.operators.add("=>")

        if (node.body.type === AST_NODE_TYPES.ObjectExpression) {
            this.operators.add("()")
        }
    },
    AssignmentExpression(
        this: ExtractTokensContext,
        node: TSESTree.AssignmentExpression,
    ) {
        this.operators.add(node.operator)

        if (getPrecedence(node) >= getPrecedence(node.right)) {
            this.operators.add("()")
        }
    },
    AssignmentPattern(
        this: ExtractTokensContext,
        _node: TSESTree.AssignmentPattern,
    ) {
        this.operators.add("=")
    },
    AwaitExpression(
        this: ExtractTokensContext,
        node: TSESTree.AwaitExpression,
    ) {
        this.operators.add("await")

        if (getPrecedence(node) > getPrecedence(node.argument)) {
            this.operators.add("()")
        }
    },
    BinaryExpression(
        this: ExtractTokensContext,
        node: TSESTree.BinaryExpression,
    ) {
        this.operators.add(node.operator as ESTree.BinaryExpression["operator"])

        if (getPrecedence(node) >= getPrecedence(node.right)) {
            this.operators.add("()")
        }
    },
    BlockStatement(this: ExtractTokensContext) {
        this.operators.add("{}")
    },
    BreakStatement(this: ExtractTokensContext) {
        this.operators.add("break")
    },
    CallExpression(this: ExtractTokensContext, node: TSESTree.CallExpression) {
        if (node.optional) {
            this.operators.add("?.")
        }
        this.operators.add("()")
        this.operators.add(",", node.arguments.length - 1)
    },
    CatchClause(this: ExtractTokensContext, node: TSESTree.CatchClause) {
        this.operators.add("catch")
        if (node.param) {
            this.operators.add("()")
        }
    },
    ChainExpression: noop,
    ClassBody(this: ExtractTokensContext) {
        this.operators.add("{}")
    },
    ClassDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.ClassDeclaration,
    ) {
        this.operators.add("class")
        if (node.superClass) {
            this.operators.add("extends")
        }
        if (node.implements) {
            this.operators.add("implements")
            this.operators.add(",", node.implements.length - 1)
        }
        if (node.abstract) {
            this.operators.add("abstract")
        }
        if (node.declare) this.operators.add("declare")
    },
    ClassExpression(
        this: ExtractTokensContext,
        node: TSESTree.ClassExpression,
    ) {
        this.operators.add("class")
        if (node.superClass) {
            this.operators.add("extends")
        }
        if (node.implements) {
            this.operators.add("implements")
        }
        if (node.abstract) {
            this.operators.add("abstract")
        }
        if (node.declare) this.operators.add("declare")
    },
    ConditionalExpression(
        this: ExtractTokensContext,
        node: TSESTree.ConditionalExpression,
    ) {
        if (getPrecedence(node) >= getPrecedence(node.test)) {
            this.operators.add("()")
        }
        this.operators.add("?:")
    },
    ContinueStatement(this: ExtractTokensContext) {
        this.operators.add("continue")
    },
    DebuggerStatement(this: ExtractTokensContext) {
        this.operators.add("debugger")
    },
    Decorator(this: ExtractTokensContext) {
        this.operators.add("@")
    },
    DoWhileStatement(this: ExtractTokensContext) {
        this.operators.add("do")
        this.operators.add("while()")
    },
    EmptyStatement(this: ExtractTokensContext) {
        this.operators.add(";")
    },
    ExportAllDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.ExportAllDeclaration,
    ) {
        this.operators.add("export")
        if (node.exportKind === "type") {
            this.operators.add("type")
        }
        this.operators.add("*")
        if (node.exported) {
            this.operators.add("as")
        }
        if (node.source) {
            this.operators.add("from")
        }
        if (node.assertions && node.assertions.length) {
            this.operators.add("assert")
            this.operators.add("{}")
        }
    },
    ExportDefaultDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.ExportDefaultDeclaration,
    ) {
        this.operators.add("export")
        if (node.exportKind === "type") {
            this.operators.add("type")
        }
        this.operators.add("default")
    },
    ExportNamedDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.ExportNamedDeclaration,
    ) {
        this.operators.add("export")
        if (node.specifiers.length) {
            if (node.exportKind === "type") {
                this.operators.add("type")
            }
            this.operators.add("{}")
            this.operators.add(",", node.specifiers.length - 1)
        }
        if (node.source) {
            this.operators.add("from")
        }
        if (node.assertions && node.assertions.length) {
            this.operators.add("assert")
            this.operators.add("{}")
        }
    },
    ExportSpecifier(
        this: ExtractTokensContext,
        node: TSESTree.ExportSpecifier,
    ) {
        if (node.exportKind === "type") {
            this.operators.add("type")
        }
        if (node.local.name !== node.exported.name) {
            this.operators.add("as")
        }
    },
    ExpressionStatement: noop,
    ForInStatement(this: ExtractTokensContext) {
        this.operators.add("for()")
        this.operators.add("in")
    },
    ForOfStatement(this: ExtractTokensContext) {
        this.operators.add("for()")
        this.operators.add("of")
    },
    ForStatement(this: ExtractTokensContext) {
        this.operators.add("for()")
        this.operators.add(";", 2)
    },
    FunctionDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.FunctionDeclaration,
    ) {
        if (node.async) {
            this.operators.add("async")
        }
        this.operators.add("function")
        if (node.generator) {
            this.operators.add("*")
        }
        this.operators.add("()")
        this.operators.add(",", node.params.length - 1)

        if (node.declare) this.operators.add("declare")
    },
    FunctionExpression(
        this: ExtractTokensContext,
        node: TSESTree.FunctionExpression,
        parent: TSESTree.Node | null,
    ) {
        if (node.async) {
            this.operators.add("async")
        }

        if (
            !parent ||
            parent.type !== AST_NODE_TYPES.MethodDefinition &&
                (parent.type !== AST_NODE_TYPES.Property || !parent.method) &&
                parent.type !== AST_NODE_TYPES.TSAbstractMethodDefinition
        ) {
            this.operators.add("function")
        }

        if (node.generator) {
            this.operators.add("*")
        }
        this.operators.add("()")
        this.operators.add(",", node.params.length - 1)

        if (node.declare) this.operators.add("declare")
    },
    Identifier(
        this: ExtractTokensContext,
        node: TSESTree.Identifier,
        parent: TSESTree.Node | null,
    ) {
        if (parent) {
            if (
                parent.type === AST_NODE_TYPES.Property &&
                parent.shorthand &&
                parent.value === node
            )
                return
            if (
                parent.type === AST_NODE_TYPES.ImportSpecifier &&
                parent.imported.name === node.name &&
                parent.local === node
            )
                return
            if (
                parent.type === AST_NODE_TYPES.ExportSpecifier &&
                parent.local.name === node.name &&
                parent.exported === node
            )
                return
        }
        this.operands.add(node.name)
    },
    IfStatement(this: ExtractTokensContext, node: TSESTree.IfStatement) {
        this.operators.add("if()")
        if (node.alternate) {
            this.operators.add("else")
        }
    },
    ImportAttribute(this: ExtractTokensContext) {
        this.operators.add(":")
    },
    ImportDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.ImportDeclaration,
    ) {
        this.operators.add("import")
        if (node.importKind === "type") {
            this.operators.add("type")
        }
        if (
            node.specifiers.some(
                (spec) => spec.type === AST_NODE_TYPES.ImportSpecifier,
            )
        ) {
            this.operators.add("{}")
            this.operators.add(",", node.specifiers.length - 1)
        }
        if (node.specifiers.length) {
            this.operators.add("from")
        }
        if (node.assertions && node.assertions.length) {
            this.operators.add("assert")
            this.operators.add("{}")
        }
    },
    ImportDefaultSpecifier: noop,
    ImportExpression(
        this: ExtractTokensContext,
        node: TSESTree.ImportExpression,
    ) {
        this.operators.add("import")
        if (node.attributes) {
            this.operators.add(",")
        }
    },
    ImportNamespaceSpecifier(this: ExtractTokensContext) {
        this.operators.add("*")
        this.operators.add("as")
    },
    ImportSpecifier(
        this: ExtractTokensContext,
        node: TSESTree.ImportSpecifier,
    ) {
        if (node.importKind === "type") {
            this.operators.add("type")
        }
        if (node.local.name !== node.imported.name) {
            this.operators.add("as")
        }
    },
    JSXAttribute(this: ExtractTokensContext) {
        this.operators.add("=")
    },
    JSXClosingElement(this: ExtractTokensContext) {
        this.operators.add("</")
        this.operators.add(">")
    },
    JSXClosingFragment(this: ExtractTokensContext) {
        this.operators.add("</")
        this.operators.add(">")
    },
    JSXElement: noop,
    JSXEmptyExpression: noop,
    JSXExpressionContainer(this: ExtractTokensContext) {
        this.operators.add("{}")
    },
    JSXFragment: noop,
    JSXIdentifier(this: ExtractTokensContext, node: TSESTree.JSXIdentifier) {
        this.operands.add(node.name)
    },
    JSXMemberExpression(this: ExtractTokensContext) {
        this.operators.add(".")
    },
    JSXNamespacedName(this: ExtractTokensContext) {
        this.operators.add(":")
    },
    JSXOpeningElement(this: ExtractTokensContext) {
        this.operators.add("<")
        this.operators.add(">")
    },
    JSXOpeningFragment(this: ExtractTokensContext) {
        this.operators.add("<")
        this.operators.add(">")
    },
    JSXSpreadAttribute(this: ExtractTokensContext) {
        this.operators.add("{}")
        this.operators.add("...")
    },
    JSXSpreadChild(this: ExtractTokensContext) {
        this.operators.add("{}")
        this.operators.add("...")
    },
    JSXText(this: ExtractTokensContext, node: TSESTree.JSXText) {
        this.operands.add(JSON.stringify(node.value))
    },
    LabeledStatement(this: ExtractTokensContext) {
        this.operators.add(":")
    },
    Literal(this: ExtractTokensContext, node: TSESTree.Literal) {
        if ("bigint" in node && node.bigint) {
            this.operands.add(\`\${node.bigint}n\`)
        } else if ("regex" in node && node.regex) {
            this.operands.add(\`/\${node.regex.pattern}/\${node.regex.flags}\`)
        } else {
            this.operands.add(JSON.stringify(node.value))
        }
    },
    LogicalExpression(
        this: ExtractTokensContext,
        node: TSESTree.LogicalExpression,
    ) {
        this.operators.add(node.operator)

        if (getPrecedence(node) >= getPrecedence(node.right)) {
            this.operators.add("()")
        }
    },
    MemberExpression(
        this: ExtractTokensContext,
        node: TSESTree.MemberExpression,
    ) {
        if (getPrecedence(node) > getPrecedence(node.object)) {
            this.operators.add("()")
        }
        if (node.optional) {
            this.operators.add("?.")
            if (node.computed) {
                this.operators.add("[]")
            }
        } else if (node.computed) {
            this.operators.add("[]")
        } else {
            this.operators.add(".")
        }
    },
    MetaProperty(this: ExtractTokensContext) {
        this.operators.add(".")
    },
    MethodDefinition(
        this: ExtractTokensContext,
        node: TSESTree.MethodDefinition,
    ) {
        if (node.accessibility) this.operators.add(node.accessibility)
        if (node.static) this.operators.add("static")
        if (node.kind === "get" || node.kind === "set")
            this.operators.add(node.kind)
        if (node.computed) {
            this.operators.add("[]")
        }
    },
    NewExpression(this: ExtractTokensContext, node: TSESTree.NewExpression) {
        this.operators.add("new")

        if (getPrecedence(node) >= getPrecedence(node.callee)) {
            this.operators.add("()")
        }

        this.operators.add("()")
        this.operators.add(",", node.arguments.length - 1)
    },
    ObjectExpression(
        this: ExtractTokensContext,
        node: TSESTree.ObjectExpression,
    ) {
        this.operators.add("{}")
        this.operators.add(",", node.properties.length - 1)
    },
    ObjectPattern(this: ExtractTokensContext, node: TSESTree.ObjectPattern) {
        this.operators.add("{}")
        this.operators.add(",", node.properties.length - 1)
    },
    PrivateIdentifier(
        this: ExtractTokensContext,
        node: TSESTree.PrivateIdentifier,
    ) {
        this.operands.add(\`#\${node.name}\`)
    },
    Program: noop,
    Property(this: ExtractTokensContext, node: TSESTree.Property) {
        if (node.kind === "get" || node.kind === "set")
            this.operators.add(node.kind)
        if (node.computed) {
            this.operators.add("[]")
        }
        if (!node.shorthand && !node.method) {
            this.operators.add(":")
        }
    },
    PropertyDefinition(
        this: ExtractTokensContext,
        node: TSESTree.PropertyDefinition,
    ) {
        if (node.accessibility) this.operators.add(node.accessibility)
        if (node.static) this.operators.add("static")
        if (node.readonly) this.operators.add("readonly")
        if (node.computed) {
            this.operators.add("[]")
        }
        if (node.value) {
            this.operators.add("=")
        }
    },
    RestElement(this: ExtractTokensContext) {
        this.operators.add("...")
    },
    ReturnStatement(this: ExtractTokensContext) {
        this.operators.add("return")
    },
    SequenceExpression(
        this: ExtractTokensContext,
        node: TSESTree.SequenceExpression,
    ) {
        this.operators.add(",", node.expressions.length - 1)
    },
    SpreadElement(this: ExtractTokensContext) {
        this.operators.add("...")
    },
    StaticBlock(this: ExtractTokensContext) {
        this.operators.add("static")
        this.operators.add("{}")
    },
    Super(this: ExtractTokensContext) {
        this.operands.add("super")
    },
    SwitchCase(this: ExtractTokensContext, node: TSESTree.SwitchCase) {
        if (node.test) {
            this.operators.add("case")
        } else {
            this.operators.add("default")
        }
        this.operators.add(":")
    },
    SwitchStatement(this: ExtractTokensContext) {
        this.operators.add("switch()")
        this.operators.add("{}")
    },
    TaggedTemplateExpression: noop,
    TemplateElement(
        this: ExtractTokensContext,
        node: TSESTree.TemplateElement,
        parent: TSESTree.Node | null,
    ) {
        let open = "\`"
        let close = "\`"
        if (
            parent &&
            (parent.type === AST_NODE_TYPES.TemplateLiteral ||
                parent.type === AST_NODE_TYPES.TSTemplateLiteralType)
        ) {
            const index = parent.quasis.indexOf(node)
            if (index > 0) {
                open = "}"
            }
            if (index < parent.quasis.length - 1) {
                close = "\${"
            }
        }
        this.operands.add(\`\${open}\${node.value.cooked}\${close}\`)
    },
    TemplateLiteral: noop,
    ThisExpression(this: ExtractTokensContext) {
        this.operands.add("this")
    },
    ThrowStatement(this: ExtractTokensContext) {
        this.operators.add("throw")
    },
    TryStatement(this: ExtractTokensContext, node: TSESTree.TryStatement) {
        this.operators.add("try")
        if (node.finalizer) {
            this.operators.add("finally")
        }
    },
    UnaryExpression(
        this: ExtractTokensContext,
        node: TSESTree.UnaryExpression,
    ) {
        this.operators.add(node.operator)

        if (getPrecedence(node) >= getPrecedence(node.argument)) {
            this.operators.add("()")
        }
    },
    UpdateExpression(
        this: ExtractTokensContext,
        node: TSESTree.UpdateExpression,
    ) {
        this.operators.add(node.operator)

        if (getPrecedence(node) >= getPrecedence(node.argument)) {
            this.operators.add("()")
        }
    },
    VariableDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.VariableDeclaration,
    ) {
        this.operators.add(node.kind)
        this.operators.add(",", node.declarations.length - 1)

        if (node.declare) this.operators.add("declare")
    },
    VariableDeclarator(
        this: ExtractTokensContext,
        node: TSESTree.VariableDeclarator,
    ) {
        if (node.init) {
            this.operators.add("=")
        }
    },
    WhileStatement(this: ExtractTokensContext) {
        this.operators.add("while()")
    },
    WithStatement(this: ExtractTokensContext) {
        this.operators.add("with()")
    },
    YieldExpression(
        this: ExtractTokensContext,
        node: TSESTree.YieldExpression,
    ) {
        this.operators.add("yield")
        if (node.delegate) {
            this.operators.add("*")
        }
        if (
            node.argument &&
            getPrecedence(node) > getPrecedence(node.argument)
        ) {
            this.operators.add("()")
        }
    },

    // TS
    TSAbstractKeyword(this: ExtractTokensContext) {
        this.operators.add("abstract")
    },
    TSAbstractMethodDefinition(
        this: ExtractTokensContext,
        node: TSESTree.TSAbstractMethodDefinition,
    ) {
        this.operators.add("abstract")
        if (node.accessibility) this.operators.add(node.accessibility)
        if (node.static) this.operators.add("static")
        if (node.kind === "get" || node.kind === "set")
            this.operators.add(node.kind)
        if (node.computed) {
            this.operators.add("[]")
        }
    },
    TSAbstractPropertyDefinition(
        this: ExtractTokensContext,
        node: TSESTree.TSAbstractPropertyDefinition,
    ) {
        this.operators.add("abstract")
        if (node.accessibility) this.operators.add(node.accessibility)
        if (node.static) this.operators.add("static")
        if (node.computed) {
            this.operators.add("[]")
        }
        if (node.value) {
            this.operators.add("=")
        }
    },
    TSAnyKeyword(this: ExtractTokensContext) {
        this.operands.add("any")
    },
    TSArrayType(this: ExtractTokensContext) {
        this.operators.add("[]")
    },
    TSAsExpression(this: ExtractTokensContext) {
        this.operators.add("as")
    },
    TSAsyncKeyword(this: ExtractTokensContext) {
        this.operators.add("async")
    },
    TSBigIntKeyword(this: ExtractTokensContext) {
        this.operands.add("bigint")
    },
    TSBooleanKeyword(this: ExtractTokensContext) {
        this.operands.add("boolean")
    },
    TSCallSignatureDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.TSCallSignatureDeclaration,
    ) {
        this.operators.add("()")
        this.operators.add(",", node.params.length - 1)
    },
    TSClassImplements: noop,
    TSConditionalType(this: ExtractTokensContext) {
        this.operators.add("extends")
        this.operators.add("?:")
    },
    TSConstructSignatureDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.TSConstructSignatureDeclaration,
    ) {
        this.operators.add("new")
        this.operators.add("()")
        this.operators.add(",", node.params.length - 1)
    },
    TSConstructorType(
        this: ExtractTokensContext,
        node: TSESTree.TSConstructorType,
    ) {
        this.operators.add("new")
        this.operators.add("()")
        this.operators.add(",", node.params.length - 1)
    },
    TSDeclareFunction(
        this: ExtractTokensContext,
        node: TSESTree.TSDeclareFunction,
    ) {
        if (node.async) {
            this.operators.add("async")
        }
        this.operators.add("function")
        if (node.generator) {
            this.operators.add("*")
        }
        this.operators.add("()")
        this.operators.add(",", node.params.length - 1)
    },
    TSDeclareKeyword(this: ExtractTokensContext) {
        this.operators.add("declare")
    },
    TSEmptyBodyFunctionExpression(
        this: ExtractTokensContext,
        node: TSESTree.TSEmptyBodyFunctionExpression,
        parent: TSESTree.Node | null,
    ) {
        if (node.async) {
            this.operators.add("async")
        }

        if (
            !parent ||
            parent.type !== AST_NODE_TYPES.MethodDefinition &&
                (parent.type !== AST_NODE_TYPES.Property || !parent.method) &&
                parent.type !== AST_NODE_TYPES.TSAbstractMethodDefinition
        ) {
            this.operators.add("function")
        }

        if (node.generator) {
            this.operators.add("*")
        }
        this.operators.add("()")
        this.operators.add(",", node.params.length - 1)

        if (node.declare) this.operators.add("declare")
    },
    TSEnumDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.TSEnumDeclaration,
    ) {
        if (node.const) this.operators.add("const")
        this.operators.add("enum")
        this.operators.add("{}")
        this.operators.add(",", node.members.length - 1)

        if (node.declare) this.operators.add("declare")
    },
    TSEnumMember(this: ExtractTokensContext, node: TSESTree.TSEnumMember) {
        if (node.computed) {
            this.operators.add("[]")
        }
        if (node.initializer) {
            this.operators.add("=")
        }
    },
    TSExportAssignment(this: ExtractTokensContext) {
        this.operators.add("export")
        this.operators.add("=")
    },
    TSExportKeyword(this: ExtractTokensContext) {
        this.operators.add("export")
    },
    TSExternalModuleReference(this: ExtractTokensContext) {
        this.operands.add("require")
        this.operators.add("()")
    },
    TSFunctionType(this: ExtractTokensContext, node: TSESTree.TSFunctionType) {
        this.operators.add("()")
        this.operators.add(",", node.params.length - 1)
    },
    TSImportEqualsDeclaration(this: ExtractTokensContext) {
        this.operators.add("import")
        this.operators.add("=")
    },
    TSImportType(this: ExtractTokensContext, node: TSESTree.TSImportType) {
        this.operators.add("import")
        this.operators.add("()")
        if (node.qualifier) {
            this.operators.add(".")
        }
    },
    TSIndexSignature(this: ExtractTokensContext, node) {
        this.operators.add("[]")
        if (node.readonly) this.operators.add("readonly")
        if (node.static) this.operators.add("static")
        if (node.export) this.operators.add("export")
    },
    TSIndexedAccessType(this: ExtractTokensContext) {
        this.operators.add("[]")
    },
    TSInferType(this: ExtractTokensContext) {
        this.operators.add("infer")
    },
    TSInterfaceBody(this: ExtractTokensContext) {
        this.operators.add("{}")
    },
    TSInterfaceDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.TSInterfaceDeclaration,
    ) {
        this.operators.add("interface")
        if (node.extends) {
            this.operators.add("extends")
            this.operators.add(",", node.extends.length - 1)
        }
        if (node.implements) {
            this.operators.add("implements")
            this.operators.add(",", node.implements.length - 1)
        }
        if (node.abstract) {
            this.operators.add("abstract")
        }
        if (node.declare) this.operators.add("declare")
    },
    TSInterfaceHeritage: noop,
    TSIntersectionType(
        this: ExtractTokensContext,
        node: TSESTree.TSIntersectionType,
    ) {
        this.operators.add("&", node.types.length - 1)
    },
    TSIntrinsicKeyword(this: ExtractTokensContext) {
        this.operands.add("intrinsic")
    },
    TSLiteralType: noop,
    TSMappedType(this: ExtractTokensContext, node: TSESTree.TSMappedType) {
        this.operators.add("{}")
        if (node.readonly) {
            if (typeof node.readonly === "string") {
                this.operators.add(node.readonly)
            }
            this.operators.add("readonly")
        }

        this.operators.add("[]")
        if (node.optional) {
            if (typeof node.optional === "string") {
                this.operators.add(node.optional)
            }
            this.operators.add("?")
        }
        this.operators.add(":")
    },
    TSMethodSignature(
        this: ExtractTokensContext,
        node: TSESTree.TSMethodSignature,
    ) {
        if (node.accessibility) this.operators.add(node.accessibility)
        if (node.readonly) this.operators.add("readonly")
        if (node.static) this.operators.add("static")
        if (node.export) this.operators.add("export")
        if (node.kind === "get" || node.kind === "set")
            this.operators.add(node.kind)
        if (node.computed) this.operators.add("[]")
        if (node.optional) this.operators.add("?")

        this.operators.add("()")
        this.operators.add(",", node.params.length - 1)
    },
    TSModuleBlock(this: ExtractTokensContext) {
        this.operators.add("{}")
    },
    TSModuleDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.TSModuleDeclaration,
    ) {
        if (node.declare) this.operators.add("declare")
        if (!node.global) {
            this.operators.add("module")
        }
    },
    TSNamespaceExportDeclaration(this: ExtractTokensContext) {
        this.operators.add("export")
        this.operators.add("as")
        this.operators.add("namespace")
    },
    TSNamedTupleMember(
        this: ExtractTokensContext,
        node: TSESTree.TSNamedTupleMember,
    ) {
        if (node.optional) this.operators.add("?")
        this.operators.add(":")
    },
    TSNeverKeyword(this: ExtractTokensContext) {
        this.operands.add("never")
    },
    TSNonNullExpression(this: ExtractTokensContext) {
        this.operators.add("!")
    },
    TSNullKeyword(this: ExtractTokensContext) {
        this.operands.add("null")
    },
    TSNumberKeyword(this: ExtractTokensContext) {
        this.operands.add("number")
    },
    TSObjectKeyword(this: ExtractTokensContext) {
        this.operands.add("object")
    },
    TSOptionalType(this: ExtractTokensContext) {
        this.operators.add("?")
    },
    TSParameterProperty(
        this: ExtractTokensContext,
        node: TSESTree.TSParameterProperty,
    ) {
        if (node.accessibility) this.operators.add(node.accessibility)
        if (node.readonly) this.operators.add("readonly")
        if (node.static) this.operators.add("static")
        if (node.export) this.operators.add("export")
    },
    TSPrivateKeyword(this: ExtractTokensContext) {
        this.operators.add("private")
    },
    TSPropertySignature(
        this: ExtractTokensContext,
        node: TSESTree.TSPropertySignature,
    ) {
        if (node.accessibility) this.operators.add(node.accessibility)
        if (node.readonly) this.operators.add("readonly")
        if (node.static) this.operators.add("static")
        if (node.export) this.operators.add("export")
        if (node.computed) this.operators.add("[]")
        if (node.optional) this.operators.add("?")
    },
    TSProtectedKeyword(this: ExtractTokensContext) {
        this.operators.add("protected")
    },
    TSPublicKeyword(this: ExtractTokensContext) {
        this.operators.add("public")
    },
    TSQualifiedName(this: ExtractTokensContext) {
        this.operators.add(".")
    },
    TSReadonlyKeyword(this: ExtractTokensContext) {
        this.operators.add("readonly")
    },
    TSRestType(this: ExtractTokensContext) {
        this.operators.add("...")
    },
    TSStaticKeyword(this: ExtractTokensContext) {
        this.operators.add("static")
    },
    TSStringKeyword(this: ExtractTokensContext) {
        this.operands.add("string")
    },
    TSSymbolKeyword(this: ExtractTokensContext) {
        this.operands.add("symbol")
    },
    TSTemplateLiteralType: noop,
    TSThisType(this: ExtractTokensContext) {
        this.operands.add("this")
    },
    TSTupleType(this: ExtractTokensContext, node) {
        this.operators.add("[]")
        this.operators.add(",", node.elementTypes.length - 1)
    },
    TSTypeAliasDeclaration(this: ExtractTokensContext) {
        this.operators.add("type")
        this.operators.add("=")
    },
    TSTypeAnnotation(
        this: ExtractTokensContext,
        node: TSESTree.TSTypeAnnotation,
        parent: TSESTree.Node | null,
    ) {
        if (parent) {
            if (
                parent.type === AST_NODE_TYPES.TSFunctionType &&
                    parent.returnType === node ||
                parent.type === AST_NODE_TYPES.TSConstructorType &&
                    parent.returnType === node
            ) {
                this.operators.add("=>")
                return
            }
            if (parent.type === AST_NODE_TYPES.TSTypePredicate) {
                return
            }
        }
        this.operators.add(":")
    },
    TSTypeAssertion(this: ExtractTokensContext) {
        this.operators.add("<>")
    },
    TSTypeLiteral(this: ExtractTokensContext) {
        this.operators.add("{}")
    },
    TSTypeOperator(this: ExtractTokensContext) {
        this.operators.add("keyof")
    },
    TSTypeParameter(
        this: ExtractTokensContext,
        node: TSESTree.TSTypeParameter,
        parent,
    ) {
        if (node.constraint) {
            if (
                parent &&
                parent.type === AST_NODE_TYPES.TSMappedType &&
                parent.typeParameter === node
            ) {
                this.operators.add("in")
            } else {
                this.operators.add("extends")
            }
        }
        if (node.default) {
            this.operators.add("=")
        }
    },
    TSTypeParameterDeclaration(
        this: ExtractTokensContext,
        node: TSESTree.TSTypeParameterDeclaration,
    ) {
        this.operators.add("<>")
        this.operators.add(",", node.params.length - 1)
    },
    TSTypeParameterInstantiation(
        this: ExtractTokensContext,
        node: TSESTree.TSTypeParameterInstantiation,
    ) {
        this.operators.add("<>")
        this.operators.add(",", node.params.length - 1)
    },
    TSTypePredicate(this: ExtractTokensContext) {
        this.operators.add("is")
    },
    TSTypeQuery(this: ExtractTokensContext) {
        this.operators.add("typeof")
    },
    TSTypeReference: noop,
    TSUndefinedKeyword(this: ExtractTokensContext) {
        this.operands.add("undefined")
    },
    TSUnionType(this: ExtractTokensContext, node: TSESTree.TSUnionType) {
        this.operators.add("|", node.types.length - 1)
    },
    TSUnknownKeyword(this: ExtractTokensContext) {
        this.operands.add("unknown")
    },
    TSVoidKeyword(this: ExtractTokensContext) {
        this.operands.add("void")
    },
}
\` 1`] = `
Object {
  "operands": Array [
    "EXTRACT_TOKENS",
    "AllVisitor",
    "ArrayExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ArrayExpression",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "elements",
    "length",
    "1",
    "ArrayPattern",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ArrayPattern",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "elements",
    "length",
    "1",
    "ArrowFunctionExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ArrowFunctionExpression",
    "node",
    "async",
    "this",
    "operators",
    "add",
    "\\"async\\"",
    "node",
    "generator",
    "this",
    "operators",
    "add",
    "\\"*\\"",
    "node",
    "params",
    "length",
    "1",
    "node",
    "params",
    "0",
    "type",
    "AST_NODE_TYPES",
    "Identifier",
    "node",
    "params",
    "0",
    "typeAnnotation",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
    "this",
    "operators",
    "add",
    "\\"=>\\"",
    "node",
    "body",
    "type",
    "AST_NODE_TYPES",
    "ObjectExpression",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "AssignmentExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "AssignmentExpression",
    "this",
    "operators",
    "add",
    "node",
    "operator",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "right",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "AssignmentPattern",
    "this",
    "ExtractTokensContext",
    "_node",
    "TSESTree",
    "AssignmentPattern",
    "this",
    "operators",
    "add",
    "\\"=\\"",
    "AwaitExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "AwaitExpression",
    "this",
    "operators",
    "add",
    "\\"await\\"",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "argument",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "BinaryExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "BinaryExpression",
    "this",
    "operators",
    "add",
    "node",
    "operator",
    "\\"operator\\"",
    "ESTree",
    "BinaryExpression",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "right",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "BlockStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "BreakStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"break\\"",
    "CallExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "CallExpression",
    "node",
    "optional",
    "this",
    "operators",
    "add",
    "\\"?.\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "arguments",
    "length",
    "1",
    "CatchClause",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "CatchClause",
    "this",
    "operators",
    "add",
    "\\"catch\\"",
    "node",
    "param",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "ChainExpression",
    "noop",
    "ClassBody",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "ClassDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ClassDeclaration",
    "this",
    "operators",
    "add",
    "\\"class\\"",
    "node",
    "superClass",
    "this",
    "operators",
    "add",
    "\\"extends\\"",
    "node",
    "implements",
    "this",
    "operators",
    "add",
    "\\"implements\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "implements",
    "length",
    "1",
    "node",
    "abstract",
    "this",
    "operators",
    "add",
    "\\"abstract\\"",
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
    "ClassExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ClassExpression",
    "this",
    "operators",
    "add",
    "\\"class\\"",
    "node",
    "superClass",
    "this",
    "operators",
    "add",
    "\\"extends\\"",
    "node",
    "implements",
    "this",
    "operators",
    "add",
    "\\"implements\\"",
    "node",
    "abstract",
    "this",
    "operators",
    "add",
    "\\"abstract\\"",
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
    "ConditionalExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ConditionalExpression",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "test",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\"?:\\"",
    "ContinueStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"continue\\"",
    "DebuggerStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"debugger\\"",
    "Decorator",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"@\\"",
    "DoWhileStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"do\\"",
    "this",
    "operators",
    "add",
    "\\"while()\\"",
    "EmptyStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\";\\"",
    "ExportAllDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ExportAllDeclaration",
    "this",
    "operators",
    "add",
    "\\"export\\"",
    "node",
    "exportKind",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"*\\"",
    "node",
    "exported",
    "this",
    "operators",
    "add",
    "\\"as\\"",
    "node",
    "source",
    "this",
    "operators",
    "add",
    "\\"from\\"",
    "node",
    "assertions",
    "node",
    "assertions",
    "length",
    "this",
    "operators",
    "add",
    "\\"assert\\"",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "ExportDefaultDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ExportDefaultDeclaration",
    "this",
    "operators",
    "add",
    "\\"export\\"",
    "node",
    "exportKind",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"default\\"",
    "ExportNamedDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ExportNamedDeclaration",
    "this",
    "operators",
    "add",
    "\\"export\\"",
    "node",
    "specifiers",
    "length",
    "node",
    "exportKind",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "specifiers",
    "length",
    "1",
    "node",
    "source",
    "this",
    "operators",
    "add",
    "\\"from\\"",
    "node",
    "assertions",
    "node",
    "assertions",
    "length",
    "this",
    "operators",
    "add",
    "\\"assert\\"",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "ExportSpecifier",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ExportSpecifier",
    "node",
    "exportKind",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"type\\"",
    "node",
    "local",
    "name",
    "node",
    "exported",
    "name",
    "this",
    "operators",
    "add",
    "\\"as\\"",
    "ExpressionStatement",
    "noop",
    "ForInStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"for()\\"",
    "this",
    "operators",
    "add",
    "\\"in\\"",
    "ForOfStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"for()\\"",
    "this",
    "operators",
    "add",
    "\\"of\\"",
    "ForStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"for()\\"",
    "this",
    "operators",
    "add",
    "\\";\\"",
    "2",
    "FunctionDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "FunctionDeclaration",
    "node",
    "async",
    "this",
    "operators",
    "add",
    "\\"async\\"",
    "this",
    "operators",
    "add",
    "\\"function\\"",
    "node",
    "generator",
    "this",
    "operators",
    "add",
    "\\"*\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
    "FunctionExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "FunctionExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "node",
    "async",
    "this",
    "operators",
    "add",
    "\\"async\\"",
    "parent",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "MethodDefinition",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "Property",
    "parent",
    "method",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSAbstractMethodDefinition",
    "this",
    "operators",
    "add",
    "\\"function\\"",
    "node",
    "generator",
    "this",
    "operators",
    "add",
    "\\"*\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
    "Identifier",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "Identifier",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "parent",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "Property",
    "parent",
    "shorthand",
    "parent",
    "value",
    "node",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "ImportSpecifier",
    "parent",
    "imported",
    "name",
    "node",
    "name",
    "parent",
    "local",
    "node",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "ExportSpecifier",
    "parent",
    "local",
    "name",
    "node",
    "name",
    "parent",
    "exported",
    "node",
    "this",
    "operands",
    "add",
    "node",
    "name",
    "IfStatement",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "IfStatement",
    "this",
    "operators",
    "add",
    "\\"if()\\"",
    "node",
    "alternate",
    "this",
    "operators",
    "add",
    "\\"else\\"",
    "ImportAttribute",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\":\\"",
    "ImportDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ImportDeclaration",
    "this",
    "operators",
    "add",
    "\\"import\\"",
    "node",
    "importKind",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"type\\"",
    "node",
    "specifiers",
    "some",
    "spec",
    "spec",
    "type",
    "AST_NODE_TYPES",
    "ImportSpecifier",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "specifiers",
    "length",
    "1",
    "node",
    "specifiers",
    "length",
    "this",
    "operators",
    "add",
    "\\"from\\"",
    "node",
    "assertions",
    "node",
    "assertions",
    "length",
    "this",
    "operators",
    "add",
    "\\"assert\\"",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "ImportDefaultSpecifier",
    "noop",
    "ImportExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ImportExpression",
    "this",
    "operators",
    "add",
    "\\"import\\"",
    "node",
    "attributes",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "ImportNamespaceSpecifier",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"*\\"",
    "this",
    "operators",
    "add",
    "\\"as\\"",
    "ImportSpecifier",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ImportSpecifier",
    "node",
    "importKind",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"type\\"",
    "node",
    "local",
    "name",
    "node",
    "imported",
    "name",
    "this",
    "operators",
    "add",
    "\\"as\\"",
    "JSXAttribute",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"=\\"",
    "JSXClosingElement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"</\\"",
    "this",
    "operators",
    "add",
    "\\">\\"",
    "JSXClosingFragment",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"</\\"",
    "this",
    "operators",
    "add",
    "\\">\\"",
    "JSXElement",
    "noop",
    "JSXEmptyExpression",
    "noop",
    "JSXExpressionContainer",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "JSXFragment",
    "noop",
    "JSXIdentifier",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "JSXIdentifier",
    "this",
    "operands",
    "add",
    "node",
    "name",
    "JSXMemberExpression",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\".\\"",
    "JSXNamespacedName",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\":\\"",
    "JSXOpeningElement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"<\\"",
    "this",
    "operators",
    "add",
    "\\">\\"",
    "JSXOpeningFragment",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"<\\"",
    "this",
    "operators",
    "add",
    "\\">\\"",
    "JSXSpreadAttribute",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "this",
    "operators",
    "add",
    "\\"...\\"",
    "JSXSpreadChild",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "this",
    "operators",
    "add",
    "\\"...\\"",
    "JSXText",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "JSXText",
    "this",
    "operands",
    "add",
    "JSON",
    "stringify",
    "node",
    "value",
    "LabeledStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\":\\"",
    "Literal",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "Literal",
    "\\"bigint\\"",
    "node",
    "node",
    "bigint",
    "this",
    "operands",
    "add",
    "\`\${",
    "}n\`",
    "node",
    "bigint",
    "\\"regex\\"",
    "node",
    "node",
    "regex",
    "this",
    "operands",
    "add",
    "\`/\${",
    "}/\${",
    "}\`",
    "node",
    "regex",
    "pattern",
    "node",
    "regex",
    "flags",
    "this",
    "operands",
    "add",
    "JSON",
    "stringify",
    "node",
    "value",
    "LogicalExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "LogicalExpression",
    "this",
    "operators",
    "add",
    "node",
    "operator",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "right",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "MemberExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "MemberExpression",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "object",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "node",
    "optional",
    "this",
    "operators",
    "add",
    "\\"?.\\"",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "this",
    "operators",
    "add",
    "\\".\\"",
    "MetaProperty",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\".\\"",
    "MethodDefinition",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "MethodDefinition",
    "node",
    "accessibility",
    "this",
    "operators",
    "add",
    "node",
    "accessibility",
    "node",
    "static",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "node",
    "kind",
    "\\"get\\"",
    "node",
    "kind",
    "\\"set\\"",
    "this",
    "operators",
    "add",
    "node",
    "kind",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "NewExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "NewExpression",
    "this",
    "operators",
    "add",
    "\\"new\\"",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "callee",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "arguments",
    "length",
    "1",
    "ObjectExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ObjectExpression",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "properties",
    "length",
    "1",
    "ObjectPattern",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "ObjectPattern",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "properties",
    "length",
    "1",
    "PrivateIdentifier",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "PrivateIdentifier",
    "this",
    "operands",
    "add",
    "\`#\${",
    "}\`",
    "node",
    "name",
    "Program",
    "noop",
    "Property",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "Property",
    "node",
    "kind",
    "\\"get\\"",
    "node",
    "kind",
    "\\"set\\"",
    "this",
    "operators",
    "add",
    "node",
    "kind",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "shorthand",
    "node",
    "method",
    "this",
    "operators",
    "add",
    "\\":\\"",
    "PropertyDefinition",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "PropertyDefinition",
    "node",
    "accessibility",
    "this",
    "operators",
    "add",
    "node",
    "accessibility",
    "node",
    "static",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "node",
    "readonly",
    "this",
    "operators",
    "add",
    "\\"readonly\\"",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "value",
    "this",
    "operators",
    "add",
    "\\"=\\"",
    "RestElement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"...\\"",
    "ReturnStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"return\\"",
    "SequenceExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "SequenceExpression",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "expressions",
    "length",
    "1",
    "SpreadElement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"...\\"",
    "StaticBlock",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "Super",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"super\\"",
    "SwitchCase",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "SwitchCase",
    "node",
    "test",
    "this",
    "operators",
    "add",
    "\\"case\\"",
    "this",
    "operators",
    "add",
    "\\"default\\"",
    "this",
    "operators",
    "add",
    "\\":\\"",
    "SwitchStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"switch()\\"",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "TaggedTemplateExpression",
    "noop",
    "TemplateElement",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TemplateElement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "open",
    "\\"\`\\"",
    "close",
    "\\"\`\\"",
    "parent",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TemplateLiteral",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSTemplateLiteralType",
    "index",
    "parent",
    "quasis",
    "indexOf",
    "node",
    "index",
    "0",
    "open",
    "\\"}\\"",
    "index",
    "parent",
    "quasis",
    "length",
    "1",
    "close",
    "\\"\${\\"",
    "this",
    "operands",
    "add",
    "\`\${",
    "}\${",
    "}\${",
    "}\`",
    "open",
    "node",
    "value",
    "cooked",
    "close",
    "TemplateLiteral",
    "noop",
    "ThisExpression",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"this\\"",
    "ThrowStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"throw\\"",
    "TryStatement",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TryStatement",
    "this",
    "operators",
    "add",
    "\\"try\\"",
    "node",
    "finalizer",
    "this",
    "operators",
    "add",
    "\\"finally\\"",
    "UnaryExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "UnaryExpression",
    "this",
    "operators",
    "add",
    "node",
    "operator",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "argument",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "UpdateExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "UpdateExpression",
    "this",
    "operators",
    "add",
    "node",
    "operator",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "argument",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "VariableDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "VariableDeclaration",
    "this",
    "operators",
    "add",
    "node",
    "kind",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "declarations",
    "length",
    "1",
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
    "VariableDeclarator",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "VariableDeclarator",
    "node",
    "init",
    "this",
    "operators",
    "add",
    "\\"=\\"",
    "WhileStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"while()\\"",
    "WithStatement",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"with()\\"",
    "YieldExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "YieldExpression",
    "this",
    "operators",
    "add",
    "\\"yield\\"",
    "node",
    "delegate",
    "this",
    "operators",
    "add",
    "\\"*\\"",
    "node",
    "argument",
    "getPrecedence",
    "node",
    "getPrecedence",
    "node",
    "argument",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "TSAbstractKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"abstract\\"",
    "TSAbstractMethodDefinition",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSAbstractMethodDefinition",
    "this",
    "operators",
    "add",
    "\\"abstract\\"",
    "node",
    "accessibility",
    "this",
    "operators",
    "add",
    "node",
    "accessibility",
    "node",
    "static",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "node",
    "kind",
    "\\"get\\"",
    "node",
    "kind",
    "\\"set\\"",
    "this",
    "operators",
    "add",
    "node",
    "kind",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "TSAbstractPropertyDefinition",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSAbstractPropertyDefinition",
    "this",
    "operators",
    "add",
    "\\"abstract\\"",
    "node",
    "accessibility",
    "this",
    "operators",
    "add",
    "node",
    "accessibility",
    "node",
    "static",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "value",
    "this",
    "operators",
    "add",
    "\\"=\\"",
    "TSAnyKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"any\\"",
    "TSArrayType",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "TSAsExpression",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"as\\"",
    "TSAsyncKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"async\\"",
    "TSBigIntKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"bigint\\"",
    "TSBooleanKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"boolean\\"",
    "TSCallSignatureDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSCallSignatureDeclaration",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
    "TSClassImplements",
    "noop",
    "TSConditionalType",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"extends\\"",
    "this",
    "operators",
    "add",
    "\\"?:\\"",
    "TSConstructSignatureDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSConstructSignatureDeclaration",
    "this",
    "operators",
    "add",
    "\\"new\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
    "TSConstructorType",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSConstructorType",
    "this",
    "operators",
    "add",
    "\\"new\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
    "TSDeclareFunction",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSDeclareFunction",
    "node",
    "async",
    "this",
    "operators",
    "add",
    "\\"async\\"",
    "this",
    "operators",
    "add",
    "\\"function\\"",
    "node",
    "generator",
    "this",
    "operators",
    "add",
    "\\"*\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
    "TSDeclareKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
    "TSEmptyBodyFunctionExpression",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSEmptyBodyFunctionExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "node",
    "async",
    "this",
    "operators",
    "add",
    "\\"async\\"",
    "parent",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "MethodDefinition",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "Property",
    "parent",
    "method",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSAbstractMethodDefinition",
    "this",
    "operators",
    "add",
    "\\"function\\"",
    "node",
    "generator",
    "this",
    "operators",
    "add",
    "\\"*\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
    "TSEnumDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSEnumDeclaration",
    "node",
    "const",
    "this",
    "operators",
    "add",
    "\\"const\\"",
    "this",
    "operators",
    "add",
    "\\"enum\\"",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "members",
    "length",
    "1",
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
    "TSEnumMember",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSEnumMember",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "initializer",
    "this",
    "operators",
    "add",
    "\\"=\\"",
    "TSExportAssignment",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"export\\"",
    "this",
    "operators",
    "add",
    "\\"=\\"",
    "TSExportKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"export\\"",
    "TSExternalModuleReference",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"require\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "TSFunctionType",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSFunctionType",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
    "TSImportEqualsDeclaration",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"import\\"",
    "this",
    "operators",
    "add",
    "\\"=\\"",
    "TSImportType",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSImportType",
    "this",
    "operators",
    "add",
    "\\"import\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "node",
    "qualifier",
    "this",
    "operators",
    "add",
    "\\".\\"",
    "TSIndexSignature",
    "this",
    "ExtractTokensContext",
    "node",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "readonly",
    "this",
    "operators",
    "add",
    "\\"readonly\\"",
    "node",
    "static",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "node",
    "export",
    "this",
    "operators",
    "add",
    "\\"export\\"",
    "TSIndexedAccessType",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "TSInferType",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"infer\\"",
    "TSInterfaceBody",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "TSInterfaceDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSInterfaceDeclaration",
    "this",
    "operators",
    "add",
    "\\"interface\\"",
    "node",
    "extends",
    "this",
    "operators",
    "add",
    "\\"extends\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "extends",
    "length",
    "1",
    "node",
    "implements",
    "this",
    "operators",
    "add",
    "\\"implements\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "implements",
    "length",
    "1",
    "node",
    "abstract",
    "this",
    "operators",
    "add",
    "\\"abstract\\"",
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
    "TSInterfaceHeritage",
    "noop",
    "TSIntersectionType",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSIntersectionType",
    "this",
    "operators",
    "add",
    "\\"&\\"",
    "node",
    "types",
    "length",
    "1",
    "TSIntrinsicKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"intrinsic\\"",
    "TSLiteralType",
    "noop",
    "TSMappedType",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSMappedType",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "node",
    "readonly",
    "node",
    "readonly",
    "\\"string\\"",
    "this",
    "operators",
    "add",
    "node",
    "readonly",
    "this",
    "operators",
    "add",
    "\\"readonly\\"",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "optional",
    "node",
    "optional",
    "\\"string\\"",
    "this",
    "operators",
    "add",
    "node",
    "optional",
    "this",
    "operators",
    "add",
    "\\"?\\"",
    "this",
    "operators",
    "add",
    "\\":\\"",
    "TSMethodSignature",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSMethodSignature",
    "node",
    "accessibility",
    "this",
    "operators",
    "add",
    "node",
    "accessibility",
    "node",
    "readonly",
    "this",
    "operators",
    "add",
    "\\"readonly\\"",
    "node",
    "static",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "node",
    "export",
    "this",
    "operators",
    "add",
    "\\"export\\"",
    "node",
    "kind",
    "\\"get\\"",
    "node",
    "kind",
    "\\"set\\"",
    "this",
    "operators",
    "add",
    "node",
    "kind",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "optional",
    "this",
    "operators",
    "add",
    "\\"?\\"",
    "this",
    "operators",
    "add",
    "\\"()\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
    "TSModuleBlock",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "TSModuleDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSModuleDeclaration",
    "node",
    "declare",
    "this",
    "operators",
    "add",
    "\\"declare\\"",
    "node",
    "global",
    "this",
    "operators",
    "add",
    "\\"module\\"",
    "TSNamespaceExportDeclaration",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"export\\"",
    "this",
    "operators",
    "add",
    "\\"as\\"",
    "this",
    "operators",
    "add",
    "\\"namespace\\"",
    "TSNamedTupleMember",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSNamedTupleMember",
    "node",
    "optional",
    "this",
    "operators",
    "add",
    "\\"?\\"",
    "this",
    "operators",
    "add",
    "\\":\\"",
    "TSNeverKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"never\\"",
    "TSNonNullExpression",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"!\\"",
    "TSNullKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"null\\"",
    "TSNumberKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"number\\"",
    "TSObjectKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"object\\"",
    "TSOptionalType",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"?\\"",
    "TSParameterProperty",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSParameterProperty",
    "node",
    "accessibility",
    "this",
    "operators",
    "add",
    "node",
    "accessibility",
    "node",
    "readonly",
    "this",
    "operators",
    "add",
    "\\"readonly\\"",
    "node",
    "static",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "node",
    "export",
    "this",
    "operators",
    "add",
    "\\"export\\"",
    "TSPrivateKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"private\\"",
    "TSPropertySignature",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSPropertySignature",
    "node",
    "accessibility",
    "this",
    "operators",
    "add",
    "node",
    "accessibility",
    "node",
    "readonly",
    "this",
    "operators",
    "add",
    "\\"readonly\\"",
    "node",
    "static",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "node",
    "export",
    "this",
    "operators",
    "add",
    "\\"export\\"",
    "node",
    "computed",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "node",
    "optional",
    "this",
    "operators",
    "add",
    "\\"?\\"",
    "TSProtectedKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"protected\\"",
    "TSPublicKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"public\\"",
    "TSQualifiedName",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\".\\"",
    "TSReadonlyKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"readonly\\"",
    "TSRestType",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"...\\"",
    "TSStaticKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"static\\"",
    "TSStringKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"string\\"",
    "TSSymbolKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"symbol\\"",
    "TSTemplateLiteralType",
    "noop",
    "TSThisType",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"this\\"",
    "TSTupleType",
    "this",
    "ExtractTokensContext",
    "node",
    "this",
    "operators",
    "add",
    "\\"[]\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "elementTypes",
    "length",
    "1",
    "TSTypeAliasDeclaration",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"type\\"",
    "this",
    "operators",
    "add",
    "\\"=\\"",
    "TSTypeAnnotation",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSTypeAnnotation",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "parent",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSFunctionType",
    "parent",
    "returnType",
    "node",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSConstructorType",
    "parent",
    "returnType",
    "node",
    "this",
    "operators",
    "add",
    "\\"=>\\"",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSTypePredicate",
    "this",
    "operators",
    "add",
    "\\":\\"",
    "TSTypeAssertion",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"<>\\"",
    "TSTypeLiteral",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"{}\\"",
    "TSTypeOperator",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"keyof\\"",
    "TSTypeParameter",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSTypeParameter",
    "parent",
    "node",
    "constraint",
    "parent",
    "parent",
    "type",
    "AST_NODE_TYPES",
    "TSMappedType",
    "parent",
    "typeParameter",
    "node",
    "this",
    "operators",
    "add",
    "\\"in\\"",
    "this",
    "operators",
    "add",
    "\\"extends\\"",
    "node",
    "default",
    "this",
    "operators",
    "add",
    "\\"=\\"",
    "TSTypeParameterDeclaration",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSTypeParameterDeclaration",
    "this",
    "operators",
    "add",
    "\\"<>\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
    "TSTypeParameterInstantiation",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSTypeParameterInstantiation",
    "this",
    "operators",
    "add",
    "\\"<>\\"",
    "this",
    "operators",
    "add",
    "\\",\\"",
    "node",
    "params",
    "length",
    "1",
    "TSTypePredicate",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"is\\"",
    "TSTypeQuery",
    "this",
    "ExtractTokensContext",
    "this",
    "operators",
    "add",
    "\\"typeof\\"",
    "TSTypeReference",
    "noop",
    "TSUndefinedKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"undefined\\"",
    "TSUnionType",
    "this",
    "ExtractTokensContext",
    "node",
    "TSESTree",
    "TSUnionType",
    "this",
    "operators",
    "add",
    "\\"|\\"",
    "node",
    "types",
    "length",
    "1",
    "TSUnknownKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"unknown\\"",
    "TSVoidKeyword",
    "this",
    "ExtractTokensContext",
    "this",
    "operands",
    "add",
    "\\"void\\"",
  ],
  "operators": Array [
    "=",
    ":",
    "{}",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "||",
    "||",
    "!==",
    ".",
    ".",
    "!==",
    ".",
    "[]",
    ".",
    ".",
    ".",
    "[]",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ".",
    ".",
    "if()",
    "===",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ">=",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ">",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "as",
    ".",
    "[]",
    ".",
    "if()",
    ">=",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ":",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ">=",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "&&",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    ".",
    "{}",
    "if()",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "&&",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "!==",
    ".",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ":",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ",",
    ":",
    ":",
    ".",
    ":",
    "|",
    ".",
    "{}",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "||",
    "!",
    "&&",
    "&&",
    "()",
    "!==",
    ".",
    ".",
    "||",
    "!==",
    ".",
    ".",
    "!",
    ".",
    "!==",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ",",
    ":",
    ":",
    ".",
    ":",
    "|",
    ".",
    "{}",
    "if()",
    "{}",
    "if()",
    "&&",
    "&&",
    "===",
    ".",
    ".",
    ".",
    "===",
    ".",
    "return",
    "if()",
    "&&",
    "&&",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
    ".",
    "===",
    ".",
    "return",
    "if()",
    "&&",
    "&&",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
    ".",
    "===",
    ".",
    "return",
    "()",
    ".",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "()",
    ".",
    ".",
    "=>",
    "===",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "&&",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    ":",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "!==",
    ".",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    ":",
    ":",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    ":",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    "else",
    "&&",
    "in",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    "if()",
    "else",
    "&&",
    "in",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    ".",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ">=",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ">",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "else",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "else",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    "||",
    "===",
    ".",
    "===",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ">=",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    ":",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    "||",
    "===",
    ".",
    "===",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "&&",
    "!",
    ".",
    "!",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    "else",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    ":",
    "()",
    ",",
    ",",
    ":",
    ":",
    ".",
    ":",
    "|",
    ".",
    "{}",
    "let",
    "=",
    "let",
    "=",
    "if()",
    "&&",
    "()",
    "||",
    "===",
    ".",
    ".",
    "===",
    ".",
    ".",
    "{}",
    "const",
    "=",
    "()",
    ".",
    ".",
    "if()",
    ">",
    "{}",
    "=",
    "if()",
    "<",
    "-",
    ".",
    ".",
    "{}",
    "=",
    "()",
    ".",
    ".",
    ".",
    ".",
    ":",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ">=",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ">=",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "&&",
    ".",
    ">",
    "()",
    "()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    "||",
    "===",
    ".",
    "===",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    ":",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ",",
    ":",
    ":",
    ".",
    ":",
    "|",
    ".",
    "{}",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    "||",
    "!",
    "&&",
    "&&",
    "()",
    "!==",
    ".",
    ".",
    "||",
    "!==",
    ".",
    ".",
    "!",
    ".",
    "!==",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    ":",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    ":",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "if()",
    "===",
    "typeof",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "if()",
    "===",
    "typeof",
    ".",
    "{}",
    "()",
    ".",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    "||",
    "===",
    ".",
    "===",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    "!",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "()",
    ".",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    ":",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ".",
    ".",
    "()",
    ",",
    ",",
    ":",
    ":",
    ".",
    ":",
    "|",
    ".",
    "{}",
    "if()",
    "{}",
    "if()",
    "||",
    "&&",
    "===",
    ".",
    ".",
    "===",
    ".",
    "&&",
    "===",
    ".",
    ".",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "return",
    "if()",
    "===",
    ".",
    ".",
    "{}",
    "return",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "if()",
    ".",
    "{}",
    "if()",
    "else",
    "&&",
    "&&",
    "===",
    ".",
    ".",
    "===",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "if()",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    ":",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ",",
    ":",
    ":",
    ".",
    "{}",
    "()",
    ",",
    ".",
    ".",
    "-",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
    "()",
    ":",
    "{}",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts VariableDeclarator\`
close = "\`"
\` 1`] = `
Object {
  "operands": Array [
    "close",
    "\\"\`\\"",
  ],
  "operators": Array [
    "=",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts VariableDeclarator\`
context = new ExtractTokensContext()
\` 1`] = `
Object {
  "operands": Array [
    "context",
    "ExtractTokensContext",
  ],
  "operators": Array [
    "=",
    "new",
    "()",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts VariableDeclarator\`
extract = EXTRACT_TOKENS[node.type] as any
\` 1`] = `
Object {
  "operands": Array [
    "extract",
    "EXTRACT_TOKENS",
    "node",
    "type",
    "any",
  ],
  "operators": Array [
    "=",
    "as",
    "[]",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts VariableDeclarator\`
index = 0
\` 1`] = `
Object {
  "operands": Array [
    "index",
    "0",
  ],
  "operators": Array [
    "=",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts VariableDeclarator\`
index = parent.quasis.indexOf(node)
\` 1`] = `
Object {
  "operands": Array [
    "index",
    "parent",
    "quasis",
    "indexOf",
    "node",
  ],
  "operators": Array [
    "=",
    "()",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/extract-tokens.ts VariableDeclarator\`
open = "\`"
\` 1`] = `
Object {
  "operands": Array [
    "open",
    "\\"\`\\"",
  ],
  "operators": Array [
    "=",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts BinaryExpression\`
Math.log(vocabulary) / Math.log(2)
\` 1`] = `
Object {
  "operands": Array [
    "Math",
    "log",
    "vocabulary",
    "Math",
    "log",
    "2",
  ],
  "operators": Array [
    "/",
    "()",
    ".",
    "()",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts BinaryExpression\`
context.operands.distinctSize === 0
\` 1`] = `
Object {
  "operands": Array [
    "context",
    "operands",
    "distinctSize",
    "0",
  ],
  "operators": Array [
    "===",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts BinaryExpression\`
context.operands.totalSize / context.operands.distinctSize
\` 1`] = `
Object {
  "operands": Array [
    "context",
    "operands",
    "totalSize",
    "context",
    "operands",
    "distinctSize",
  ],
  "operators": Array [
    "/",
    ".",
    ".",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts BinaryExpression\`
context.operators.distinctSize + context.operands.distinctSize
\` 1`] = `
Object {
  "operands": Array [
    "context",
    "operators",
    "distinctSize",
    "context",
    "operands",
    "distinctSize",
  ],
  "operators": Array [
    "+",
    ".",
    ".",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts BinaryExpression\`
context.operators.distinctSize / 2
\` 1`] = `
Object {
  "operands": Array [
    "context",
    "operators",
    "distinctSize",
    "2",
  ],
  "operators": Array [
    "/",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts BinaryExpression\`
context.operators.distinctSize / 2 *
        (context.operands.distinctSize === 0
            ? 1
            : context.operands.totalSize / context.operands.distinctSize)
\` 1`] = `
Object {
  "operands": Array [
    "context",
    "operators",
    "distinctSize",
    "2",
    "context",
    "operands",
    "distinctSize",
    "0",
    "1",
    "context",
    "operands",
    "totalSize",
    "context",
    "operands",
    "distinctSize",
  ],
  "operators": Array [
    "*",
    "()",
    "/",
    ".",
    ".",
    "?:",
    "===",
    ".",
    ".",
    "/",
    ".",
    ".",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts BinaryExpression\`
context.operators.totalSize + context.operands.totalSize
\` 1`] = `
Object {
  "operands": Array [
    "context",
    "operators",
    "totalSize",
    "context",
    "operands",
    "totalSize",
  ],
  "operators": Array [
    "+",
    ".",
    ".",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts BinaryExpression\`
difficulty * volume
\` 1`] = `
Object {
  "operands": Array [
    "difficulty",
    "volume",
  ],
  "operators": Array [
    "*",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts BinaryExpression\`
effort / 18
\` 1`] = `
Object {
  "operands": Array [
    "effort",
    "18",
  ],
  "operators": Array [
    "/",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts BinaryExpression\`
length * (Math.log(vocabulary) / Math.log(2))
\` 1`] = `
Object {
  "operands": Array [
    "length",
    "Math",
    "log",
    "vocabulary",
    "Math",
    "log",
    "2",
  ],
  "operators": Array [
    "*",
    "()",
    "/",
    "()",
    ".",
    "()",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts BinaryExpression\`
volume / 3000
\` 1`] = `
Object {
  "operands": Array [
    "volume",
    "3000",
  ],
  "operators": Array [
    "/",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts BlockStatement\`
{
    const context = extractTokens(node)

    const vocabulary =
        context.operators.distinctSize + context.operands.distinctSize
    const length = context.operators.totalSize + context.operands.totalSize
    const volume = length * (Math.log(vocabulary) / Math.log(2))
    const difficulty =
        context.operators.distinctSize / 2 *
        (context.operands.distinctSize === 0
            ? 1
            : context.operands.totalSize / context.operands.distinctSize)
    const effort = difficulty * volume
    const time = effort / 18
    const deliveredBugs = volume / 3000

    return {
        vocabulary,
        length,
        volume,
        difficulty,
        effort,
        time,
        deliveredBugs,
    }
}
\` 1`] = `
Object {
  "operands": Array [
    "context",
    "extractTokens",
    "node",
    "vocabulary",
    "context",
    "operators",
    "distinctSize",
    "context",
    "operands",
    "distinctSize",
    "length",
    "context",
    "operators",
    "totalSize",
    "context",
    "operands",
    "totalSize",
    "volume",
    "length",
    "Math",
    "log",
    "vocabulary",
    "Math",
    "log",
    "2",
    "difficulty",
    "context",
    "operators",
    "distinctSize",
    "2",
    "context",
    "operands",
    "distinctSize",
    "0",
    "1",
    "context",
    "operands",
    "totalSize",
    "context",
    "operands",
    "distinctSize",
    "effort",
    "difficulty",
    "volume",
    "time",
    "effort",
    "18",
    "deliveredBugs",
    "volume",
    "3000",
    "vocabulary",
    "length",
    "volume",
    "difficulty",
    "effort",
    "time",
    "deliveredBugs",
  ],
  "operators": Array [
    "{}",
    "const",
    "=",
    "()",
    "const",
    "=",
    "+",
    ".",
    ".",
    ".",
    ".",
    "const",
    "=",
    "+",
    ".",
    ".",
    ".",
    ".",
    "const",
    "=",
    "*",
    "()",
    "/",
    "()",
    ".",
    "()",
    ".",
    "const",
    "=",
    "*",
    "()",
    "/",
    ".",
    ".",
    "?:",
    "===",
    ".",
    ".",
    "/",
    ".",
    ".",
    ".",
    ".",
    "const",
    "=",
    "*",
    "const",
    "=",
    "/",
    "const",
    "=",
    "/",
    "return",
    "{}",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts CallExpression\`
Math.log(2)
\` 1`] = `
Object {
  "operands": Array [
    "Math",
    "log",
    "2",
  ],
  "operators": Array [
    "()",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts CallExpression\`
Math.log(vocabulary)
\` 1`] = `
Object {
  "operands": Array [
    "Math",
    "log",
    "vocabulary",
  ],
  "operators": Array [
    "()",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts CallExpression\`
extractTokens(node)
\` 1`] = `
Object {
  "operands": Array [
    "extractTokens",
    "node",
  ],
  "operators": Array [
    "()",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts ConditionalExpression\`
context.operands.distinctSize === 0
            ? 1
            : context.operands.totalSize / context.operands.distinctSize
\` 1`] = `
Object {
  "operands": Array [
    "context",
    "operands",
    "distinctSize",
    "0",
    "1",
    "context",
    "operands",
    "totalSize",
    "context",
    "operands",
    "distinctSize",
  ],
  "operators": Array [
    "?:",
    "===",
    ".",
    ".",
    "/",
    ".",
    ".",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts ExportNamedDeclaration\`
export { ExtractTokensResult, TokensCollection } from "./extract-tokens"
\` 1`] = `
Object {
  "operands": Array [
    "ExtractTokensResult",
    "TokensCollection",
    "\\"./extract-tokens\\"",
  ],
  "operators": Array [
    "export",
    "{}",
    ",",
    "from",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts ExportNamedDeclaration\`
export { extractTokens }
\` 1`] = `
Object {
  "operands": Array [
    "extractTokens",
  ],
  "operators": Array [
    "export",
    "{}",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts ExportNamedDeclaration\`
export function analyze(node: ESTree.Node | TSESTree.Node): Result {
    const context = extractTokens(node)

    const vocabulary =
        context.operators.distinctSize + context.operands.distinctSize
    const length = context.operators.totalSize + context.operands.totalSize
    const volume = length * (Math.log(vocabulary) / Math.log(2))
    const difficulty =
        context.operators.distinctSize / 2 *
        (context.operands.distinctSize === 0
            ? 1
            : context.operands.totalSize / context.operands.distinctSize)
    const effort = difficulty * volume
    const time = effort / 18
    const deliveredBugs = volume / 3000

    return {
        vocabulary,
        length,
        volume,
        difficulty,
        effort,
        time,
        deliveredBugs,
    }
}
\` 1`] = `
Object {
  "operands": Array [
    "analyze",
    "node",
    "ESTree",
    "Node",
    "TSESTree",
    "Node",
    "Result",
    "context",
    "extractTokens",
    "node",
    "vocabulary",
    "context",
    "operators",
    "distinctSize",
    "context",
    "operands",
    "distinctSize",
    "length",
    "context",
    "operators",
    "totalSize",
    "context",
    "operands",
    "totalSize",
    "volume",
    "length",
    "Math",
    "log",
    "vocabulary",
    "Math",
    "log",
    "2",
    "difficulty",
    "context",
    "operators",
    "distinctSize",
    "2",
    "context",
    "operands",
    "distinctSize",
    "0",
    "1",
    "context",
    "operands",
    "totalSize",
    "context",
    "operands",
    "distinctSize",
    "effort",
    "difficulty",
    "volume",
    "time",
    "effort",
    "18",
    "deliveredBugs",
    "volume",
    "3000",
    "vocabulary",
    "length",
    "volume",
    "difficulty",
    "effort",
    "time",
    "deliveredBugs",
  ],
  "operators": Array [
    "export",
    "function",
    "()",
    ":",
    "|",
    ".",
    ".",
    ":",
    "{}",
    "const",
    "=",
    "()",
    "const",
    "=",
    "+",
    ".",
    ".",
    ".",
    ".",
    "const",
    "=",
    "+",
    ".",
    ".",
    ".",
    ".",
    "const",
    "=",
    "*",
    "()",
    "/",
    "()",
    ".",
    "()",
    ".",
    "const",
    "=",
    "*",
    "()",
    "/",
    ".",
    ".",
    "?:",
    "===",
    ".",
    ".",
    "/",
    ".",
    ".",
    ".",
    ".",
    "const",
    "=",
    "*",
    "const",
    "=",
    "/",
    "const",
    "=",
    "/",
    "return",
    "{}",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts ExportNamedDeclaration\`
export type Result = {
    vocabulary: number
    length: number
    volume: number
    difficulty: number
    effort: number
    time: number
    deliveredBugs: number
}
\` 1`] = `
Object {
  "operands": Array [
    "Result",
    "number",
    "vocabulary",
    "number",
    "length",
    "number",
    "volume",
    "number",
    "difficulty",
    "number",
    "effort",
    "number",
    "time",
    "number",
    "deliveredBugs",
  ],
  "operators": Array [
    "export",
    "type",
    "=",
    "{}",
    ":",
    ":",
    ":",
    ":",
    ":",
    ":",
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts ExportSpecifier\`
ExtractTokensResult
\` 1`] = `
Object {
  "operands": Array [
    "ExtractTokensResult",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/index.ts ExportSpecifier\`
TokensCollection
\` 1`] = `
Object {
  "operands": Array [
    "TokensCollection",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/index.ts FunctionDeclaration\`
function analyze(node: ESTree.Node | TSESTree.Node): Result {
    const context = extractTokens(node)

    const vocabulary =
        context.operators.distinctSize + context.operands.distinctSize
    const length = context.operators.totalSize + context.operands.totalSize
    const volume = length * (Math.log(vocabulary) / Math.log(2))
    const difficulty =
        context.operators.distinctSize / 2 *
        (context.operands.distinctSize === 0
            ? 1
            : context.operands.totalSize / context.operands.distinctSize)
    const effort = difficulty * volume
    const time = effort / 18
    const deliveredBugs = volume / 3000

    return {
        vocabulary,
        length,
        volume,
        difficulty,
        effort,
        time,
        deliveredBugs,
    }
}
\` 1`] = `
Object {
  "operands": Array [
    "analyze",
    "node",
    "ESTree",
    "Node",
    "TSESTree",
    "Node",
    "Result",
    "context",
    "extractTokens",
    "node",
    "vocabulary",
    "context",
    "operators",
    "distinctSize",
    "context",
    "operands",
    "distinctSize",
    "length",
    "context",
    "operators",
    "totalSize",
    "context",
    "operands",
    "totalSize",
    "volume",
    "length",
    "Math",
    "log",
    "vocabulary",
    "Math",
    "log",
    "2",
    "difficulty",
    "context",
    "operators",
    "distinctSize",
    "2",
    "context",
    "operands",
    "distinctSize",
    "0",
    "1",
    "context",
    "operands",
    "totalSize",
    "context",
    "operands",
    "distinctSize",
    "effort",
    "difficulty",
    "volume",
    "time",
    "effort",
    "18",
    "deliveredBugs",
    "volume",
    "3000",
    "vocabulary",
    "length",
    "volume",
    "difficulty",
    "effort",
    "time",
    "deliveredBugs",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    "|",
    ".",
    ".",
    ":",
    "{}",
    "const",
    "=",
    "()",
    "const",
    "=",
    "+",
    ".",
    ".",
    ".",
    ".",
    "const",
    "=",
    "+",
    ".",
    ".",
    ".",
    ".",
    "const",
    "=",
    "*",
    "()",
    "/",
    "()",
    ".",
    "()",
    ".",
    "const",
    "=",
    "*",
    "()",
    "/",
    ".",
    ".",
    "?:",
    "===",
    ".",
    ".",
    "/",
    ".",
    ".",
    ".",
    ".",
    "const",
    "=",
    "*",
    "const",
    "=",
    "/",
    "const",
    "=",
    "/",
    "return",
    "{}",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts ImportDeclaration\`
import { extractTokens } from "./extract-tokens"
\` 1`] = `
Object {
  "operands": Array [
    "extractTokens",
    "\\"./extract-tokens\\"",
  ],
  "operators": Array [
    "import",
    "{}",
    "from",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts ImportDeclaration\`
import type * as ESTree from "estree"
\` 1`] = `
Object {
  "operands": Array [
    "ESTree",
    "\\"estree\\"",
  ],
  "operators": Array [
    "import",
    "type",
    "from",
    "*",
    "as",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts ImportDeclaration\`
import type { TSESTree } from "@typescript-eslint/types"
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "\\"@typescript-eslint/types\\"",
  ],
  "operators": Array [
    "import",
    "type",
    "{}",
    "from",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts ImportNamespaceSpecifier\`
* as ESTree
\` 1`] = `
Object {
  "operands": Array [
    "ESTree",
  ],
  "operators": Array [
    "*",
    "as",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts ImportSpecifier\`
TSESTree
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/index.ts ImportSpecifier\`
extractTokens
\` 1`] = `
Object {
  "operands": Array [
    "extractTokens",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/index.ts Literal\`
"./extract-tokens"
\` 1`] = `
Object {
  "operands": Array [
    "\\"./extract-tokens\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/index.ts Literal\`
"@typescript-eslint/types"
\` 1`] = `
Object {
  "operands": Array [
    "\\"@typescript-eslint/types\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/index.ts Literal\`
"estree"
\` 1`] = `
Object {
  "operands": Array [
    "\\"estree\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/index.ts Literal\`
0
\` 1`] = `
Object {
  "operands": Array [
    "0",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/index.ts Literal\`
1
\` 1`] = `
Object {
  "operands": Array [
    "1",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/index.ts Literal\`
2
\` 1`] = `
Object {
  "operands": Array [
    "2",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/index.ts Literal\`
18
\` 1`] = `
Object {
  "operands": Array [
    "18",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/index.ts Literal\`
3000
\` 1`] = `
Object {
  "operands": Array [
    "3000",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/index.ts MemberExpression\`
Math.log
\` 1`] = `
Object {
  "operands": Array [
    "Math",
    "log",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts MemberExpression\`
context.operands
\` 1`] = `
Object {
  "operands": Array [
    "context",
    "operands",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts MemberExpression\`
context.operands.distinctSize
\` 1`] = `
Object {
  "operands": Array [
    "context",
    "operands",
    "distinctSize",
  ],
  "operators": Array [
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts MemberExpression\`
context.operands.totalSize
\` 1`] = `
Object {
  "operands": Array [
    "context",
    "operands",
    "totalSize",
  ],
  "operators": Array [
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts MemberExpression\`
context.operators
\` 1`] = `
Object {
  "operands": Array [
    "context",
    "operators",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts MemberExpression\`
context.operators.distinctSize
\` 1`] = `
Object {
  "operands": Array [
    "context",
    "operators",
    "distinctSize",
  ],
  "operators": Array [
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts MemberExpression\`
context.operators.totalSize
\` 1`] = `
Object {
  "operands": Array [
    "context",
    "operators",
    "totalSize",
  ],
  "operators": Array [
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts ObjectExpression\`
{
        vocabulary,
        length,
        volume,
        difficulty,
        effort,
        time,
        deliveredBugs,
    }
\` 1`] = `
Object {
  "operands": Array [
    "vocabulary",
    "length",
    "volume",
    "difficulty",
    "effort",
    "time",
    "deliveredBugs",
  ],
  "operators": Array [
    "{}",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts Program\`
import type * as ESTree from "estree"
import type { TSESTree } from "@typescript-eslint/types"
import { extractTokens } from "./extract-tokens"
export { ExtractTokensResult, TokensCollection } from "./extract-tokens"

export type Result = {
    vocabulary: number
    length: number
    volume: number
    difficulty: number
    effort: number
    time: number
    deliveredBugs: number
}
/**
 * Analyze the AST using Halstead complexity measures.
 */
export function analyze(node: ESTree.Node | TSESTree.Node): Result {
    const context = extractTokens(node)

    const vocabulary =
        context.operators.distinctSize + context.operands.distinctSize
    const length = context.operators.totalSize + context.operands.totalSize
    const volume = length * (Math.log(vocabulary) / Math.log(2))
    const difficulty =
        context.operators.distinctSize / 2 *
        (context.operands.distinctSize === 0
            ? 1
            : context.operands.totalSize / context.operands.distinctSize)
    const effort = difficulty * volume
    const time = effort / 18
    const deliveredBugs = volume / 3000

    return {
        vocabulary,
        length,
        volume,
        difficulty,
        effort,
        time,
        deliveredBugs,
    }
}
export { extractTokens }

\` 1`] = `
Object {
  "operands": Array [
    "ESTree",
    "\\"estree\\"",
    "TSESTree",
    "\\"@typescript-eslint/types\\"",
    "extractTokens",
    "\\"./extract-tokens\\"",
    "ExtractTokensResult",
    "TokensCollection",
    "\\"./extract-tokens\\"",
    "Result",
    "number",
    "vocabulary",
    "number",
    "length",
    "number",
    "volume",
    "number",
    "difficulty",
    "number",
    "effort",
    "number",
    "time",
    "number",
    "deliveredBugs",
    "analyze",
    "node",
    "ESTree",
    "Node",
    "TSESTree",
    "Node",
    "Result",
    "context",
    "extractTokens",
    "node",
    "vocabulary",
    "context",
    "operators",
    "distinctSize",
    "context",
    "operands",
    "distinctSize",
    "length",
    "context",
    "operators",
    "totalSize",
    "context",
    "operands",
    "totalSize",
    "volume",
    "length",
    "Math",
    "log",
    "vocabulary",
    "Math",
    "log",
    "2",
    "difficulty",
    "context",
    "operators",
    "distinctSize",
    "2",
    "context",
    "operands",
    "distinctSize",
    "0",
    "1",
    "context",
    "operands",
    "totalSize",
    "context",
    "operands",
    "distinctSize",
    "effort",
    "difficulty",
    "volume",
    "time",
    "effort",
    "18",
    "deliveredBugs",
    "volume",
    "3000",
    "vocabulary",
    "length",
    "volume",
    "difficulty",
    "effort",
    "time",
    "deliveredBugs",
    "extractTokens",
  ],
  "operators": Array [
    "import",
    "type",
    "from",
    "*",
    "as",
    "import",
    "type",
    "{}",
    "from",
    "import",
    "{}",
    "from",
    "export",
    "{}",
    ",",
    "from",
    "export",
    "type",
    "=",
    "{}",
    ":",
    ":",
    ":",
    ":",
    ":",
    ":",
    ":",
    "export",
    "function",
    "()",
    ":",
    "|",
    ".",
    ".",
    ":",
    "{}",
    "const",
    "=",
    "()",
    "const",
    "=",
    "+",
    ".",
    ".",
    ".",
    ".",
    "const",
    "=",
    "+",
    ".",
    ".",
    ".",
    ".",
    "const",
    "=",
    "*",
    "()",
    "/",
    "()",
    ".",
    "()",
    ".",
    "const",
    "=",
    "*",
    "()",
    "/",
    ".",
    ".",
    "?:",
    "===",
    ".",
    ".",
    "/",
    ".",
    ".",
    ".",
    ".",
    "const",
    "=",
    "*",
    "const",
    "=",
    "/",
    "const",
    "=",
    "/",
    "return",
    "{}",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
    "export",
    "{}",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts Property\`
deliveredBugs
\` 1`] = `
Object {
  "operands": Array [
    "deliveredBugs",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/index.ts Property\`
difficulty
\` 1`] = `
Object {
  "operands": Array [
    "difficulty",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/index.ts Property\`
effort
\` 1`] = `
Object {
  "operands": Array [
    "effort",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/index.ts Property\`
length
\` 1`] = `
Object {
  "operands": Array [
    "length",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/index.ts Property\`
time
\` 1`] = `
Object {
  "operands": Array [
    "time",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/index.ts Property\`
vocabulary
\` 1`] = `
Object {
  "operands": Array [
    "vocabulary",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/index.ts Property\`
volume
\` 1`] = `
Object {
  "operands": Array [
    "volume",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/index.ts ReturnStatement\`
return {
        vocabulary,
        length,
        volume,
        difficulty,
        effort,
        time,
        deliveredBugs,
    }
\` 1`] = `
Object {
  "operands": Array [
    "vocabulary",
    "length",
    "volume",
    "difficulty",
    "effort",
    "time",
    "deliveredBugs",
  ],
  "operators": Array [
    "return",
    "{}",
    ",",
    ",",
    ",",
    ",",
    ",",
    ",",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts TSNumberKeyword\`
number
\` 1`] = `
Object {
  "operands": Array [
    "number",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/index.ts TSPropertySignature\`
deliveredBugs: number
\` 1`] = `
Object {
  "operands": Array [
    "number",
    "deliveredBugs",
  ],
  "operators": Array [
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts TSPropertySignature\`
difficulty: number
\` 1`] = `
Object {
  "operands": Array [
    "number",
    "difficulty",
  ],
  "operators": Array [
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts TSPropertySignature\`
effort: number
\` 1`] = `
Object {
  "operands": Array [
    "number",
    "effort",
  ],
  "operators": Array [
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts TSPropertySignature\`
length: number
\` 1`] = `
Object {
  "operands": Array [
    "number",
    "length",
  ],
  "operators": Array [
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts TSPropertySignature\`
time: number
\` 1`] = `
Object {
  "operands": Array [
    "number",
    "time",
  ],
  "operators": Array [
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts TSPropertySignature\`
vocabulary: number
\` 1`] = `
Object {
  "operands": Array [
    "number",
    "vocabulary",
  ],
  "operators": Array [
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts TSPropertySignature\`
volume: number
\` 1`] = `
Object {
  "operands": Array [
    "number",
    "volume",
  ],
  "operators": Array [
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts TSTypeAliasDeclaration\`
type Result = {
    vocabulary: number
    length: number
    volume: number
    difficulty: number
    effort: number
    time: number
    deliveredBugs: number
}
\` 1`] = `
Object {
  "operands": Array [
    "Result",
    "number",
    "vocabulary",
    "number",
    "length",
    "number",
    "volume",
    "number",
    "difficulty",
    "number",
    "effort",
    "number",
    "time",
    "number",
    "deliveredBugs",
  ],
  "operators": Array [
    "type",
    "=",
    "{}",
    ":",
    ":",
    ":",
    ":",
    ":",
    ":",
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts TSTypeAnnotation\`
: ESTree.Node | TSESTree.Node
\` 1`] = `
Object {
  "operands": Array [
    "ESTree",
    "Node",
    "TSESTree",
    "Node",
  ],
  "operators": Array [
    ":",
    "|",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts TSTypeAnnotation\`
: Result
\` 1`] = `
Object {
  "operands": Array [
    "Result",
  ],
  "operators": Array [
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts TSTypeAnnotation\`
: number
\` 1`] = `
Object {
  "operands": Array [
    "number",
  ],
  "operators": Array [
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts TSTypeLiteral\`
{
    vocabulary: number
    length: number
    volume: number
    difficulty: number
    effort: number
    time: number
    deliveredBugs: number
}
\` 1`] = `
Object {
  "operands": Array [
    "number",
    "vocabulary",
    "number",
    "length",
    "number",
    "volume",
    "number",
    "difficulty",
    "number",
    "effort",
    "number",
    "time",
    "number",
    "deliveredBugs",
  ],
  "operators": Array [
    "{}",
    ":",
    ":",
    ":",
    ":",
    ":",
    ":",
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts TSTypeReference\`
ESTree.Node
\` 1`] = `
Object {
  "operands": Array [
    "ESTree",
    "Node",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts TSTypeReference\`
Result
\` 1`] = `
Object {
  "operands": Array [
    "Result",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/index.ts TSTypeReference\`
TSESTree.Node
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "Node",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts TSUnionType\`
ESTree.Node | TSESTree.Node
\` 1`] = `
Object {
  "operands": Array [
    "ESTree",
    "Node",
    "TSESTree",
    "Node",
  ],
  "operators": Array [
    "|",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts VariableDeclaration\`
const context = extractTokens(node)
\` 1`] = `
Object {
  "operands": Array [
    "context",
    "extractTokens",
    "node",
  ],
  "operators": Array [
    "const",
    "=",
    "()",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts VariableDeclaration\`
const deliveredBugs = volume / 3000
\` 1`] = `
Object {
  "operands": Array [
    "deliveredBugs",
    "volume",
    "3000",
  ],
  "operators": Array [
    "const",
    "=",
    "/",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts VariableDeclaration\`
const difficulty =
        context.operators.distinctSize / 2 *
        (context.operands.distinctSize === 0
            ? 1
            : context.operands.totalSize / context.operands.distinctSize)
\` 1`] = `
Object {
  "operands": Array [
    "difficulty",
    "context",
    "operators",
    "distinctSize",
    "2",
    "context",
    "operands",
    "distinctSize",
    "0",
    "1",
    "context",
    "operands",
    "totalSize",
    "context",
    "operands",
    "distinctSize",
  ],
  "operators": Array [
    "const",
    "=",
    "*",
    "()",
    "/",
    ".",
    ".",
    "?:",
    "===",
    ".",
    ".",
    "/",
    ".",
    ".",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts VariableDeclaration\`
const effort = difficulty * volume
\` 1`] = `
Object {
  "operands": Array [
    "effort",
    "difficulty",
    "volume",
  ],
  "operators": Array [
    "const",
    "=",
    "*",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts VariableDeclaration\`
const length = context.operators.totalSize + context.operands.totalSize
\` 1`] = `
Object {
  "operands": Array [
    "length",
    "context",
    "operators",
    "totalSize",
    "context",
    "operands",
    "totalSize",
  ],
  "operators": Array [
    "const",
    "=",
    "+",
    ".",
    ".",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts VariableDeclaration\`
const time = effort / 18
\` 1`] = `
Object {
  "operands": Array [
    "time",
    "effort",
    "18",
  ],
  "operators": Array [
    "const",
    "=",
    "/",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts VariableDeclaration\`
const vocabulary =
        context.operators.distinctSize + context.operands.distinctSize
\` 1`] = `
Object {
  "operands": Array [
    "vocabulary",
    "context",
    "operators",
    "distinctSize",
    "context",
    "operands",
    "distinctSize",
  ],
  "operators": Array [
    "const",
    "=",
    "+",
    ".",
    ".",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts VariableDeclaration\`
const volume = length * (Math.log(vocabulary) / Math.log(2))
\` 1`] = `
Object {
  "operands": Array [
    "volume",
    "length",
    "Math",
    "log",
    "vocabulary",
    "Math",
    "log",
    "2",
  ],
  "operators": Array [
    "const",
    "=",
    "*",
    "()",
    "/",
    "()",
    ".",
    "()",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts VariableDeclarator\`
context = extractTokens(node)
\` 1`] = `
Object {
  "operands": Array [
    "context",
    "extractTokens",
    "node",
  ],
  "operators": Array [
    "=",
    "()",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts VariableDeclarator\`
deliveredBugs = volume / 3000
\` 1`] = `
Object {
  "operands": Array [
    "deliveredBugs",
    "volume",
    "3000",
  ],
  "operators": Array [
    "=",
    "/",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts VariableDeclarator\`
difficulty =
        context.operators.distinctSize / 2 *
        (context.operands.distinctSize === 0
            ? 1
            : context.operands.totalSize / context.operands.distinctSize)
\` 1`] = `
Object {
  "operands": Array [
    "difficulty",
    "context",
    "operators",
    "distinctSize",
    "2",
    "context",
    "operands",
    "distinctSize",
    "0",
    "1",
    "context",
    "operands",
    "totalSize",
    "context",
    "operands",
    "distinctSize",
  ],
  "operators": Array [
    "=",
    "*",
    "()",
    "/",
    ".",
    ".",
    "?:",
    "===",
    ".",
    ".",
    "/",
    ".",
    ".",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts VariableDeclarator\`
effort = difficulty * volume
\` 1`] = `
Object {
  "operands": Array [
    "effort",
    "difficulty",
    "volume",
  ],
  "operators": Array [
    "=",
    "*",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts VariableDeclarator\`
length = context.operators.totalSize + context.operands.totalSize
\` 1`] = `
Object {
  "operands": Array [
    "length",
    "context",
    "operators",
    "totalSize",
    "context",
    "operands",
    "totalSize",
  ],
  "operators": Array [
    "=",
    "+",
    ".",
    ".",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts VariableDeclarator\`
time = effort / 18
\` 1`] = `
Object {
  "operands": Array [
    "time",
    "effort",
    "18",
  ],
  "operators": Array [
    "=",
    "/",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts VariableDeclarator\`
vocabulary =
        context.operators.distinctSize + context.operands.distinctSize
\` 1`] = `
Object {
  "operands": Array [
    "vocabulary",
    "context",
    "operators",
    "distinctSize",
    "context",
    "operands",
    "distinctSize",
  ],
  "operators": Array [
    "=",
    "+",
    ".",
    ".",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/index.ts VariableDeclarator\`
volume = length * (Math.log(vocabulary) / Math.log(2))
\` 1`] = `
Object {
  "operands": Array [
    "volume",
    "length",
    "Math",
    "log",
    "vocabulary",
    "Math",
    "log",
    "2",
  ],
  "operators": Array [
    "=",
    "*",
    "()",
    "/",
    "()",
    ".",
    "()",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts ExportNamedDeclaration\`
export type Visitor = {
    ArrayExpression?: (
        node: TSESTree.ArrayExpression,
        parent: TSESTree.Node | null,
    ) => void
    ArrayPattern?: (
        node: TSESTree.ArrayPattern,
        parent: TSESTree.Node | null,
    ) => void
    ArrowFunctionExpression?: (
        node: TSESTree.ArrowFunctionExpression,
        parent: TSESTree.Node | null,
    ) => void
    AssignmentExpression?: (
        node: TSESTree.AssignmentExpression,
        parent: TSESTree.Node | null,
    ) => void
    AssignmentPattern?: (
        node: TSESTree.AssignmentPattern,
        parent: TSESTree.Node | null,
    ) => void
    AwaitExpression?: (
        node: TSESTree.AwaitExpression,
        parent: TSESTree.Node | null,
    ) => void
    BinaryExpression?: (
        node: TSESTree.BinaryExpression,
        parent: TSESTree.Node | null,
    ) => void
    BlockStatement?: (
        node: TSESTree.BlockStatement,
        parent: TSESTree.Node | null,
    ) => void
    BreakStatement?: (
        node: TSESTree.BreakStatement,
        parent: TSESTree.Node | null,
    ) => void
    CallExpression?: (
        node: TSESTree.CallExpression,
        parent: TSESTree.Node | null,
    ) => void
    CatchClause?: (
        node: TSESTree.CatchClause,
        parent: TSESTree.Node | null,
    ) => void
    ChainExpression?: (
        node: TSESTree.ChainExpression,
        parent: TSESTree.Node | null,
    ) => void
    ClassBody?: (node: TSESTree.ClassBody, parent: TSESTree.Node | null) => void
    ClassDeclaration?: (
        node: TSESTree.ClassDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    ClassExpression?: (
        node: TSESTree.ClassExpression,
        parent: TSESTree.Node | null,
    ) => void
    ConditionalExpression?: (
        node: TSESTree.ConditionalExpression,
        parent: TSESTree.Node | null,
    ) => void
    ContinueStatement?: (
        node: TSESTree.ContinueStatement,
        parent: TSESTree.Node | null,
    ) => void
    DebuggerStatement?: (
        node: TSESTree.DebuggerStatement,
        parent: TSESTree.Node | null,
    ) => void
    Decorator?: (node: TSESTree.Decorator, parent: TSESTree.Node | null) => void
    DoWhileStatement?: (
        node: TSESTree.DoWhileStatement,
        parent: TSESTree.Node | null,
    ) => void
    EmptyStatement?: (
        node: TSESTree.EmptyStatement,
        parent: TSESTree.Node | null,
    ) => void
    ExportAllDeclaration?: (
        node: TSESTree.ExportAllDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    ExportDefaultDeclaration?: (
        node: TSESTree.ExportDefaultDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    ExportNamedDeclaration?: (
        node: TSESTree.ExportNamedDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    ExportSpecifier?: (
        node: TSESTree.ExportSpecifier,
        parent: TSESTree.Node | null,
    ) => void
    ExpressionStatement?: (
        node: TSESTree.ExpressionStatement,
        parent: TSESTree.Node | null,
    ) => void
    ForInStatement?: (
        node: TSESTree.ForInStatement,
        parent: TSESTree.Node | null,
    ) => void
    ForOfStatement?: (
        node: TSESTree.ForOfStatement,
        parent: TSESTree.Node | null,
    ) => void
    ForStatement?: (
        node: TSESTree.ForStatement,
        parent: TSESTree.Node | null,
    ) => void
    FunctionDeclaration?: (
        node: TSESTree.FunctionDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    FunctionExpression?: (
        node: TSESTree.FunctionExpression,
        parent: TSESTree.Node | null,
    ) => void
    Identifier?: (
        node: TSESTree.Identifier,
        parent: TSESTree.Node | null,
    ) => void
    IfStatement?: (
        node: TSESTree.IfStatement,
        parent: TSESTree.Node | null,
    ) => void
    ImportAttribute?: (
        node: TSESTree.ImportAttribute,
        parent: TSESTree.Node | null,
    ) => void
    ImportDeclaration?: (
        node: TSESTree.ImportDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    ImportDefaultSpecifier?: (
        node: TSESTree.ImportDefaultSpecifier,
        parent: TSESTree.Node | null,
    ) => void
    ImportExpression?: (
        node: TSESTree.ImportExpression,
        parent: TSESTree.Node | null,
    ) => void
    ImportNamespaceSpecifier?: (
        node: TSESTree.ImportNamespaceSpecifier,
        parent: TSESTree.Node | null,
    ) => void
    ImportSpecifier?: (
        node: TSESTree.ImportSpecifier,
        parent: TSESTree.Node | null,
    ) => void
    JSXAttribute?: (
        node: TSESTree.JSXAttribute,
        parent: TSESTree.Node | null,
    ) => void
    JSXClosingElement?: (
        node: TSESTree.JSXClosingElement,
        parent: TSESTree.Node | null,
    ) => void
    JSXClosingFragment?: (
        node: TSESTree.JSXClosingFragment,
        parent: TSESTree.Node | null,
    ) => void
    JSXElement?: (
        node: TSESTree.JSXElement,
        parent: TSESTree.Node | null,
    ) => void
    JSXEmptyExpression?: (
        node: TSESTree.JSXEmptyExpression,
        parent: TSESTree.Node | null,
    ) => void
    JSXExpressionContainer?: (
        node: TSESTree.JSXExpressionContainer,
        parent: TSESTree.Node | null,
    ) => void
    JSXFragment?: (
        node: TSESTree.JSXFragment,
        parent: TSESTree.Node | null,
    ) => void
    JSXIdentifier?: (
        node: TSESTree.JSXIdentifier,
        parent: TSESTree.Node | null,
    ) => void
    JSXMemberExpression?: (
        node: TSESTree.JSXMemberExpression,
        parent: TSESTree.Node | null,
    ) => void
    JSXNamespacedName?: (
        node: TSESTree.JSXNamespacedName,
        parent: TSESTree.Node | null,
    ) => void
    JSXOpeningElement?: (
        node: TSESTree.JSXOpeningElement,
        parent: TSESTree.Node | null,
    ) => void
    JSXOpeningFragment?: (
        node: TSESTree.JSXOpeningFragment,
        parent: TSESTree.Node | null,
    ) => void
    JSXSpreadAttribute?: (
        node: TSESTree.JSXSpreadAttribute,
        parent: TSESTree.Node | null,
    ) => void
    JSXSpreadChild?: (
        node: TSESTree.JSXSpreadChild,
        parent: TSESTree.Node | null,
    ) => void
    JSXText?: (node: TSESTree.JSXText, parent: TSESTree.Node | null) => void
    LabeledStatement?: (
        node: TSESTree.LabeledStatement,
        parent: TSESTree.Node | null,
    ) => void
    Literal?: (node: TSESTree.Literal, parent: TSESTree.Node | null) => void
    LogicalExpression?: (
        node: TSESTree.LogicalExpression,
        parent: TSESTree.Node | null,
    ) => void
    MemberExpression?: (
        node: TSESTree.MemberExpression,
        parent: TSESTree.Node | null,
    ) => void
    MetaProperty?: (
        node: TSESTree.MetaProperty,
        parent: TSESTree.Node | null,
    ) => void
    MethodDefinition?: (
        node: TSESTree.MethodDefinition,
        parent: TSESTree.Node | null,
    ) => void
    NewExpression?: (
        node: TSESTree.NewExpression,
        parent: TSESTree.Node | null,
    ) => void
    ObjectExpression?: (
        node: TSESTree.ObjectExpression,
        parent: TSESTree.Node | null,
    ) => void
    ObjectPattern?: (
        node: TSESTree.ObjectPattern,
        parent: TSESTree.Node | null,
    ) => void
    PrivateIdentifier?: (
        node: TSESTree.PrivateIdentifier,
        parent: TSESTree.Node | null,
    ) => void
    Program?: (node: TSESTree.Program, parent: TSESTree.Node | null) => void
    Property?: (node: TSESTree.Property, parent: TSESTree.Node | null) => void
    PropertyDefinition?: (
        node: TSESTree.PropertyDefinition,
        parent: TSESTree.Node | null,
    ) => void
    RestElement?: (
        node: TSESTree.RestElement,
        parent: TSESTree.Node | null,
    ) => void
    ReturnStatement?: (
        node: TSESTree.ReturnStatement,
        parent: TSESTree.Node | null,
    ) => void
    SequenceExpression?: (
        node: TSESTree.SequenceExpression,
        parent: TSESTree.Node | null,
    ) => void
    SpreadElement?: (
        node: TSESTree.SpreadElement,
        parent: TSESTree.Node | null,
    ) => void
    StaticBlock?: (
        node: TSESTree.StaticBlock,
        parent: TSESTree.Node | null,
    ) => void
    Super?: (node: TSESTree.Super, parent: TSESTree.Node | null) => void
    SwitchCase?: (
        node: TSESTree.SwitchCase,
        parent: TSESTree.Node | null,
    ) => void
    SwitchStatement?: (
        node: TSESTree.SwitchStatement,
        parent: TSESTree.Node | null,
    ) => void
    TaggedTemplateExpression?: (
        node: TSESTree.TaggedTemplateExpression,
        parent: TSESTree.Node | null,
    ) => void
    TemplateElement?: (
        node: TSESTree.TemplateElement,
        parent: TSESTree.Node | null,
    ) => void
    TemplateLiteral?: (
        node: TSESTree.TemplateLiteral,
        parent: TSESTree.Node | null,
    ) => void
    ThisExpression?: (
        node: TSESTree.ThisExpression,
        parent: TSESTree.Node | null,
    ) => void
    ThrowStatement?: (
        node: TSESTree.ThrowStatement,
        parent: TSESTree.Node | null,
    ) => void
    TryStatement?: (
        node: TSESTree.TryStatement,
        parent: TSESTree.Node | null,
    ) => void
    UnaryExpression?: (
        node: TSESTree.UnaryExpression,
        parent: TSESTree.Node | null,
    ) => void
    UpdateExpression?: (
        node: TSESTree.UpdateExpression,
        parent: TSESTree.Node | null,
    ) => void
    VariableDeclaration?: (
        node: TSESTree.VariableDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    VariableDeclarator?: (
        node: TSESTree.VariableDeclarator,
        parent: TSESTree.Node | null,
    ) => void
    WhileStatement?: (
        node: TSESTree.WhileStatement,
        parent: TSESTree.Node | null,
    ) => void
    WithStatement?: (
        node: TSESTree.WithStatement,
        parent: TSESTree.Node | null,
    ) => void
    YieldExpression?: (
        node: TSESTree.YieldExpression,
        parent: TSESTree.Node | null,
    ) => void
    TSAbstractKeyword?: (
        node: TSESTree.TSAbstractKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSAbstractMethodDefinition?: (
        node: TSESTree.TSAbstractMethodDefinition,
        parent: TSESTree.Node | null,
    ) => void
    TSAbstractPropertyDefinition?: (
        node: TSESTree.TSAbstractPropertyDefinition,
        parent: TSESTree.Node | null,
    ) => void
    TSAnyKeyword?: (
        node: TSESTree.TSAnyKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSArrayType?: (
        node: TSESTree.TSArrayType,
        parent: TSESTree.Node | null,
    ) => void
    TSAsExpression?: (
        node: TSESTree.TSAsExpression,
        parent: TSESTree.Node | null,
    ) => void
    TSAsyncKeyword?: (
        node: TSESTree.TSAsyncKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSBigIntKeyword?: (
        node: TSESTree.TSBigIntKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSBooleanKeyword?: (
        node: TSESTree.TSBooleanKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSCallSignatureDeclaration?: (
        node: TSESTree.TSCallSignatureDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    TSClassImplements?: (
        node: TSESTree.TSClassImplements,
        parent: TSESTree.Node | null,
    ) => void
    TSConditionalType?: (
        node: TSESTree.TSConditionalType,
        parent: TSESTree.Node | null,
    ) => void
    TSConstructorType?: (
        node: TSESTree.TSConstructorType,
        parent: TSESTree.Node | null,
    ) => void
    TSConstructSignatureDeclaration?: (
        node: TSESTree.TSConstructSignatureDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    TSDeclareFunction?: (
        node: TSESTree.TSDeclareFunction,
        parent: TSESTree.Node | null,
    ) => void
    TSDeclareKeyword?: (
        node: TSESTree.TSDeclareKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSEmptyBodyFunctionExpression?: (
        node: TSESTree.TSEmptyBodyFunctionExpression,
        parent: TSESTree.Node | null,
    ) => void
    TSEnumDeclaration?: (
        node: TSESTree.TSEnumDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    TSEnumMember?: (
        node: TSESTree.TSEnumMember,
        parent: TSESTree.Node | null,
    ) => void
    TSExportAssignment?: (
        node: TSESTree.TSExportAssignment,
        parent: TSESTree.Node | null,
    ) => void
    TSExportKeyword?: (
        node: TSESTree.TSExportKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSExternalModuleReference?: (
        node: TSESTree.TSExternalModuleReference,
        parent: TSESTree.Node | null,
    ) => void
    TSFunctionType?: (
        node: TSESTree.TSFunctionType,
        parent: TSESTree.Node | null,
    ) => void
    TSImportEqualsDeclaration?: (
        node: TSESTree.TSImportEqualsDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    TSImportType?: (
        node: TSESTree.TSImportType,
        parent: TSESTree.Node | null,
    ) => void
    TSIndexedAccessType?: (
        node: TSESTree.TSIndexedAccessType,
        parent: TSESTree.Node | null,
    ) => void
    TSIndexSignature?: (
        node: TSESTree.TSIndexSignature,
        parent: TSESTree.Node | null,
    ) => void
    TSInferType?: (
        node: TSESTree.TSInferType,
        parent: TSESTree.Node | null,
    ) => void
    TSInterfaceBody?: (
        node: TSESTree.TSInterfaceBody,
        parent: TSESTree.Node | null,
    ) => void
    TSInterfaceDeclaration?: (
        node: TSESTree.TSInterfaceDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    TSInterfaceHeritage?: (
        node: TSESTree.TSInterfaceHeritage,
        parent: TSESTree.Node | null,
    ) => void
    TSIntersectionType?: (
        node: TSESTree.TSIntersectionType,
        parent: TSESTree.Node | null,
    ) => void
    TSIntrinsicKeyword?: (
        node: TSESTree.Node & { type: AST_NODE_TYPES.TSIntrinsicKeyword },
        parent: TSESTree.Node | null,
    ) => void
    TSLiteralType?: (
        node: TSESTree.TSLiteralType,
        parent: TSESTree.Node | null,
    ) => void
    TSMappedType?: (
        node: TSESTree.TSMappedType,
        parent: TSESTree.Node | null,
    ) => void
    TSMethodSignature?: (
        node: TSESTree.TSMethodSignature,
        parent: TSESTree.Node | null,
    ) => void
    TSModuleBlock?: (
        node: TSESTree.TSModuleBlock,
        parent: TSESTree.Node | null,
    ) => void
    TSModuleDeclaration?: (
        node: TSESTree.TSModuleDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    TSNamedTupleMember?: (
        node: TSESTree.TSNamedTupleMember,
        parent: TSESTree.Node | null,
    ) => void
    TSNamespaceExportDeclaration?: (
        node: TSESTree.TSNamespaceExportDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    TSNeverKeyword?: (
        node: TSESTree.TSNeverKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSNonNullExpression?: (
        node: TSESTree.TSNonNullExpression,
        parent: TSESTree.Node | null,
    ) => void
    TSNullKeyword?: (
        node: TSESTree.TSNullKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSNumberKeyword?: (
        node: TSESTree.TSNumberKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSObjectKeyword?: (
        node: TSESTree.TSObjectKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSOptionalType?: (
        node: TSESTree.TSOptionalType,
        parent: TSESTree.Node | null,
    ) => void
    TSParameterProperty?: (
        node: TSESTree.TSParameterProperty,
        parent: TSESTree.Node | null,
    ) => void
    TSPrivateKeyword?: (
        node: TSESTree.TSPrivateKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSPropertySignature?: (
        node: TSESTree.TSPropertySignature,
        parent: TSESTree.Node | null,
    ) => void
    TSProtectedKeyword?: (
        node: TSESTree.TSProtectedKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSPublicKeyword?: (
        node: TSESTree.TSPublicKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSQualifiedName?: (
        node: TSESTree.TSQualifiedName,
        parent: TSESTree.Node | null,
    ) => void
    TSReadonlyKeyword?: (
        node: TSESTree.TSReadonlyKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSRestType?: (
        node: TSESTree.TSRestType,
        parent: TSESTree.Node | null,
    ) => void
    TSStaticKeyword?: (
        node: TSESTree.TSStaticKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSStringKeyword?: (
        node: TSESTree.TSStringKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSSymbolKeyword?: (
        node: TSESTree.TSSymbolKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSTemplateLiteralType?: (
        node: TSESTree.TSTemplateLiteralType,
        parent: TSESTree.Node | null,
    ) => void
    TSThisType?: (
        node: TSESTree.TSThisType,
        parent: TSESTree.Node | null,
    ) => void
    TSTupleType?: (
        node: TSESTree.TSTupleType,
        parent: TSESTree.Node | null,
    ) => void
    TSTypeAliasDeclaration?: (
        node: TSESTree.TSTypeAliasDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    TSTypeAnnotation?: (
        node: TSESTree.TSTypeAnnotation,
        parent: TSESTree.Node | null,
    ) => void
    TSTypeAssertion?: (
        node: TSESTree.TSTypeAssertion,
        parent: TSESTree.Node | null,
    ) => void
    TSTypeLiteral?: (
        node: TSESTree.TSTypeLiteral,
        parent: TSESTree.Node | null,
    ) => void
    TSTypeOperator?: (
        node: TSESTree.TSTypeOperator,
        parent: TSESTree.Node | null,
    ) => void
    TSTypeParameter?: (
        node: TSESTree.TSTypeParameter,
        parent: TSESTree.Node | null,
    ) => void
    TSTypeParameterDeclaration?: (
        node: TSESTree.TSTypeParameterDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    TSTypeParameterInstantiation?: (
        node: TSESTree.TSTypeParameterInstantiation,
        parent: TSESTree.Node | null,
    ) => void
    TSTypePredicate?: (
        node: TSESTree.TSTypePredicate,
        parent: TSESTree.Node | null,
    ) => void
    TSTypeQuery?: (
        node: TSESTree.TSTypeQuery,
        parent: TSESTree.Node | null,
    ) => void
    TSTypeReference?: (
        node: TSESTree.TSTypeReference,
        parent: TSESTree.Node | null,
    ) => void
    TSUndefinedKeyword?: (
        node: TSESTree.TSUndefinedKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSUnionType?: (
        node: TSESTree.TSUnionType,
        parent: TSESTree.Node | null,
    ) => void
    TSUnknownKeyword?: (
        node: TSESTree.TSUnknownKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSVoidKeyword?: (
        node: TSESTree.TSVoidKeyword,
        parent: TSESTree.Node | null,
    ) => void
}
\` 1`] = `
Object {
  "operands": Array [
    "Visitor",
    "node",
    "TSESTree",
    "ArrayExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ArrayExpression",
    "node",
    "TSESTree",
    "ArrayPattern",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ArrayPattern",
    "node",
    "TSESTree",
    "ArrowFunctionExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ArrowFunctionExpression",
    "node",
    "TSESTree",
    "AssignmentExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "AssignmentExpression",
    "node",
    "TSESTree",
    "AssignmentPattern",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "AssignmentPattern",
    "node",
    "TSESTree",
    "AwaitExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "AwaitExpression",
    "node",
    "TSESTree",
    "BinaryExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "BinaryExpression",
    "node",
    "TSESTree",
    "BlockStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "BlockStatement",
    "node",
    "TSESTree",
    "BreakStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "BreakStatement",
    "node",
    "TSESTree",
    "CallExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "CallExpression",
    "node",
    "TSESTree",
    "CatchClause",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "CatchClause",
    "node",
    "TSESTree",
    "ChainExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ChainExpression",
    "node",
    "TSESTree",
    "ClassBody",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ClassBody",
    "node",
    "TSESTree",
    "ClassDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ClassDeclaration",
    "node",
    "TSESTree",
    "ClassExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ClassExpression",
    "node",
    "TSESTree",
    "ConditionalExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ConditionalExpression",
    "node",
    "TSESTree",
    "ContinueStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ContinueStatement",
    "node",
    "TSESTree",
    "DebuggerStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "DebuggerStatement",
    "node",
    "TSESTree",
    "Decorator",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "Decorator",
    "node",
    "TSESTree",
    "DoWhileStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "DoWhileStatement",
    "node",
    "TSESTree",
    "EmptyStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "EmptyStatement",
    "node",
    "TSESTree",
    "ExportAllDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ExportAllDeclaration",
    "node",
    "TSESTree",
    "ExportDefaultDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ExportDefaultDeclaration",
    "node",
    "TSESTree",
    "ExportNamedDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ExportNamedDeclaration",
    "node",
    "TSESTree",
    "ExportSpecifier",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ExportSpecifier",
    "node",
    "TSESTree",
    "ExpressionStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ExpressionStatement",
    "node",
    "TSESTree",
    "ForInStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ForInStatement",
    "node",
    "TSESTree",
    "ForOfStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ForOfStatement",
    "node",
    "TSESTree",
    "ForStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ForStatement",
    "node",
    "TSESTree",
    "FunctionDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "FunctionDeclaration",
    "node",
    "TSESTree",
    "FunctionExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "FunctionExpression",
    "node",
    "TSESTree",
    "Identifier",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "Identifier",
    "node",
    "TSESTree",
    "IfStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "IfStatement",
    "node",
    "TSESTree",
    "ImportAttribute",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ImportAttribute",
    "node",
    "TSESTree",
    "ImportDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ImportDeclaration",
    "node",
    "TSESTree",
    "ImportDefaultSpecifier",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ImportDefaultSpecifier",
    "node",
    "TSESTree",
    "ImportExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ImportExpression",
    "node",
    "TSESTree",
    "ImportNamespaceSpecifier",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ImportNamespaceSpecifier",
    "node",
    "TSESTree",
    "ImportSpecifier",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ImportSpecifier",
    "node",
    "TSESTree",
    "JSXAttribute",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXAttribute",
    "node",
    "TSESTree",
    "JSXClosingElement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXClosingElement",
    "node",
    "TSESTree",
    "JSXClosingFragment",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXClosingFragment",
    "node",
    "TSESTree",
    "JSXElement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXElement",
    "node",
    "TSESTree",
    "JSXEmptyExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXEmptyExpression",
    "node",
    "TSESTree",
    "JSXExpressionContainer",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXExpressionContainer",
    "node",
    "TSESTree",
    "JSXFragment",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXFragment",
    "node",
    "TSESTree",
    "JSXIdentifier",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXIdentifier",
    "node",
    "TSESTree",
    "JSXMemberExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXMemberExpression",
    "node",
    "TSESTree",
    "JSXNamespacedName",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXNamespacedName",
    "node",
    "TSESTree",
    "JSXOpeningElement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXOpeningElement",
    "node",
    "TSESTree",
    "JSXOpeningFragment",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXOpeningFragment",
    "node",
    "TSESTree",
    "JSXSpreadAttribute",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXSpreadAttribute",
    "node",
    "TSESTree",
    "JSXSpreadChild",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXSpreadChild",
    "node",
    "TSESTree",
    "JSXText",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXText",
    "node",
    "TSESTree",
    "LabeledStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "LabeledStatement",
    "node",
    "TSESTree",
    "Literal",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "Literal",
    "node",
    "TSESTree",
    "LogicalExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "LogicalExpression",
    "node",
    "TSESTree",
    "MemberExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "MemberExpression",
    "node",
    "TSESTree",
    "MetaProperty",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "MetaProperty",
    "node",
    "TSESTree",
    "MethodDefinition",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "MethodDefinition",
    "node",
    "TSESTree",
    "NewExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "NewExpression",
    "node",
    "TSESTree",
    "ObjectExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ObjectExpression",
    "node",
    "TSESTree",
    "ObjectPattern",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ObjectPattern",
    "node",
    "TSESTree",
    "PrivateIdentifier",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "PrivateIdentifier",
    "node",
    "TSESTree",
    "Program",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "Program",
    "node",
    "TSESTree",
    "Property",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "Property",
    "node",
    "TSESTree",
    "PropertyDefinition",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "PropertyDefinition",
    "node",
    "TSESTree",
    "RestElement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "RestElement",
    "node",
    "TSESTree",
    "ReturnStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ReturnStatement",
    "node",
    "TSESTree",
    "SequenceExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "SequenceExpression",
    "node",
    "TSESTree",
    "SpreadElement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "SpreadElement",
    "node",
    "TSESTree",
    "StaticBlock",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "StaticBlock",
    "node",
    "TSESTree",
    "Super",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "Super",
    "node",
    "TSESTree",
    "SwitchCase",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "SwitchCase",
    "node",
    "TSESTree",
    "SwitchStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "SwitchStatement",
    "node",
    "TSESTree",
    "TaggedTemplateExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TaggedTemplateExpression",
    "node",
    "TSESTree",
    "TemplateElement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TemplateElement",
    "node",
    "TSESTree",
    "TemplateLiteral",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TemplateLiteral",
    "node",
    "TSESTree",
    "ThisExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ThisExpression",
    "node",
    "TSESTree",
    "ThrowStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ThrowStatement",
    "node",
    "TSESTree",
    "TryStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TryStatement",
    "node",
    "TSESTree",
    "UnaryExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "UnaryExpression",
    "node",
    "TSESTree",
    "UpdateExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "UpdateExpression",
    "node",
    "TSESTree",
    "VariableDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "VariableDeclaration",
    "node",
    "TSESTree",
    "VariableDeclarator",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "VariableDeclarator",
    "node",
    "TSESTree",
    "WhileStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "WhileStatement",
    "node",
    "TSESTree",
    "WithStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "WithStatement",
    "node",
    "TSESTree",
    "YieldExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "YieldExpression",
    "node",
    "TSESTree",
    "TSAbstractKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSAbstractKeyword",
    "node",
    "TSESTree",
    "TSAbstractMethodDefinition",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSAbstractMethodDefinition",
    "node",
    "TSESTree",
    "TSAbstractPropertyDefinition",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSAbstractPropertyDefinition",
    "node",
    "TSESTree",
    "TSAnyKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSAnyKeyword",
    "node",
    "TSESTree",
    "TSArrayType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSArrayType",
    "node",
    "TSESTree",
    "TSAsExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSAsExpression",
    "node",
    "TSESTree",
    "TSAsyncKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSAsyncKeyword",
    "node",
    "TSESTree",
    "TSBigIntKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSBigIntKeyword",
    "node",
    "TSESTree",
    "TSBooleanKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSBooleanKeyword",
    "node",
    "TSESTree",
    "TSCallSignatureDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSCallSignatureDeclaration",
    "node",
    "TSESTree",
    "TSClassImplements",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSClassImplements",
    "node",
    "TSESTree",
    "TSConditionalType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSConditionalType",
    "node",
    "TSESTree",
    "TSConstructorType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSConstructorType",
    "node",
    "TSESTree",
    "TSConstructSignatureDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSConstructSignatureDeclaration",
    "node",
    "TSESTree",
    "TSDeclareFunction",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSDeclareFunction",
    "node",
    "TSESTree",
    "TSDeclareKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSDeclareKeyword",
    "node",
    "TSESTree",
    "TSEmptyBodyFunctionExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSEmptyBodyFunctionExpression",
    "node",
    "TSESTree",
    "TSEnumDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSEnumDeclaration",
    "node",
    "TSESTree",
    "TSEnumMember",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSEnumMember",
    "node",
    "TSESTree",
    "TSExportAssignment",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSExportAssignment",
    "node",
    "TSESTree",
    "TSExportKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSExportKeyword",
    "node",
    "TSESTree",
    "TSExternalModuleReference",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSExternalModuleReference",
    "node",
    "TSESTree",
    "TSFunctionType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSFunctionType",
    "node",
    "TSESTree",
    "TSImportEqualsDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSImportEqualsDeclaration",
    "node",
    "TSESTree",
    "TSImportType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSImportType",
    "node",
    "TSESTree",
    "TSIndexedAccessType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSIndexedAccessType",
    "node",
    "TSESTree",
    "TSIndexSignature",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSIndexSignature",
    "node",
    "TSESTree",
    "TSInferType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSInferType",
    "node",
    "TSESTree",
    "TSInterfaceBody",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSInterfaceBody",
    "node",
    "TSESTree",
    "TSInterfaceDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSInterfaceDeclaration",
    "node",
    "TSESTree",
    "TSInterfaceHeritage",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSInterfaceHeritage",
    "node",
    "TSESTree",
    "TSIntersectionType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSIntersectionType",
    "node",
    "TSESTree",
    "Node",
    "AST_NODE_TYPES",
    "TSIntrinsicKeyword",
    "type",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSIntrinsicKeyword",
    "node",
    "TSESTree",
    "TSLiteralType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSLiteralType",
    "node",
    "TSESTree",
    "TSMappedType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSMappedType",
    "node",
    "TSESTree",
    "TSMethodSignature",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSMethodSignature",
    "node",
    "TSESTree",
    "TSModuleBlock",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSModuleBlock",
    "node",
    "TSESTree",
    "TSModuleDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSModuleDeclaration",
    "node",
    "TSESTree",
    "TSNamedTupleMember",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSNamedTupleMember",
    "node",
    "TSESTree",
    "TSNamespaceExportDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSNamespaceExportDeclaration",
    "node",
    "TSESTree",
    "TSNeverKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSNeverKeyword",
    "node",
    "TSESTree",
    "TSNonNullExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSNonNullExpression",
    "node",
    "TSESTree",
    "TSNullKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSNullKeyword",
    "node",
    "TSESTree",
    "TSNumberKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSNumberKeyword",
    "node",
    "TSESTree",
    "TSObjectKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSObjectKeyword",
    "node",
    "TSESTree",
    "TSOptionalType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSOptionalType",
    "node",
    "TSESTree",
    "TSParameterProperty",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSParameterProperty",
    "node",
    "TSESTree",
    "TSPrivateKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSPrivateKeyword",
    "node",
    "TSESTree",
    "TSPropertySignature",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSPropertySignature",
    "node",
    "TSESTree",
    "TSProtectedKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSProtectedKeyword",
    "node",
    "TSESTree",
    "TSPublicKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSPublicKeyword",
    "node",
    "TSESTree",
    "TSQualifiedName",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSQualifiedName",
    "node",
    "TSESTree",
    "TSReadonlyKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSReadonlyKeyword",
    "node",
    "TSESTree",
    "TSRestType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSRestType",
    "node",
    "TSESTree",
    "TSStaticKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSStaticKeyword",
    "node",
    "TSESTree",
    "TSStringKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSStringKeyword",
    "node",
    "TSESTree",
    "TSSymbolKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSSymbolKeyword",
    "node",
    "TSESTree",
    "TSTemplateLiteralType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTemplateLiteralType",
    "node",
    "TSESTree",
    "TSThisType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSThisType",
    "node",
    "TSESTree",
    "TSTupleType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTupleType",
    "node",
    "TSESTree",
    "TSTypeAliasDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTypeAliasDeclaration",
    "node",
    "TSESTree",
    "TSTypeAnnotation",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTypeAnnotation",
    "node",
    "TSESTree",
    "TSTypeAssertion",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTypeAssertion",
    "node",
    "TSESTree",
    "TSTypeLiteral",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTypeLiteral",
    "node",
    "TSESTree",
    "TSTypeOperator",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTypeOperator",
    "node",
    "TSESTree",
    "TSTypeParameter",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTypeParameter",
    "node",
    "TSESTree",
    "TSTypeParameterDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTypeParameterDeclaration",
    "node",
    "TSESTree",
    "TSTypeParameterInstantiation",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTypeParameterInstantiation",
    "node",
    "TSESTree",
    "TSTypePredicate",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTypePredicate",
    "node",
    "TSESTree",
    "TSTypeQuery",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTypeQuery",
    "node",
    "TSESTree",
    "TSTypeReference",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTypeReference",
    "node",
    "TSESTree",
    "TSUndefinedKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSUndefinedKeyword",
    "node",
    "TSESTree",
    "TSUnionType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSUnionType",
    "node",
    "TSESTree",
    "TSUnknownKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSUnknownKeyword",
    "node",
    "TSESTree",
    "TSVoidKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSVoidKeyword",
  ],
  "operators": Array [
    "export",
    "type",
    "=",
    "{}",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    "&",
    ".",
    "{}",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts ImportDeclaration\`
import type { TSESTree, AST_NODE_TYPES } from "@typescript-eslint/types"
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "AST_NODE_TYPES",
    "\\"@typescript-eslint/types\\"",
  ],
  "operators": Array [
    "import",
    "type",
    "{}",
    ",",
    "from",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts ImportSpecifier\`
AST_NODE_TYPES
\` 1`] = `
Object {
  "operands": Array [
    "AST_NODE_TYPES",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts ImportSpecifier\`
TSESTree
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts Literal\`
"@typescript-eslint/types"
\` 1`] = `
Object {
  "operands": Array [
    "\\"@typescript-eslint/types\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts Program\`
import type { TSESTree, AST_NODE_TYPES } from "@typescript-eslint/types"
export type Visitor = {
    ArrayExpression?: (
        node: TSESTree.ArrayExpression,
        parent: TSESTree.Node | null,
    ) => void
    ArrayPattern?: (
        node: TSESTree.ArrayPattern,
        parent: TSESTree.Node | null,
    ) => void
    ArrowFunctionExpression?: (
        node: TSESTree.ArrowFunctionExpression,
        parent: TSESTree.Node | null,
    ) => void
    AssignmentExpression?: (
        node: TSESTree.AssignmentExpression,
        parent: TSESTree.Node | null,
    ) => void
    AssignmentPattern?: (
        node: TSESTree.AssignmentPattern,
        parent: TSESTree.Node | null,
    ) => void
    AwaitExpression?: (
        node: TSESTree.AwaitExpression,
        parent: TSESTree.Node | null,
    ) => void
    BinaryExpression?: (
        node: TSESTree.BinaryExpression,
        parent: TSESTree.Node | null,
    ) => void
    BlockStatement?: (
        node: TSESTree.BlockStatement,
        parent: TSESTree.Node | null,
    ) => void
    BreakStatement?: (
        node: TSESTree.BreakStatement,
        parent: TSESTree.Node | null,
    ) => void
    CallExpression?: (
        node: TSESTree.CallExpression,
        parent: TSESTree.Node | null,
    ) => void
    CatchClause?: (
        node: TSESTree.CatchClause,
        parent: TSESTree.Node | null,
    ) => void
    ChainExpression?: (
        node: TSESTree.ChainExpression,
        parent: TSESTree.Node | null,
    ) => void
    ClassBody?: (node: TSESTree.ClassBody, parent: TSESTree.Node | null) => void
    ClassDeclaration?: (
        node: TSESTree.ClassDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    ClassExpression?: (
        node: TSESTree.ClassExpression,
        parent: TSESTree.Node | null,
    ) => void
    ConditionalExpression?: (
        node: TSESTree.ConditionalExpression,
        parent: TSESTree.Node | null,
    ) => void
    ContinueStatement?: (
        node: TSESTree.ContinueStatement,
        parent: TSESTree.Node | null,
    ) => void
    DebuggerStatement?: (
        node: TSESTree.DebuggerStatement,
        parent: TSESTree.Node | null,
    ) => void
    Decorator?: (node: TSESTree.Decorator, parent: TSESTree.Node | null) => void
    DoWhileStatement?: (
        node: TSESTree.DoWhileStatement,
        parent: TSESTree.Node | null,
    ) => void
    EmptyStatement?: (
        node: TSESTree.EmptyStatement,
        parent: TSESTree.Node | null,
    ) => void
    ExportAllDeclaration?: (
        node: TSESTree.ExportAllDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    ExportDefaultDeclaration?: (
        node: TSESTree.ExportDefaultDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    ExportNamedDeclaration?: (
        node: TSESTree.ExportNamedDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    ExportSpecifier?: (
        node: TSESTree.ExportSpecifier,
        parent: TSESTree.Node | null,
    ) => void
    ExpressionStatement?: (
        node: TSESTree.ExpressionStatement,
        parent: TSESTree.Node | null,
    ) => void
    ForInStatement?: (
        node: TSESTree.ForInStatement,
        parent: TSESTree.Node | null,
    ) => void
    ForOfStatement?: (
        node: TSESTree.ForOfStatement,
        parent: TSESTree.Node | null,
    ) => void
    ForStatement?: (
        node: TSESTree.ForStatement,
        parent: TSESTree.Node | null,
    ) => void
    FunctionDeclaration?: (
        node: TSESTree.FunctionDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    FunctionExpression?: (
        node: TSESTree.FunctionExpression,
        parent: TSESTree.Node | null,
    ) => void
    Identifier?: (
        node: TSESTree.Identifier,
        parent: TSESTree.Node | null,
    ) => void
    IfStatement?: (
        node: TSESTree.IfStatement,
        parent: TSESTree.Node | null,
    ) => void
    ImportAttribute?: (
        node: TSESTree.ImportAttribute,
        parent: TSESTree.Node | null,
    ) => void
    ImportDeclaration?: (
        node: TSESTree.ImportDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    ImportDefaultSpecifier?: (
        node: TSESTree.ImportDefaultSpecifier,
        parent: TSESTree.Node | null,
    ) => void
    ImportExpression?: (
        node: TSESTree.ImportExpression,
        parent: TSESTree.Node | null,
    ) => void
    ImportNamespaceSpecifier?: (
        node: TSESTree.ImportNamespaceSpecifier,
        parent: TSESTree.Node | null,
    ) => void
    ImportSpecifier?: (
        node: TSESTree.ImportSpecifier,
        parent: TSESTree.Node | null,
    ) => void
    JSXAttribute?: (
        node: TSESTree.JSXAttribute,
        parent: TSESTree.Node | null,
    ) => void
    JSXClosingElement?: (
        node: TSESTree.JSXClosingElement,
        parent: TSESTree.Node | null,
    ) => void
    JSXClosingFragment?: (
        node: TSESTree.JSXClosingFragment,
        parent: TSESTree.Node | null,
    ) => void
    JSXElement?: (
        node: TSESTree.JSXElement,
        parent: TSESTree.Node | null,
    ) => void
    JSXEmptyExpression?: (
        node: TSESTree.JSXEmptyExpression,
        parent: TSESTree.Node | null,
    ) => void
    JSXExpressionContainer?: (
        node: TSESTree.JSXExpressionContainer,
        parent: TSESTree.Node | null,
    ) => void
    JSXFragment?: (
        node: TSESTree.JSXFragment,
        parent: TSESTree.Node | null,
    ) => void
    JSXIdentifier?: (
        node: TSESTree.JSXIdentifier,
        parent: TSESTree.Node | null,
    ) => void
    JSXMemberExpression?: (
        node: TSESTree.JSXMemberExpression,
        parent: TSESTree.Node | null,
    ) => void
    JSXNamespacedName?: (
        node: TSESTree.JSXNamespacedName,
        parent: TSESTree.Node | null,
    ) => void
    JSXOpeningElement?: (
        node: TSESTree.JSXOpeningElement,
        parent: TSESTree.Node | null,
    ) => void
    JSXOpeningFragment?: (
        node: TSESTree.JSXOpeningFragment,
        parent: TSESTree.Node | null,
    ) => void
    JSXSpreadAttribute?: (
        node: TSESTree.JSXSpreadAttribute,
        parent: TSESTree.Node | null,
    ) => void
    JSXSpreadChild?: (
        node: TSESTree.JSXSpreadChild,
        parent: TSESTree.Node | null,
    ) => void
    JSXText?: (node: TSESTree.JSXText, parent: TSESTree.Node | null) => void
    LabeledStatement?: (
        node: TSESTree.LabeledStatement,
        parent: TSESTree.Node | null,
    ) => void
    Literal?: (node: TSESTree.Literal, parent: TSESTree.Node | null) => void
    LogicalExpression?: (
        node: TSESTree.LogicalExpression,
        parent: TSESTree.Node | null,
    ) => void
    MemberExpression?: (
        node: TSESTree.MemberExpression,
        parent: TSESTree.Node | null,
    ) => void
    MetaProperty?: (
        node: TSESTree.MetaProperty,
        parent: TSESTree.Node | null,
    ) => void
    MethodDefinition?: (
        node: TSESTree.MethodDefinition,
        parent: TSESTree.Node | null,
    ) => void
    NewExpression?: (
        node: TSESTree.NewExpression,
        parent: TSESTree.Node | null,
    ) => void
    ObjectExpression?: (
        node: TSESTree.ObjectExpression,
        parent: TSESTree.Node | null,
    ) => void
    ObjectPattern?: (
        node: TSESTree.ObjectPattern,
        parent: TSESTree.Node | null,
    ) => void
    PrivateIdentifier?: (
        node: TSESTree.PrivateIdentifier,
        parent: TSESTree.Node | null,
    ) => void
    Program?: (node: TSESTree.Program, parent: TSESTree.Node | null) => void
    Property?: (node: TSESTree.Property, parent: TSESTree.Node | null) => void
    PropertyDefinition?: (
        node: TSESTree.PropertyDefinition,
        parent: TSESTree.Node | null,
    ) => void
    RestElement?: (
        node: TSESTree.RestElement,
        parent: TSESTree.Node | null,
    ) => void
    ReturnStatement?: (
        node: TSESTree.ReturnStatement,
        parent: TSESTree.Node | null,
    ) => void
    SequenceExpression?: (
        node: TSESTree.SequenceExpression,
        parent: TSESTree.Node | null,
    ) => void
    SpreadElement?: (
        node: TSESTree.SpreadElement,
        parent: TSESTree.Node | null,
    ) => void
    StaticBlock?: (
        node: TSESTree.StaticBlock,
        parent: TSESTree.Node | null,
    ) => void
    Super?: (node: TSESTree.Super, parent: TSESTree.Node | null) => void
    SwitchCase?: (
        node: TSESTree.SwitchCase,
        parent: TSESTree.Node | null,
    ) => void
    SwitchStatement?: (
        node: TSESTree.SwitchStatement,
        parent: TSESTree.Node | null,
    ) => void
    TaggedTemplateExpression?: (
        node: TSESTree.TaggedTemplateExpression,
        parent: TSESTree.Node | null,
    ) => void
    TemplateElement?: (
        node: TSESTree.TemplateElement,
        parent: TSESTree.Node | null,
    ) => void
    TemplateLiteral?: (
        node: TSESTree.TemplateLiteral,
        parent: TSESTree.Node | null,
    ) => void
    ThisExpression?: (
        node: TSESTree.ThisExpression,
        parent: TSESTree.Node | null,
    ) => void
    ThrowStatement?: (
        node: TSESTree.ThrowStatement,
        parent: TSESTree.Node | null,
    ) => void
    TryStatement?: (
        node: TSESTree.TryStatement,
        parent: TSESTree.Node | null,
    ) => void
    UnaryExpression?: (
        node: TSESTree.UnaryExpression,
        parent: TSESTree.Node | null,
    ) => void
    UpdateExpression?: (
        node: TSESTree.UpdateExpression,
        parent: TSESTree.Node | null,
    ) => void
    VariableDeclaration?: (
        node: TSESTree.VariableDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    VariableDeclarator?: (
        node: TSESTree.VariableDeclarator,
        parent: TSESTree.Node | null,
    ) => void
    WhileStatement?: (
        node: TSESTree.WhileStatement,
        parent: TSESTree.Node | null,
    ) => void
    WithStatement?: (
        node: TSESTree.WithStatement,
        parent: TSESTree.Node | null,
    ) => void
    YieldExpression?: (
        node: TSESTree.YieldExpression,
        parent: TSESTree.Node | null,
    ) => void
    TSAbstractKeyword?: (
        node: TSESTree.TSAbstractKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSAbstractMethodDefinition?: (
        node: TSESTree.TSAbstractMethodDefinition,
        parent: TSESTree.Node | null,
    ) => void
    TSAbstractPropertyDefinition?: (
        node: TSESTree.TSAbstractPropertyDefinition,
        parent: TSESTree.Node | null,
    ) => void
    TSAnyKeyword?: (
        node: TSESTree.TSAnyKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSArrayType?: (
        node: TSESTree.TSArrayType,
        parent: TSESTree.Node | null,
    ) => void
    TSAsExpression?: (
        node: TSESTree.TSAsExpression,
        parent: TSESTree.Node | null,
    ) => void
    TSAsyncKeyword?: (
        node: TSESTree.TSAsyncKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSBigIntKeyword?: (
        node: TSESTree.TSBigIntKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSBooleanKeyword?: (
        node: TSESTree.TSBooleanKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSCallSignatureDeclaration?: (
        node: TSESTree.TSCallSignatureDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    TSClassImplements?: (
        node: TSESTree.TSClassImplements,
        parent: TSESTree.Node | null,
    ) => void
    TSConditionalType?: (
        node: TSESTree.TSConditionalType,
        parent: TSESTree.Node | null,
    ) => void
    TSConstructorType?: (
        node: TSESTree.TSConstructorType,
        parent: TSESTree.Node | null,
    ) => void
    TSConstructSignatureDeclaration?: (
        node: TSESTree.TSConstructSignatureDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    TSDeclareFunction?: (
        node: TSESTree.TSDeclareFunction,
        parent: TSESTree.Node | null,
    ) => void
    TSDeclareKeyword?: (
        node: TSESTree.TSDeclareKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSEmptyBodyFunctionExpression?: (
        node: TSESTree.TSEmptyBodyFunctionExpression,
        parent: TSESTree.Node | null,
    ) => void
    TSEnumDeclaration?: (
        node: TSESTree.TSEnumDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    TSEnumMember?: (
        node: TSESTree.TSEnumMember,
        parent: TSESTree.Node | null,
    ) => void
    TSExportAssignment?: (
        node: TSESTree.TSExportAssignment,
        parent: TSESTree.Node | null,
    ) => void
    TSExportKeyword?: (
        node: TSESTree.TSExportKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSExternalModuleReference?: (
        node: TSESTree.TSExternalModuleReference,
        parent: TSESTree.Node | null,
    ) => void
    TSFunctionType?: (
        node: TSESTree.TSFunctionType,
        parent: TSESTree.Node | null,
    ) => void
    TSImportEqualsDeclaration?: (
        node: TSESTree.TSImportEqualsDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    TSImportType?: (
        node: TSESTree.TSImportType,
        parent: TSESTree.Node | null,
    ) => void
    TSIndexedAccessType?: (
        node: TSESTree.TSIndexedAccessType,
        parent: TSESTree.Node | null,
    ) => void
    TSIndexSignature?: (
        node: TSESTree.TSIndexSignature,
        parent: TSESTree.Node | null,
    ) => void
    TSInferType?: (
        node: TSESTree.TSInferType,
        parent: TSESTree.Node | null,
    ) => void
    TSInterfaceBody?: (
        node: TSESTree.TSInterfaceBody,
        parent: TSESTree.Node | null,
    ) => void
    TSInterfaceDeclaration?: (
        node: TSESTree.TSInterfaceDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    TSInterfaceHeritage?: (
        node: TSESTree.TSInterfaceHeritage,
        parent: TSESTree.Node | null,
    ) => void
    TSIntersectionType?: (
        node: TSESTree.TSIntersectionType,
        parent: TSESTree.Node | null,
    ) => void
    TSIntrinsicKeyword?: (
        node: TSESTree.Node & { type: AST_NODE_TYPES.TSIntrinsicKeyword },
        parent: TSESTree.Node | null,
    ) => void
    TSLiteralType?: (
        node: TSESTree.TSLiteralType,
        parent: TSESTree.Node | null,
    ) => void
    TSMappedType?: (
        node: TSESTree.TSMappedType,
        parent: TSESTree.Node | null,
    ) => void
    TSMethodSignature?: (
        node: TSESTree.TSMethodSignature,
        parent: TSESTree.Node | null,
    ) => void
    TSModuleBlock?: (
        node: TSESTree.TSModuleBlock,
        parent: TSESTree.Node | null,
    ) => void
    TSModuleDeclaration?: (
        node: TSESTree.TSModuleDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    TSNamedTupleMember?: (
        node: TSESTree.TSNamedTupleMember,
        parent: TSESTree.Node | null,
    ) => void
    TSNamespaceExportDeclaration?: (
        node: TSESTree.TSNamespaceExportDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    TSNeverKeyword?: (
        node: TSESTree.TSNeverKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSNonNullExpression?: (
        node: TSESTree.TSNonNullExpression,
        parent: TSESTree.Node | null,
    ) => void
    TSNullKeyword?: (
        node: TSESTree.TSNullKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSNumberKeyword?: (
        node: TSESTree.TSNumberKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSObjectKeyword?: (
        node: TSESTree.TSObjectKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSOptionalType?: (
        node: TSESTree.TSOptionalType,
        parent: TSESTree.Node | null,
    ) => void
    TSParameterProperty?: (
        node: TSESTree.TSParameterProperty,
        parent: TSESTree.Node | null,
    ) => void
    TSPrivateKeyword?: (
        node: TSESTree.TSPrivateKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSPropertySignature?: (
        node: TSESTree.TSPropertySignature,
        parent: TSESTree.Node | null,
    ) => void
    TSProtectedKeyword?: (
        node: TSESTree.TSProtectedKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSPublicKeyword?: (
        node: TSESTree.TSPublicKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSQualifiedName?: (
        node: TSESTree.TSQualifiedName,
        parent: TSESTree.Node | null,
    ) => void
    TSReadonlyKeyword?: (
        node: TSESTree.TSReadonlyKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSRestType?: (
        node: TSESTree.TSRestType,
        parent: TSESTree.Node | null,
    ) => void
    TSStaticKeyword?: (
        node: TSESTree.TSStaticKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSStringKeyword?: (
        node: TSESTree.TSStringKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSSymbolKeyword?: (
        node: TSESTree.TSSymbolKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSTemplateLiteralType?: (
        node: TSESTree.TSTemplateLiteralType,
        parent: TSESTree.Node | null,
    ) => void
    TSThisType?: (
        node: TSESTree.TSThisType,
        parent: TSESTree.Node | null,
    ) => void
    TSTupleType?: (
        node: TSESTree.TSTupleType,
        parent: TSESTree.Node | null,
    ) => void
    TSTypeAliasDeclaration?: (
        node: TSESTree.TSTypeAliasDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    TSTypeAnnotation?: (
        node: TSESTree.TSTypeAnnotation,
        parent: TSESTree.Node | null,
    ) => void
    TSTypeAssertion?: (
        node: TSESTree.TSTypeAssertion,
        parent: TSESTree.Node | null,
    ) => void
    TSTypeLiteral?: (
        node: TSESTree.TSTypeLiteral,
        parent: TSESTree.Node | null,
    ) => void
    TSTypeOperator?: (
        node: TSESTree.TSTypeOperator,
        parent: TSESTree.Node | null,
    ) => void
    TSTypeParameter?: (
        node: TSESTree.TSTypeParameter,
        parent: TSESTree.Node | null,
    ) => void
    TSTypeParameterDeclaration?: (
        node: TSESTree.TSTypeParameterDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    TSTypeParameterInstantiation?: (
        node: TSESTree.TSTypeParameterInstantiation,
        parent: TSESTree.Node | null,
    ) => void
    TSTypePredicate?: (
        node: TSESTree.TSTypePredicate,
        parent: TSESTree.Node | null,
    ) => void
    TSTypeQuery?: (
        node: TSESTree.TSTypeQuery,
        parent: TSESTree.Node | null,
    ) => void
    TSTypeReference?: (
        node: TSESTree.TSTypeReference,
        parent: TSESTree.Node | null,
    ) => void
    TSUndefinedKeyword?: (
        node: TSESTree.TSUndefinedKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSUnionType?: (
        node: TSESTree.TSUnionType,
        parent: TSESTree.Node | null,
    ) => void
    TSUnknownKeyword?: (
        node: TSESTree.TSUnknownKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSVoidKeyword?: (
        node: TSESTree.TSVoidKeyword,
        parent: TSESTree.Node | null,
    ) => void
}

\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "AST_NODE_TYPES",
    "\\"@typescript-eslint/types\\"",
    "Visitor",
    "node",
    "TSESTree",
    "ArrayExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ArrayExpression",
    "node",
    "TSESTree",
    "ArrayPattern",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ArrayPattern",
    "node",
    "TSESTree",
    "ArrowFunctionExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ArrowFunctionExpression",
    "node",
    "TSESTree",
    "AssignmentExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "AssignmentExpression",
    "node",
    "TSESTree",
    "AssignmentPattern",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "AssignmentPattern",
    "node",
    "TSESTree",
    "AwaitExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "AwaitExpression",
    "node",
    "TSESTree",
    "BinaryExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "BinaryExpression",
    "node",
    "TSESTree",
    "BlockStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "BlockStatement",
    "node",
    "TSESTree",
    "BreakStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "BreakStatement",
    "node",
    "TSESTree",
    "CallExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "CallExpression",
    "node",
    "TSESTree",
    "CatchClause",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "CatchClause",
    "node",
    "TSESTree",
    "ChainExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ChainExpression",
    "node",
    "TSESTree",
    "ClassBody",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ClassBody",
    "node",
    "TSESTree",
    "ClassDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ClassDeclaration",
    "node",
    "TSESTree",
    "ClassExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ClassExpression",
    "node",
    "TSESTree",
    "ConditionalExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ConditionalExpression",
    "node",
    "TSESTree",
    "ContinueStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ContinueStatement",
    "node",
    "TSESTree",
    "DebuggerStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "DebuggerStatement",
    "node",
    "TSESTree",
    "Decorator",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "Decorator",
    "node",
    "TSESTree",
    "DoWhileStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "DoWhileStatement",
    "node",
    "TSESTree",
    "EmptyStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "EmptyStatement",
    "node",
    "TSESTree",
    "ExportAllDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ExportAllDeclaration",
    "node",
    "TSESTree",
    "ExportDefaultDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ExportDefaultDeclaration",
    "node",
    "TSESTree",
    "ExportNamedDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ExportNamedDeclaration",
    "node",
    "TSESTree",
    "ExportSpecifier",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ExportSpecifier",
    "node",
    "TSESTree",
    "ExpressionStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ExpressionStatement",
    "node",
    "TSESTree",
    "ForInStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ForInStatement",
    "node",
    "TSESTree",
    "ForOfStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ForOfStatement",
    "node",
    "TSESTree",
    "ForStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ForStatement",
    "node",
    "TSESTree",
    "FunctionDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "FunctionDeclaration",
    "node",
    "TSESTree",
    "FunctionExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "FunctionExpression",
    "node",
    "TSESTree",
    "Identifier",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "Identifier",
    "node",
    "TSESTree",
    "IfStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "IfStatement",
    "node",
    "TSESTree",
    "ImportAttribute",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ImportAttribute",
    "node",
    "TSESTree",
    "ImportDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ImportDeclaration",
    "node",
    "TSESTree",
    "ImportDefaultSpecifier",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ImportDefaultSpecifier",
    "node",
    "TSESTree",
    "ImportExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ImportExpression",
    "node",
    "TSESTree",
    "ImportNamespaceSpecifier",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ImportNamespaceSpecifier",
    "node",
    "TSESTree",
    "ImportSpecifier",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ImportSpecifier",
    "node",
    "TSESTree",
    "JSXAttribute",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXAttribute",
    "node",
    "TSESTree",
    "JSXClosingElement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXClosingElement",
    "node",
    "TSESTree",
    "JSXClosingFragment",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXClosingFragment",
    "node",
    "TSESTree",
    "JSXElement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXElement",
    "node",
    "TSESTree",
    "JSXEmptyExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXEmptyExpression",
    "node",
    "TSESTree",
    "JSXExpressionContainer",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXExpressionContainer",
    "node",
    "TSESTree",
    "JSXFragment",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXFragment",
    "node",
    "TSESTree",
    "JSXIdentifier",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXIdentifier",
    "node",
    "TSESTree",
    "JSXMemberExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXMemberExpression",
    "node",
    "TSESTree",
    "JSXNamespacedName",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXNamespacedName",
    "node",
    "TSESTree",
    "JSXOpeningElement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXOpeningElement",
    "node",
    "TSESTree",
    "JSXOpeningFragment",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXOpeningFragment",
    "node",
    "TSESTree",
    "JSXSpreadAttribute",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXSpreadAttribute",
    "node",
    "TSESTree",
    "JSXSpreadChild",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXSpreadChild",
    "node",
    "TSESTree",
    "JSXText",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXText",
    "node",
    "TSESTree",
    "LabeledStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "LabeledStatement",
    "node",
    "TSESTree",
    "Literal",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "Literal",
    "node",
    "TSESTree",
    "LogicalExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "LogicalExpression",
    "node",
    "TSESTree",
    "MemberExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "MemberExpression",
    "node",
    "TSESTree",
    "MetaProperty",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "MetaProperty",
    "node",
    "TSESTree",
    "MethodDefinition",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "MethodDefinition",
    "node",
    "TSESTree",
    "NewExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "NewExpression",
    "node",
    "TSESTree",
    "ObjectExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ObjectExpression",
    "node",
    "TSESTree",
    "ObjectPattern",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ObjectPattern",
    "node",
    "TSESTree",
    "PrivateIdentifier",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "PrivateIdentifier",
    "node",
    "TSESTree",
    "Program",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "Program",
    "node",
    "TSESTree",
    "Property",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "Property",
    "node",
    "TSESTree",
    "PropertyDefinition",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "PropertyDefinition",
    "node",
    "TSESTree",
    "RestElement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "RestElement",
    "node",
    "TSESTree",
    "ReturnStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ReturnStatement",
    "node",
    "TSESTree",
    "SequenceExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "SequenceExpression",
    "node",
    "TSESTree",
    "SpreadElement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "SpreadElement",
    "node",
    "TSESTree",
    "StaticBlock",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "StaticBlock",
    "node",
    "TSESTree",
    "Super",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "Super",
    "node",
    "TSESTree",
    "SwitchCase",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "SwitchCase",
    "node",
    "TSESTree",
    "SwitchStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "SwitchStatement",
    "node",
    "TSESTree",
    "TaggedTemplateExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TaggedTemplateExpression",
    "node",
    "TSESTree",
    "TemplateElement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TemplateElement",
    "node",
    "TSESTree",
    "TemplateLiteral",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TemplateLiteral",
    "node",
    "TSESTree",
    "ThisExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ThisExpression",
    "node",
    "TSESTree",
    "ThrowStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ThrowStatement",
    "node",
    "TSESTree",
    "TryStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TryStatement",
    "node",
    "TSESTree",
    "UnaryExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "UnaryExpression",
    "node",
    "TSESTree",
    "UpdateExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "UpdateExpression",
    "node",
    "TSESTree",
    "VariableDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "VariableDeclaration",
    "node",
    "TSESTree",
    "VariableDeclarator",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "VariableDeclarator",
    "node",
    "TSESTree",
    "WhileStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "WhileStatement",
    "node",
    "TSESTree",
    "WithStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "WithStatement",
    "node",
    "TSESTree",
    "YieldExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "YieldExpression",
    "node",
    "TSESTree",
    "TSAbstractKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSAbstractKeyword",
    "node",
    "TSESTree",
    "TSAbstractMethodDefinition",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSAbstractMethodDefinition",
    "node",
    "TSESTree",
    "TSAbstractPropertyDefinition",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSAbstractPropertyDefinition",
    "node",
    "TSESTree",
    "TSAnyKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSAnyKeyword",
    "node",
    "TSESTree",
    "TSArrayType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSArrayType",
    "node",
    "TSESTree",
    "TSAsExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSAsExpression",
    "node",
    "TSESTree",
    "TSAsyncKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSAsyncKeyword",
    "node",
    "TSESTree",
    "TSBigIntKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSBigIntKeyword",
    "node",
    "TSESTree",
    "TSBooleanKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSBooleanKeyword",
    "node",
    "TSESTree",
    "TSCallSignatureDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSCallSignatureDeclaration",
    "node",
    "TSESTree",
    "TSClassImplements",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSClassImplements",
    "node",
    "TSESTree",
    "TSConditionalType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSConditionalType",
    "node",
    "TSESTree",
    "TSConstructorType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSConstructorType",
    "node",
    "TSESTree",
    "TSConstructSignatureDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSConstructSignatureDeclaration",
    "node",
    "TSESTree",
    "TSDeclareFunction",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSDeclareFunction",
    "node",
    "TSESTree",
    "TSDeclareKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSDeclareKeyword",
    "node",
    "TSESTree",
    "TSEmptyBodyFunctionExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSEmptyBodyFunctionExpression",
    "node",
    "TSESTree",
    "TSEnumDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSEnumDeclaration",
    "node",
    "TSESTree",
    "TSEnumMember",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSEnumMember",
    "node",
    "TSESTree",
    "TSExportAssignment",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSExportAssignment",
    "node",
    "TSESTree",
    "TSExportKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSExportKeyword",
    "node",
    "TSESTree",
    "TSExternalModuleReference",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSExternalModuleReference",
    "node",
    "TSESTree",
    "TSFunctionType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSFunctionType",
    "node",
    "TSESTree",
    "TSImportEqualsDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSImportEqualsDeclaration",
    "node",
    "TSESTree",
    "TSImportType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSImportType",
    "node",
    "TSESTree",
    "TSIndexedAccessType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSIndexedAccessType",
    "node",
    "TSESTree",
    "TSIndexSignature",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSIndexSignature",
    "node",
    "TSESTree",
    "TSInferType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSInferType",
    "node",
    "TSESTree",
    "TSInterfaceBody",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSInterfaceBody",
    "node",
    "TSESTree",
    "TSInterfaceDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSInterfaceDeclaration",
    "node",
    "TSESTree",
    "TSInterfaceHeritage",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSInterfaceHeritage",
    "node",
    "TSESTree",
    "TSIntersectionType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSIntersectionType",
    "node",
    "TSESTree",
    "Node",
    "AST_NODE_TYPES",
    "TSIntrinsicKeyword",
    "type",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSIntrinsicKeyword",
    "node",
    "TSESTree",
    "TSLiteralType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSLiteralType",
    "node",
    "TSESTree",
    "TSMappedType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSMappedType",
    "node",
    "TSESTree",
    "TSMethodSignature",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSMethodSignature",
    "node",
    "TSESTree",
    "TSModuleBlock",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSModuleBlock",
    "node",
    "TSESTree",
    "TSModuleDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSModuleDeclaration",
    "node",
    "TSESTree",
    "TSNamedTupleMember",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSNamedTupleMember",
    "node",
    "TSESTree",
    "TSNamespaceExportDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSNamespaceExportDeclaration",
    "node",
    "TSESTree",
    "TSNeverKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSNeverKeyword",
    "node",
    "TSESTree",
    "TSNonNullExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSNonNullExpression",
    "node",
    "TSESTree",
    "TSNullKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSNullKeyword",
    "node",
    "TSESTree",
    "TSNumberKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSNumberKeyword",
    "node",
    "TSESTree",
    "TSObjectKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSObjectKeyword",
    "node",
    "TSESTree",
    "TSOptionalType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSOptionalType",
    "node",
    "TSESTree",
    "TSParameterProperty",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSParameterProperty",
    "node",
    "TSESTree",
    "TSPrivateKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSPrivateKeyword",
    "node",
    "TSESTree",
    "TSPropertySignature",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSPropertySignature",
    "node",
    "TSESTree",
    "TSProtectedKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSProtectedKeyword",
    "node",
    "TSESTree",
    "TSPublicKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSPublicKeyword",
    "node",
    "TSESTree",
    "TSQualifiedName",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSQualifiedName",
    "node",
    "TSESTree",
    "TSReadonlyKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSReadonlyKeyword",
    "node",
    "TSESTree",
    "TSRestType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSRestType",
    "node",
    "TSESTree",
    "TSStaticKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSStaticKeyword",
    "node",
    "TSESTree",
    "TSStringKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSStringKeyword",
    "node",
    "TSESTree",
    "TSSymbolKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSSymbolKeyword",
    "node",
    "TSESTree",
    "TSTemplateLiteralType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTemplateLiteralType",
    "node",
    "TSESTree",
    "TSThisType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSThisType",
    "node",
    "TSESTree",
    "TSTupleType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTupleType",
    "node",
    "TSESTree",
    "TSTypeAliasDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTypeAliasDeclaration",
    "node",
    "TSESTree",
    "TSTypeAnnotation",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTypeAnnotation",
    "node",
    "TSESTree",
    "TSTypeAssertion",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTypeAssertion",
    "node",
    "TSESTree",
    "TSTypeLiteral",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTypeLiteral",
    "node",
    "TSESTree",
    "TSTypeOperator",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTypeOperator",
    "node",
    "TSESTree",
    "TSTypeParameter",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTypeParameter",
    "node",
    "TSESTree",
    "TSTypeParameterDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTypeParameterDeclaration",
    "node",
    "TSESTree",
    "TSTypeParameterInstantiation",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTypeParameterInstantiation",
    "node",
    "TSESTree",
    "TSTypePredicate",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTypePredicate",
    "node",
    "TSESTree",
    "TSTypeQuery",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTypeQuery",
    "node",
    "TSESTree",
    "TSTypeReference",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTypeReference",
    "node",
    "TSESTree",
    "TSUndefinedKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSUndefinedKeyword",
    "node",
    "TSESTree",
    "TSUnionType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSUnionType",
    "node",
    "TSESTree",
    "TSUnknownKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSUnknownKeyword",
    "node",
    "TSESTree",
    "TSVoidKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSVoidKeyword",
  ],
  "operators": Array [
    "import",
    "type",
    "{}",
    ",",
    "from",
    "export",
    "type",
    "=",
    "{}",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    "&",
    ".",
    "{}",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.ArrayExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ArrayExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.ArrayPattern,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ArrayPattern",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.ArrowFunctionExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ArrowFunctionExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.AssignmentExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "AssignmentExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.AssignmentPattern,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "AssignmentPattern",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.AwaitExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "AwaitExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.BinaryExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "BinaryExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.BlockStatement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "BlockStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.BreakStatement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "BreakStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.CallExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "CallExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.CatchClause,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "CatchClause",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.ChainExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ChainExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.ClassDeclaration,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ClassDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.ClassExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ClassExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.ConditionalExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ConditionalExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.ContinueStatement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ContinueStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.DebuggerStatement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "DebuggerStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.DoWhileStatement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "DoWhileStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.EmptyStatement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "EmptyStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.ExportAllDeclaration,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ExportAllDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.ExportDefaultDeclaration,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ExportDefaultDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.ExportNamedDeclaration,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ExportNamedDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.ExportSpecifier,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ExportSpecifier",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.ExpressionStatement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ExpressionStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.ForInStatement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ForInStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.ForOfStatement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ForOfStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.ForStatement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ForStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.FunctionDeclaration,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "FunctionDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.FunctionExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "FunctionExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.Identifier,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "Identifier",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.IfStatement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "IfStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.ImportAttribute,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ImportAttribute",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.ImportDeclaration,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ImportDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.ImportDefaultSpecifier,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ImportDefaultSpecifier",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.ImportExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ImportExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.ImportNamespaceSpecifier,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ImportNamespaceSpecifier",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.ImportSpecifier,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ImportSpecifier",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.JSXAttribute,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "JSXAttribute",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.JSXClosingElement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "JSXClosingElement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.JSXClosingFragment,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "JSXClosingFragment",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.JSXElement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "JSXElement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.JSXEmptyExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "JSXEmptyExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.JSXExpressionContainer,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "JSXExpressionContainer",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.JSXFragment,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "JSXFragment",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.JSXIdentifier,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "JSXIdentifier",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.JSXMemberExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "JSXMemberExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.JSXNamespacedName,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "JSXNamespacedName",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.JSXOpeningElement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "JSXOpeningElement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.JSXOpeningFragment,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "JSXOpeningFragment",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.JSXSpreadAttribute,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "JSXSpreadAttribute",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.JSXSpreadChild,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "JSXSpreadChild",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.LabeledStatement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "LabeledStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.LogicalExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "LogicalExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.MemberExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "MemberExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.MetaProperty,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "MetaProperty",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.MethodDefinition,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "MethodDefinition",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.NewExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "NewExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.Node & { type: AST_NODE_TYPES.TSIntrinsicKeyword },
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "Node",
    "AST_NODE_TYPES",
    "TSIntrinsicKeyword",
    "type",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    "&",
    ".",
    "{}",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.ObjectExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ObjectExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.ObjectPattern,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ObjectPattern",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.PrivateIdentifier,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "PrivateIdentifier",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.PropertyDefinition,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "PropertyDefinition",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.RestElement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "RestElement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.ReturnStatement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ReturnStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.SequenceExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "SequenceExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.SpreadElement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "SpreadElement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.StaticBlock,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "StaticBlock",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.SwitchCase,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "SwitchCase",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.SwitchStatement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "SwitchStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSAbstractKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSAbstractKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSAbstractMethodDefinition,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSAbstractMethodDefinition",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSAbstractPropertyDefinition,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSAbstractPropertyDefinition",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSAnyKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSAnyKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSArrayType,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSArrayType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSAsExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSAsExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSAsyncKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSAsyncKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSBigIntKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSBigIntKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSBooleanKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSBooleanKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSCallSignatureDeclaration,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSCallSignatureDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSClassImplements,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSClassImplements",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSConditionalType,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSConditionalType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSConstructSignatureDeclaration,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSConstructSignatureDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSConstructorType,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSConstructorType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSDeclareFunction,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSDeclareFunction",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSDeclareKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSDeclareKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSEmptyBodyFunctionExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSEmptyBodyFunctionExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSEnumDeclaration,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSEnumDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSEnumMember,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSEnumMember",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSExportAssignment,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSExportAssignment",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSExportKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSExportKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSExternalModuleReference,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSExternalModuleReference",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSFunctionType,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSFunctionType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSImportEqualsDeclaration,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSImportEqualsDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSImportType,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSImportType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSIndexSignature,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSIndexSignature",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSIndexedAccessType,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSIndexedAccessType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSInferType,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSInferType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSInterfaceBody,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSInterfaceBody",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSInterfaceDeclaration,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSInterfaceDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSInterfaceHeritage,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSInterfaceHeritage",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSIntersectionType,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSIntersectionType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSLiteralType,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSLiteralType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSMappedType,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSMappedType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSMethodSignature,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSMethodSignature",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSModuleBlock,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSModuleBlock",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSModuleDeclaration,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSModuleDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSNamedTupleMember,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSNamedTupleMember",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSNamespaceExportDeclaration,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSNamespaceExportDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSNeverKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSNeverKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSNonNullExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSNonNullExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSNullKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSNullKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSNumberKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSNumberKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSObjectKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSObjectKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSOptionalType,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSOptionalType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSParameterProperty,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSParameterProperty",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSPrivateKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSPrivateKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSPropertySignature,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSPropertySignature",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSProtectedKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSProtectedKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSPublicKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSPublicKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSQualifiedName,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSQualifiedName",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSReadonlyKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSReadonlyKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSRestType,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSRestType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSStaticKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSStaticKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSStringKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSStringKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSSymbolKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSSymbolKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSTemplateLiteralType,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSTemplateLiteralType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSThisType,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSThisType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSTupleType,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSTupleType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSTypeAliasDeclaration,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSTypeAliasDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSTypeAnnotation,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSTypeAnnotation",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSTypeAssertion,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSTypeAssertion",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSTypeLiteral,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSTypeLiteral",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSTypeOperator,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSTypeOperator",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSTypeParameter,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSTypeParameter",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSTypeParameterDeclaration,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSTypeParameterDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSTypeParameterInstantiation,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSTypeParameterInstantiation",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSTypePredicate,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSTypePredicate",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSTypeQuery,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSTypeQuery",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSTypeReference,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSTypeReference",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSUndefinedKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSUndefinedKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSUnionType,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSUnionType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSUnknownKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSUnknownKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TSVoidKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSVoidKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TaggedTemplateExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TaggedTemplateExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TemplateElement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TemplateElement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TemplateLiteral,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TemplateLiteral",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.ThisExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ThisExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.ThrowStatement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ThrowStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.TryStatement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TryStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.UnaryExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "UnaryExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.UpdateExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "UpdateExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.VariableDeclaration,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "VariableDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.VariableDeclarator,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "VariableDeclarator",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.WhileStatement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "WhileStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.WithStatement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "WithStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(
        node: TSESTree.YieldExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "YieldExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(node: TSESTree.ClassBody, parent: TSESTree.Node | null) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ClassBody",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(node: TSESTree.Decorator, parent: TSESTree.Node | null) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "Decorator",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(node: TSESTree.JSXText, parent: TSESTree.Node | null) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "JSXText",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(node: TSESTree.Literal, parent: TSESTree.Node | null) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "Literal",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(node: TSESTree.Program, parent: TSESTree.Node | null) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "Program",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(node: TSESTree.Property, parent: TSESTree.Node | null) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "Property",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSFunctionType\`
(node: TSESTree.Super, parent: TSESTree.Node | null) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "Super",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSIntersectionType\`
TSESTree.Node & { type: AST_NODE_TYPES.TSIntrinsicKeyword }
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "Node",
    "AST_NODE_TYPES",
    "TSIntrinsicKeyword",
    "type",
  ],
  "operators": Array [
    "&",
    ".",
    "{}",
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSNullKeyword\`
null
\` 1`] = `
Object {
  "operands": Array [
    "null",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
ArrayExpression?: (
        node: TSESTree.ArrayExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ArrayExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ArrayExpression",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
ArrayPattern?: (
        node: TSESTree.ArrayPattern,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ArrayPattern",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ArrayPattern",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
ArrowFunctionExpression?: (
        node: TSESTree.ArrowFunctionExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ArrowFunctionExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ArrowFunctionExpression",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
AssignmentExpression?: (
        node: TSESTree.AssignmentExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "AssignmentExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "AssignmentExpression",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
AssignmentPattern?: (
        node: TSESTree.AssignmentPattern,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "AssignmentPattern",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "AssignmentPattern",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
AwaitExpression?: (
        node: TSESTree.AwaitExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "AwaitExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "AwaitExpression",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
BinaryExpression?: (
        node: TSESTree.BinaryExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "BinaryExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "BinaryExpression",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
BlockStatement?: (
        node: TSESTree.BlockStatement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "BlockStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "BlockStatement",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
BreakStatement?: (
        node: TSESTree.BreakStatement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "BreakStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "BreakStatement",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
CallExpression?: (
        node: TSESTree.CallExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "CallExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "CallExpression",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
CatchClause?: (
        node: TSESTree.CatchClause,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "CatchClause",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "CatchClause",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
ChainExpression?: (
        node: TSESTree.ChainExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ChainExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ChainExpression",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
ClassBody?: (node: TSESTree.ClassBody, parent: TSESTree.Node | null) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ClassBody",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ClassBody",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
ClassDeclaration?: (
        node: TSESTree.ClassDeclaration,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ClassDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ClassDeclaration",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
ClassExpression?: (
        node: TSESTree.ClassExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ClassExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ClassExpression",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
ConditionalExpression?: (
        node: TSESTree.ConditionalExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ConditionalExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ConditionalExpression",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
ContinueStatement?: (
        node: TSESTree.ContinueStatement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ContinueStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ContinueStatement",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
DebuggerStatement?: (
        node: TSESTree.DebuggerStatement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "DebuggerStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "DebuggerStatement",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
Decorator?: (node: TSESTree.Decorator, parent: TSESTree.Node | null) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "Decorator",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "Decorator",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
DoWhileStatement?: (
        node: TSESTree.DoWhileStatement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "DoWhileStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "DoWhileStatement",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
EmptyStatement?: (
        node: TSESTree.EmptyStatement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "EmptyStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "EmptyStatement",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
ExportAllDeclaration?: (
        node: TSESTree.ExportAllDeclaration,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ExportAllDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ExportAllDeclaration",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
ExportDefaultDeclaration?: (
        node: TSESTree.ExportDefaultDeclaration,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ExportDefaultDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ExportDefaultDeclaration",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
ExportNamedDeclaration?: (
        node: TSESTree.ExportNamedDeclaration,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ExportNamedDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ExportNamedDeclaration",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
ExportSpecifier?: (
        node: TSESTree.ExportSpecifier,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ExportSpecifier",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ExportSpecifier",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
ExpressionStatement?: (
        node: TSESTree.ExpressionStatement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ExpressionStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ExpressionStatement",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
ForInStatement?: (
        node: TSESTree.ForInStatement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ForInStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ForInStatement",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
ForOfStatement?: (
        node: TSESTree.ForOfStatement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ForOfStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ForOfStatement",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
ForStatement?: (
        node: TSESTree.ForStatement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ForStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ForStatement",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
FunctionDeclaration?: (
        node: TSESTree.FunctionDeclaration,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "FunctionDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "FunctionDeclaration",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
FunctionExpression?: (
        node: TSESTree.FunctionExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "FunctionExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "FunctionExpression",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
Identifier?: (
        node: TSESTree.Identifier,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "Identifier",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "Identifier",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
IfStatement?: (
        node: TSESTree.IfStatement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "IfStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "IfStatement",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
ImportAttribute?: (
        node: TSESTree.ImportAttribute,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ImportAttribute",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ImportAttribute",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
ImportDeclaration?: (
        node: TSESTree.ImportDeclaration,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ImportDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ImportDeclaration",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
ImportDefaultSpecifier?: (
        node: TSESTree.ImportDefaultSpecifier,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ImportDefaultSpecifier",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ImportDefaultSpecifier",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
ImportExpression?: (
        node: TSESTree.ImportExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ImportExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ImportExpression",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
ImportNamespaceSpecifier?: (
        node: TSESTree.ImportNamespaceSpecifier,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ImportNamespaceSpecifier",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ImportNamespaceSpecifier",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
ImportSpecifier?: (
        node: TSESTree.ImportSpecifier,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ImportSpecifier",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ImportSpecifier",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
JSXAttribute?: (
        node: TSESTree.JSXAttribute,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "JSXAttribute",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXAttribute",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
JSXClosingElement?: (
        node: TSESTree.JSXClosingElement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "JSXClosingElement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXClosingElement",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
JSXClosingFragment?: (
        node: TSESTree.JSXClosingFragment,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "JSXClosingFragment",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXClosingFragment",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
JSXElement?: (
        node: TSESTree.JSXElement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "JSXElement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXElement",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
JSXEmptyExpression?: (
        node: TSESTree.JSXEmptyExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "JSXEmptyExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXEmptyExpression",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
JSXExpressionContainer?: (
        node: TSESTree.JSXExpressionContainer,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "JSXExpressionContainer",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXExpressionContainer",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
JSXFragment?: (
        node: TSESTree.JSXFragment,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "JSXFragment",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXFragment",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
JSXIdentifier?: (
        node: TSESTree.JSXIdentifier,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "JSXIdentifier",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXIdentifier",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
JSXMemberExpression?: (
        node: TSESTree.JSXMemberExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "JSXMemberExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXMemberExpression",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
JSXNamespacedName?: (
        node: TSESTree.JSXNamespacedName,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "JSXNamespacedName",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXNamespacedName",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
JSXOpeningElement?: (
        node: TSESTree.JSXOpeningElement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "JSXOpeningElement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXOpeningElement",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
JSXOpeningFragment?: (
        node: TSESTree.JSXOpeningFragment,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "JSXOpeningFragment",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXOpeningFragment",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
JSXSpreadAttribute?: (
        node: TSESTree.JSXSpreadAttribute,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "JSXSpreadAttribute",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXSpreadAttribute",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
JSXSpreadChild?: (
        node: TSESTree.JSXSpreadChild,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "JSXSpreadChild",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXSpreadChild",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
JSXText?: (node: TSESTree.JSXText, parent: TSESTree.Node | null) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "JSXText",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXText",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
LabeledStatement?: (
        node: TSESTree.LabeledStatement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "LabeledStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "LabeledStatement",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
Literal?: (node: TSESTree.Literal, parent: TSESTree.Node | null) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "Literal",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "Literal",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
LogicalExpression?: (
        node: TSESTree.LogicalExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "LogicalExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "LogicalExpression",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
MemberExpression?: (
        node: TSESTree.MemberExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "MemberExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "MemberExpression",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
MetaProperty?: (
        node: TSESTree.MetaProperty,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "MetaProperty",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "MetaProperty",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
MethodDefinition?: (
        node: TSESTree.MethodDefinition,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "MethodDefinition",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "MethodDefinition",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
NewExpression?: (
        node: TSESTree.NewExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "NewExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "NewExpression",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
ObjectExpression?: (
        node: TSESTree.ObjectExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ObjectExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ObjectExpression",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
ObjectPattern?: (
        node: TSESTree.ObjectPattern,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ObjectPattern",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ObjectPattern",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
PrivateIdentifier?: (
        node: TSESTree.PrivateIdentifier,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "PrivateIdentifier",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "PrivateIdentifier",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
Program?: (node: TSESTree.Program, parent: TSESTree.Node | null) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "Program",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "Program",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
Property?: (node: TSESTree.Property, parent: TSESTree.Node | null) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "Property",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "Property",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
PropertyDefinition?: (
        node: TSESTree.PropertyDefinition,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "PropertyDefinition",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "PropertyDefinition",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
RestElement?: (
        node: TSESTree.RestElement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "RestElement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "RestElement",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
ReturnStatement?: (
        node: TSESTree.ReturnStatement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ReturnStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ReturnStatement",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
SequenceExpression?: (
        node: TSESTree.SequenceExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "SequenceExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "SequenceExpression",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
SpreadElement?: (
        node: TSESTree.SpreadElement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "SpreadElement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "SpreadElement",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
StaticBlock?: (
        node: TSESTree.StaticBlock,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "StaticBlock",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "StaticBlock",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
Super?: (node: TSESTree.Super, parent: TSESTree.Node | null) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "Super",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "Super",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
SwitchCase?: (
        node: TSESTree.SwitchCase,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "SwitchCase",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "SwitchCase",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
SwitchStatement?: (
        node: TSESTree.SwitchStatement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "SwitchStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "SwitchStatement",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSAbstractKeyword?: (
        node: TSESTree.TSAbstractKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSAbstractKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSAbstractKeyword",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSAbstractMethodDefinition?: (
        node: TSESTree.TSAbstractMethodDefinition,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSAbstractMethodDefinition",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSAbstractMethodDefinition",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSAbstractPropertyDefinition?: (
        node: TSESTree.TSAbstractPropertyDefinition,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSAbstractPropertyDefinition",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSAbstractPropertyDefinition",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSAnyKeyword?: (
        node: TSESTree.TSAnyKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSAnyKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSAnyKeyword",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSArrayType?: (
        node: TSESTree.TSArrayType,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSArrayType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSArrayType",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSAsExpression?: (
        node: TSESTree.TSAsExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSAsExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSAsExpression",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSAsyncKeyword?: (
        node: TSESTree.TSAsyncKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSAsyncKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSAsyncKeyword",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSBigIntKeyword?: (
        node: TSESTree.TSBigIntKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSBigIntKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSBigIntKeyword",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSBooleanKeyword?: (
        node: TSESTree.TSBooleanKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSBooleanKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSBooleanKeyword",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSCallSignatureDeclaration?: (
        node: TSESTree.TSCallSignatureDeclaration,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSCallSignatureDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSCallSignatureDeclaration",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSClassImplements?: (
        node: TSESTree.TSClassImplements,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSClassImplements",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSClassImplements",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSConditionalType?: (
        node: TSESTree.TSConditionalType,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSConditionalType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSConditionalType",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSConstructSignatureDeclaration?: (
        node: TSESTree.TSConstructSignatureDeclaration,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSConstructSignatureDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSConstructSignatureDeclaration",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSConstructorType?: (
        node: TSESTree.TSConstructorType,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSConstructorType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSConstructorType",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSDeclareFunction?: (
        node: TSESTree.TSDeclareFunction,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSDeclareFunction",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSDeclareFunction",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSDeclareKeyword?: (
        node: TSESTree.TSDeclareKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSDeclareKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSDeclareKeyword",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSEmptyBodyFunctionExpression?: (
        node: TSESTree.TSEmptyBodyFunctionExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSEmptyBodyFunctionExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSEmptyBodyFunctionExpression",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSEnumDeclaration?: (
        node: TSESTree.TSEnumDeclaration,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSEnumDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSEnumDeclaration",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSEnumMember?: (
        node: TSESTree.TSEnumMember,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSEnumMember",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSEnumMember",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSExportAssignment?: (
        node: TSESTree.TSExportAssignment,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSExportAssignment",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSExportAssignment",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSExportKeyword?: (
        node: TSESTree.TSExportKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSExportKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSExportKeyword",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSExternalModuleReference?: (
        node: TSESTree.TSExternalModuleReference,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSExternalModuleReference",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSExternalModuleReference",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSFunctionType?: (
        node: TSESTree.TSFunctionType,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSFunctionType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSFunctionType",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSImportEqualsDeclaration?: (
        node: TSESTree.TSImportEqualsDeclaration,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSImportEqualsDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSImportEqualsDeclaration",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSImportType?: (
        node: TSESTree.TSImportType,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSImportType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSImportType",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSIndexSignature?: (
        node: TSESTree.TSIndexSignature,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSIndexSignature",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSIndexSignature",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSIndexedAccessType?: (
        node: TSESTree.TSIndexedAccessType,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSIndexedAccessType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSIndexedAccessType",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSInferType?: (
        node: TSESTree.TSInferType,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSInferType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSInferType",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSInterfaceBody?: (
        node: TSESTree.TSInterfaceBody,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSInterfaceBody",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSInterfaceBody",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSInterfaceDeclaration?: (
        node: TSESTree.TSInterfaceDeclaration,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSInterfaceDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSInterfaceDeclaration",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSInterfaceHeritage?: (
        node: TSESTree.TSInterfaceHeritage,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSInterfaceHeritage",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSInterfaceHeritage",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSIntersectionType?: (
        node: TSESTree.TSIntersectionType,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSIntersectionType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSIntersectionType",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSIntrinsicKeyword?: (
        node: TSESTree.Node & { type: AST_NODE_TYPES.TSIntrinsicKeyword },
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "Node",
    "AST_NODE_TYPES",
    "TSIntrinsicKeyword",
    "type",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSIntrinsicKeyword",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    "&",
    ".",
    "{}",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSLiteralType?: (
        node: TSESTree.TSLiteralType,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSLiteralType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSLiteralType",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSMappedType?: (
        node: TSESTree.TSMappedType,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSMappedType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSMappedType",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSMethodSignature?: (
        node: TSESTree.TSMethodSignature,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSMethodSignature",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSMethodSignature",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSModuleBlock?: (
        node: TSESTree.TSModuleBlock,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSModuleBlock",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSModuleBlock",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSModuleDeclaration?: (
        node: TSESTree.TSModuleDeclaration,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSModuleDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSModuleDeclaration",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSNamedTupleMember?: (
        node: TSESTree.TSNamedTupleMember,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSNamedTupleMember",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSNamedTupleMember",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSNamespaceExportDeclaration?: (
        node: TSESTree.TSNamespaceExportDeclaration,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSNamespaceExportDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSNamespaceExportDeclaration",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSNeverKeyword?: (
        node: TSESTree.TSNeverKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSNeverKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSNeverKeyword",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSNonNullExpression?: (
        node: TSESTree.TSNonNullExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSNonNullExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSNonNullExpression",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSNullKeyword?: (
        node: TSESTree.TSNullKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSNullKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSNullKeyword",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSNumberKeyword?: (
        node: TSESTree.TSNumberKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSNumberKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSNumberKeyword",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSObjectKeyword?: (
        node: TSESTree.TSObjectKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSObjectKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSObjectKeyword",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSOptionalType?: (
        node: TSESTree.TSOptionalType,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSOptionalType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSOptionalType",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSParameterProperty?: (
        node: TSESTree.TSParameterProperty,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSParameterProperty",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSParameterProperty",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSPrivateKeyword?: (
        node: TSESTree.TSPrivateKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSPrivateKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSPrivateKeyword",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSPropertySignature?: (
        node: TSESTree.TSPropertySignature,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSPropertySignature",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSPropertySignature",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSProtectedKeyword?: (
        node: TSESTree.TSProtectedKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSProtectedKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSProtectedKeyword",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSPublicKeyword?: (
        node: TSESTree.TSPublicKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSPublicKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSPublicKeyword",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSQualifiedName?: (
        node: TSESTree.TSQualifiedName,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSQualifiedName",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSQualifiedName",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSReadonlyKeyword?: (
        node: TSESTree.TSReadonlyKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSReadonlyKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSReadonlyKeyword",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSRestType?: (
        node: TSESTree.TSRestType,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSRestType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSRestType",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSStaticKeyword?: (
        node: TSESTree.TSStaticKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSStaticKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSStaticKeyword",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSStringKeyword?: (
        node: TSESTree.TSStringKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSStringKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSStringKeyword",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSSymbolKeyword?: (
        node: TSESTree.TSSymbolKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSSymbolKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSSymbolKeyword",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSTemplateLiteralType?: (
        node: TSESTree.TSTemplateLiteralType,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSTemplateLiteralType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTemplateLiteralType",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSThisType?: (
        node: TSESTree.TSThisType,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSThisType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSThisType",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSTupleType?: (
        node: TSESTree.TSTupleType,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSTupleType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTupleType",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSTypeAliasDeclaration?: (
        node: TSESTree.TSTypeAliasDeclaration,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSTypeAliasDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTypeAliasDeclaration",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSTypeAnnotation?: (
        node: TSESTree.TSTypeAnnotation,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSTypeAnnotation",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTypeAnnotation",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSTypeAssertion?: (
        node: TSESTree.TSTypeAssertion,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSTypeAssertion",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTypeAssertion",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSTypeLiteral?: (
        node: TSESTree.TSTypeLiteral,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSTypeLiteral",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTypeLiteral",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSTypeOperator?: (
        node: TSESTree.TSTypeOperator,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSTypeOperator",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTypeOperator",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSTypeParameter?: (
        node: TSESTree.TSTypeParameter,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSTypeParameter",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTypeParameter",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSTypeParameterDeclaration?: (
        node: TSESTree.TSTypeParameterDeclaration,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSTypeParameterDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTypeParameterDeclaration",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSTypeParameterInstantiation?: (
        node: TSESTree.TSTypeParameterInstantiation,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSTypeParameterInstantiation",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTypeParameterInstantiation",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSTypePredicate?: (
        node: TSESTree.TSTypePredicate,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSTypePredicate",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTypePredicate",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSTypeQuery?: (
        node: TSESTree.TSTypeQuery,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSTypeQuery",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTypeQuery",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSTypeReference?: (
        node: TSESTree.TSTypeReference,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSTypeReference",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTypeReference",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSUndefinedKeyword?: (
        node: TSESTree.TSUndefinedKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSUndefinedKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSUndefinedKeyword",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSUnionType?: (
        node: TSESTree.TSUnionType,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSUnionType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSUnionType",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSUnknownKeyword?: (
        node: TSESTree.TSUnknownKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSUnknownKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSUnknownKeyword",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TSVoidKeyword?: (
        node: TSESTree.TSVoidKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSVoidKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSVoidKeyword",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TaggedTemplateExpression?: (
        node: TSESTree.TaggedTemplateExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TaggedTemplateExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TaggedTemplateExpression",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TemplateElement?: (
        node: TSESTree.TemplateElement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TemplateElement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TemplateElement",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TemplateLiteral?: (
        node: TSESTree.TemplateLiteral,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TemplateLiteral",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TemplateLiteral",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
ThisExpression?: (
        node: TSESTree.ThisExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ThisExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ThisExpression",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
ThrowStatement?: (
        node: TSESTree.ThrowStatement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ThrowStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ThrowStatement",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
TryStatement?: (
        node: TSESTree.TryStatement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TryStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TryStatement",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
UnaryExpression?: (
        node: TSESTree.UnaryExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "UnaryExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "UnaryExpression",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
UpdateExpression?: (
        node: TSESTree.UpdateExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "UpdateExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "UpdateExpression",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
VariableDeclaration?: (
        node: TSESTree.VariableDeclaration,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "VariableDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "VariableDeclaration",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
VariableDeclarator?: (
        node: TSESTree.VariableDeclarator,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "VariableDeclarator",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "VariableDeclarator",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
WhileStatement?: (
        node: TSESTree.WhileStatement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "WhileStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "WhileStatement",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
WithStatement?: (
        node: TSESTree.WithStatement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "WithStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "WithStatement",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
YieldExpression?: (
        node: TSESTree.YieldExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "YieldExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "YieldExpression",
  ],
  "operators": Array [
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSPropertySignature\`
type: AST_NODE_TYPES.TSIntrinsicKeyword
\` 1`] = `
Object {
  "operands": Array [
    "AST_NODE_TYPES",
    "TSIntrinsicKeyword",
    "type",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAliasDeclaration\`
type Visitor = {
    ArrayExpression?: (
        node: TSESTree.ArrayExpression,
        parent: TSESTree.Node | null,
    ) => void
    ArrayPattern?: (
        node: TSESTree.ArrayPattern,
        parent: TSESTree.Node | null,
    ) => void
    ArrowFunctionExpression?: (
        node: TSESTree.ArrowFunctionExpression,
        parent: TSESTree.Node | null,
    ) => void
    AssignmentExpression?: (
        node: TSESTree.AssignmentExpression,
        parent: TSESTree.Node | null,
    ) => void
    AssignmentPattern?: (
        node: TSESTree.AssignmentPattern,
        parent: TSESTree.Node | null,
    ) => void
    AwaitExpression?: (
        node: TSESTree.AwaitExpression,
        parent: TSESTree.Node | null,
    ) => void
    BinaryExpression?: (
        node: TSESTree.BinaryExpression,
        parent: TSESTree.Node | null,
    ) => void
    BlockStatement?: (
        node: TSESTree.BlockStatement,
        parent: TSESTree.Node | null,
    ) => void
    BreakStatement?: (
        node: TSESTree.BreakStatement,
        parent: TSESTree.Node | null,
    ) => void
    CallExpression?: (
        node: TSESTree.CallExpression,
        parent: TSESTree.Node | null,
    ) => void
    CatchClause?: (
        node: TSESTree.CatchClause,
        parent: TSESTree.Node | null,
    ) => void
    ChainExpression?: (
        node: TSESTree.ChainExpression,
        parent: TSESTree.Node | null,
    ) => void
    ClassBody?: (node: TSESTree.ClassBody, parent: TSESTree.Node | null) => void
    ClassDeclaration?: (
        node: TSESTree.ClassDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    ClassExpression?: (
        node: TSESTree.ClassExpression,
        parent: TSESTree.Node | null,
    ) => void
    ConditionalExpression?: (
        node: TSESTree.ConditionalExpression,
        parent: TSESTree.Node | null,
    ) => void
    ContinueStatement?: (
        node: TSESTree.ContinueStatement,
        parent: TSESTree.Node | null,
    ) => void
    DebuggerStatement?: (
        node: TSESTree.DebuggerStatement,
        parent: TSESTree.Node | null,
    ) => void
    Decorator?: (node: TSESTree.Decorator, parent: TSESTree.Node | null) => void
    DoWhileStatement?: (
        node: TSESTree.DoWhileStatement,
        parent: TSESTree.Node | null,
    ) => void
    EmptyStatement?: (
        node: TSESTree.EmptyStatement,
        parent: TSESTree.Node | null,
    ) => void
    ExportAllDeclaration?: (
        node: TSESTree.ExportAllDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    ExportDefaultDeclaration?: (
        node: TSESTree.ExportDefaultDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    ExportNamedDeclaration?: (
        node: TSESTree.ExportNamedDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    ExportSpecifier?: (
        node: TSESTree.ExportSpecifier,
        parent: TSESTree.Node | null,
    ) => void
    ExpressionStatement?: (
        node: TSESTree.ExpressionStatement,
        parent: TSESTree.Node | null,
    ) => void
    ForInStatement?: (
        node: TSESTree.ForInStatement,
        parent: TSESTree.Node | null,
    ) => void
    ForOfStatement?: (
        node: TSESTree.ForOfStatement,
        parent: TSESTree.Node | null,
    ) => void
    ForStatement?: (
        node: TSESTree.ForStatement,
        parent: TSESTree.Node | null,
    ) => void
    FunctionDeclaration?: (
        node: TSESTree.FunctionDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    FunctionExpression?: (
        node: TSESTree.FunctionExpression,
        parent: TSESTree.Node | null,
    ) => void
    Identifier?: (
        node: TSESTree.Identifier,
        parent: TSESTree.Node | null,
    ) => void
    IfStatement?: (
        node: TSESTree.IfStatement,
        parent: TSESTree.Node | null,
    ) => void
    ImportAttribute?: (
        node: TSESTree.ImportAttribute,
        parent: TSESTree.Node | null,
    ) => void
    ImportDeclaration?: (
        node: TSESTree.ImportDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    ImportDefaultSpecifier?: (
        node: TSESTree.ImportDefaultSpecifier,
        parent: TSESTree.Node | null,
    ) => void
    ImportExpression?: (
        node: TSESTree.ImportExpression,
        parent: TSESTree.Node | null,
    ) => void
    ImportNamespaceSpecifier?: (
        node: TSESTree.ImportNamespaceSpecifier,
        parent: TSESTree.Node | null,
    ) => void
    ImportSpecifier?: (
        node: TSESTree.ImportSpecifier,
        parent: TSESTree.Node | null,
    ) => void
    JSXAttribute?: (
        node: TSESTree.JSXAttribute,
        parent: TSESTree.Node | null,
    ) => void
    JSXClosingElement?: (
        node: TSESTree.JSXClosingElement,
        parent: TSESTree.Node | null,
    ) => void
    JSXClosingFragment?: (
        node: TSESTree.JSXClosingFragment,
        parent: TSESTree.Node | null,
    ) => void
    JSXElement?: (
        node: TSESTree.JSXElement,
        parent: TSESTree.Node | null,
    ) => void
    JSXEmptyExpression?: (
        node: TSESTree.JSXEmptyExpression,
        parent: TSESTree.Node | null,
    ) => void
    JSXExpressionContainer?: (
        node: TSESTree.JSXExpressionContainer,
        parent: TSESTree.Node | null,
    ) => void
    JSXFragment?: (
        node: TSESTree.JSXFragment,
        parent: TSESTree.Node | null,
    ) => void
    JSXIdentifier?: (
        node: TSESTree.JSXIdentifier,
        parent: TSESTree.Node | null,
    ) => void
    JSXMemberExpression?: (
        node: TSESTree.JSXMemberExpression,
        parent: TSESTree.Node | null,
    ) => void
    JSXNamespacedName?: (
        node: TSESTree.JSXNamespacedName,
        parent: TSESTree.Node | null,
    ) => void
    JSXOpeningElement?: (
        node: TSESTree.JSXOpeningElement,
        parent: TSESTree.Node | null,
    ) => void
    JSXOpeningFragment?: (
        node: TSESTree.JSXOpeningFragment,
        parent: TSESTree.Node | null,
    ) => void
    JSXSpreadAttribute?: (
        node: TSESTree.JSXSpreadAttribute,
        parent: TSESTree.Node | null,
    ) => void
    JSXSpreadChild?: (
        node: TSESTree.JSXSpreadChild,
        parent: TSESTree.Node | null,
    ) => void
    JSXText?: (node: TSESTree.JSXText, parent: TSESTree.Node | null) => void
    LabeledStatement?: (
        node: TSESTree.LabeledStatement,
        parent: TSESTree.Node | null,
    ) => void
    Literal?: (node: TSESTree.Literal, parent: TSESTree.Node | null) => void
    LogicalExpression?: (
        node: TSESTree.LogicalExpression,
        parent: TSESTree.Node | null,
    ) => void
    MemberExpression?: (
        node: TSESTree.MemberExpression,
        parent: TSESTree.Node | null,
    ) => void
    MetaProperty?: (
        node: TSESTree.MetaProperty,
        parent: TSESTree.Node | null,
    ) => void
    MethodDefinition?: (
        node: TSESTree.MethodDefinition,
        parent: TSESTree.Node | null,
    ) => void
    NewExpression?: (
        node: TSESTree.NewExpression,
        parent: TSESTree.Node | null,
    ) => void
    ObjectExpression?: (
        node: TSESTree.ObjectExpression,
        parent: TSESTree.Node | null,
    ) => void
    ObjectPattern?: (
        node: TSESTree.ObjectPattern,
        parent: TSESTree.Node | null,
    ) => void
    PrivateIdentifier?: (
        node: TSESTree.PrivateIdentifier,
        parent: TSESTree.Node | null,
    ) => void
    Program?: (node: TSESTree.Program, parent: TSESTree.Node | null) => void
    Property?: (node: TSESTree.Property, parent: TSESTree.Node | null) => void
    PropertyDefinition?: (
        node: TSESTree.PropertyDefinition,
        parent: TSESTree.Node | null,
    ) => void
    RestElement?: (
        node: TSESTree.RestElement,
        parent: TSESTree.Node | null,
    ) => void
    ReturnStatement?: (
        node: TSESTree.ReturnStatement,
        parent: TSESTree.Node | null,
    ) => void
    SequenceExpression?: (
        node: TSESTree.SequenceExpression,
        parent: TSESTree.Node | null,
    ) => void
    SpreadElement?: (
        node: TSESTree.SpreadElement,
        parent: TSESTree.Node | null,
    ) => void
    StaticBlock?: (
        node: TSESTree.StaticBlock,
        parent: TSESTree.Node | null,
    ) => void
    Super?: (node: TSESTree.Super, parent: TSESTree.Node | null) => void
    SwitchCase?: (
        node: TSESTree.SwitchCase,
        parent: TSESTree.Node | null,
    ) => void
    SwitchStatement?: (
        node: TSESTree.SwitchStatement,
        parent: TSESTree.Node | null,
    ) => void
    TaggedTemplateExpression?: (
        node: TSESTree.TaggedTemplateExpression,
        parent: TSESTree.Node | null,
    ) => void
    TemplateElement?: (
        node: TSESTree.TemplateElement,
        parent: TSESTree.Node | null,
    ) => void
    TemplateLiteral?: (
        node: TSESTree.TemplateLiteral,
        parent: TSESTree.Node | null,
    ) => void
    ThisExpression?: (
        node: TSESTree.ThisExpression,
        parent: TSESTree.Node | null,
    ) => void
    ThrowStatement?: (
        node: TSESTree.ThrowStatement,
        parent: TSESTree.Node | null,
    ) => void
    TryStatement?: (
        node: TSESTree.TryStatement,
        parent: TSESTree.Node | null,
    ) => void
    UnaryExpression?: (
        node: TSESTree.UnaryExpression,
        parent: TSESTree.Node | null,
    ) => void
    UpdateExpression?: (
        node: TSESTree.UpdateExpression,
        parent: TSESTree.Node | null,
    ) => void
    VariableDeclaration?: (
        node: TSESTree.VariableDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    VariableDeclarator?: (
        node: TSESTree.VariableDeclarator,
        parent: TSESTree.Node | null,
    ) => void
    WhileStatement?: (
        node: TSESTree.WhileStatement,
        parent: TSESTree.Node | null,
    ) => void
    WithStatement?: (
        node: TSESTree.WithStatement,
        parent: TSESTree.Node | null,
    ) => void
    YieldExpression?: (
        node: TSESTree.YieldExpression,
        parent: TSESTree.Node | null,
    ) => void
    TSAbstractKeyword?: (
        node: TSESTree.TSAbstractKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSAbstractMethodDefinition?: (
        node: TSESTree.TSAbstractMethodDefinition,
        parent: TSESTree.Node | null,
    ) => void
    TSAbstractPropertyDefinition?: (
        node: TSESTree.TSAbstractPropertyDefinition,
        parent: TSESTree.Node | null,
    ) => void
    TSAnyKeyword?: (
        node: TSESTree.TSAnyKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSArrayType?: (
        node: TSESTree.TSArrayType,
        parent: TSESTree.Node | null,
    ) => void
    TSAsExpression?: (
        node: TSESTree.TSAsExpression,
        parent: TSESTree.Node | null,
    ) => void
    TSAsyncKeyword?: (
        node: TSESTree.TSAsyncKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSBigIntKeyword?: (
        node: TSESTree.TSBigIntKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSBooleanKeyword?: (
        node: TSESTree.TSBooleanKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSCallSignatureDeclaration?: (
        node: TSESTree.TSCallSignatureDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    TSClassImplements?: (
        node: TSESTree.TSClassImplements,
        parent: TSESTree.Node | null,
    ) => void
    TSConditionalType?: (
        node: TSESTree.TSConditionalType,
        parent: TSESTree.Node | null,
    ) => void
    TSConstructorType?: (
        node: TSESTree.TSConstructorType,
        parent: TSESTree.Node | null,
    ) => void
    TSConstructSignatureDeclaration?: (
        node: TSESTree.TSConstructSignatureDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    TSDeclareFunction?: (
        node: TSESTree.TSDeclareFunction,
        parent: TSESTree.Node | null,
    ) => void
    TSDeclareKeyword?: (
        node: TSESTree.TSDeclareKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSEmptyBodyFunctionExpression?: (
        node: TSESTree.TSEmptyBodyFunctionExpression,
        parent: TSESTree.Node | null,
    ) => void
    TSEnumDeclaration?: (
        node: TSESTree.TSEnumDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    TSEnumMember?: (
        node: TSESTree.TSEnumMember,
        parent: TSESTree.Node | null,
    ) => void
    TSExportAssignment?: (
        node: TSESTree.TSExportAssignment,
        parent: TSESTree.Node | null,
    ) => void
    TSExportKeyword?: (
        node: TSESTree.TSExportKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSExternalModuleReference?: (
        node: TSESTree.TSExternalModuleReference,
        parent: TSESTree.Node | null,
    ) => void
    TSFunctionType?: (
        node: TSESTree.TSFunctionType,
        parent: TSESTree.Node | null,
    ) => void
    TSImportEqualsDeclaration?: (
        node: TSESTree.TSImportEqualsDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    TSImportType?: (
        node: TSESTree.TSImportType,
        parent: TSESTree.Node | null,
    ) => void
    TSIndexedAccessType?: (
        node: TSESTree.TSIndexedAccessType,
        parent: TSESTree.Node | null,
    ) => void
    TSIndexSignature?: (
        node: TSESTree.TSIndexSignature,
        parent: TSESTree.Node | null,
    ) => void
    TSInferType?: (
        node: TSESTree.TSInferType,
        parent: TSESTree.Node | null,
    ) => void
    TSInterfaceBody?: (
        node: TSESTree.TSInterfaceBody,
        parent: TSESTree.Node | null,
    ) => void
    TSInterfaceDeclaration?: (
        node: TSESTree.TSInterfaceDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    TSInterfaceHeritage?: (
        node: TSESTree.TSInterfaceHeritage,
        parent: TSESTree.Node | null,
    ) => void
    TSIntersectionType?: (
        node: TSESTree.TSIntersectionType,
        parent: TSESTree.Node | null,
    ) => void
    TSIntrinsicKeyword?: (
        node: TSESTree.Node & { type: AST_NODE_TYPES.TSIntrinsicKeyword },
        parent: TSESTree.Node | null,
    ) => void
    TSLiteralType?: (
        node: TSESTree.TSLiteralType,
        parent: TSESTree.Node | null,
    ) => void
    TSMappedType?: (
        node: TSESTree.TSMappedType,
        parent: TSESTree.Node | null,
    ) => void
    TSMethodSignature?: (
        node: TSESTree.TSMethodSignature,
        parent: TSESTree.Node | null,
    ) => void
    TSModuleBlock?: (
        node: TSESTree.TSModuleBlock,
        parent: TSESTree.Node | null,
    ) => void
    TSModuleDeclaration?: (
        node: TSESTree.TSModuleDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    TSNamedTupleMember?: (
        node: TSESTree.TSNamedTupleMember,
        parent: TSESTree.Node | null,
    ) => void
    TSNamespaceExportDeclaration?: (
        node: TSESTree.TSNamespaceExportDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    TSNeverKeyword?: (
        node: TSESTree.TSNeverKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSNonNullExpression?: (
        node: TSESTree.TSNonNullExpression,
        parent: TSESTree.Node | null,
    ) => void
    TSNullKeyword?: (
        node: TSESTree.TSNullKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSNumberKeyword?: (
        node: TSESTree.TSNumberKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSObjectKeyword?: (
        node: TSESTree.TSObjectKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSOptionalType?: (
        node: TSESTree.TSOptionalType,
        parent: TSESTree.Node | null,
    ) => void
    TSParameterProperty?: (
        node: TSESTree.TSParameterProperty,
        parent: TSESTree.Node | null,
    ) => void
    TSPrivateKeyword?: (
        node: TSESTree.TSPrivateKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSPropertySignature?: (
        node: TSESTree.TSPropertySignature,
        parent: TSESTree.Node | null,
    ) => void
    TSProtectedKeyword?: (
        node: TSESTree.TSProtectedKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSPublicKeyword?: (
        node: TSESTree.TSPublicKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSQualifiedName?: (
        node: TSESTree.TSQualifiedName,
        parent: TSESTree.Node | null,
    ) => void
    TSReadonlyKeyword?: (
        node: TSESTree.TSReadonlyKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSRestType?: (
        node: TSESTree.TSRestType,
        parent: TSESTree.Node | null,
    ) => void
    TSStaticKeyword?: (
        node: TSESTree.TSStaticKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSStringKeyword?: (
        node: TSESTree.TSStringKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSSymbolKeyword?: (
        node: TSESTree.TSSymbolKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSTemplateLiteralType?: (
        node: TSESTree.TSTemplateLiteralType,
        parent: TSESTree.Node | null,
    ) => void
    TSThisType?: (
        node: TSESTree.TSThisType,
        parent: TSESTree.Node | null,
    ) => void
    TSTupleType?: (
        node: TSESTree.TSTupleType,
        parent: TSESTree.Node | null,
    ) => void
    TSTypeAliasDeclaration?: (
        node: TSESTree.TSTypeAliasDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    TSTypeAnnotation?: (
        node: TSESTree.TSTypeAnnotation,
        parent: TSESTree.Node | null,
    ) => void
    TSTypeAssertion?: (
        node: TSESTree.TSTypeAssertion,
        parent: TSESTree.Node | null,
    ) => void
    TSTypeLiteral?: (
        node: TSESTree.TSTypeLiteral,
        parent: TSESTree.Node | null,
    ) => void
    TSTypeOperator?: (
        node: TSESTree.TSTypeOperator,
        parent: TSESTree.Node | null,
    ) => void
    TSTypeParameter?: (
        node: TSESTree.TSTypeParameter,
        parent: TSESTree.Node | null,
    ) => void
    TSTypeParameterDeclaration?: (
        node: TSESTree.TSTypeParameterDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    TSTypeParameterInstantiation?: (
        node: TSESTree.TSTypeParameterInstantiation,
        parent: TSESTree.Node | null,
    ) => void
    TSTypePredicate?: (
        node: TSESTree.TSTypePredicate,
        parent: TSESTree.Node | null,
    ) => void
    TSTypeQuery?: (
        node: TSESTree.TSTypeQuery,
        parent: TSESTree.Node | null,
    ) => void
    TSTypeReference?: (
        node: TSESTree.TSTypeReference,
        parent: TSESTree.Node | null,
    ) => void
    TSUndefinedKeyword?: (
        node: TSESTree.TSUndefinedKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSUnionType?: (
        node: TSESTree.TSUnionType,
        parent: TSESTree.Node | null,
    ) => void
    TSUnknownKeyword?: (
        node: TSESTree.TSUnknownKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSVoidKeyword?: (
        node: TSESTree.TSVoidKeyword,
        parent: TSESTree.Node | null,
    ) => void
}
\` 1`] = `
Object {
  "operands": Array [
    "Visitor",
    "node",
    "TSESTree",
    "ArrayExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ArrayExpression",
    "node",
    "TSESTree",
    "ArrayPattern",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ArrayPattern",
    "node",
    "TSESTree",
    "ArrowFunctionExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ArrowFunctionExpression",
    "node",
    "TSESTree",
    "AssignmentExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "AssignmentExpression",
    "node",
    "TSESTree",
    "AssignmentPattern",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "AssignmentPattern",
    "node",
    "TSESTree",
    "AwaitExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "AwaitExpression",
    "node",
    "TSESTree",
    "BinaryExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "BinaryExpression",
    "node",
    "TSESTree",
    "BlockStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "BlockStatement",
    "node",
    "TSESTree",
    "BreakStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "BreakStatement",
    "node",
    "TSESTree",
    "CallExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "CallExpression",
    "node",
    "TSESTree",
    "CatchClause",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "CatchClause",
    "node",
    "TSESTree",
    "ChainExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ChainExpression",
    "node",
    "TSESTree",
    "ClassBody",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ClassBody",
    "node",
    "TSESTree",
    "ClassDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ClassDeclaration",
    "node",
    "TSESTree",
    "ClassExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ClassExpression",
    "node",
    "TSESTree",
    "ConditionalExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ConditionalExpression",
    "node",
    "TSESTree",
    "ContinueStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ContinueStatement",
    "node",
    "TSESTree",
    "DebuggerStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "DebuggerStatement",
    "node",
    "TSESTree",
    "Decorator",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "Decorator",
    "node",
    "TSESTree",
    "DoWhileStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "DoWhileStatement",
    "node",
    "TSESTree",
    "EmptyStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "EmptyStatement",
    "node",
    "TSESTree",
    "ExportAllDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ExportAllDeclaration",
    "node",
    "TSESTree",
    "ExportDefaultDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ExportDefaultDeclaration",
    "node",
    "TSESTree",
    "ExportNamedDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ExportNamedDeclaration",
    "node",
    "TSESTree",
    "ExportSpecifier",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ExportSpecifier",
    "node",
    "TSESTree",
    "ExpressionStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ExpressionStatement",
    "node",
    "TSESTree",
    "ForInStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ForInStatement",
    "node",
    "TSESTree",
    "ForOfStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ForOfStatement",
    "node",
    "TSESTree",
    "ForStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ForStatement",
    "node",
    "TSESTree",
    "FunctionDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "FunctionDeclaration",
    "node",
    "TSESTree",
    "FunctionExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "FunctionExpression",
    "node",
    "TSESTree",
    "Identifier",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "Identifier",
    "node",
    "TSESTree",
    "IfStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "IfStatement",
    "node",
    "TSESTree",
    "ImportAttribute",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ImportAttribute",
    "node",
    "TSESTree",
    "ImportDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ImportDeclaration",
    "node",
    "TSESTree",
    "ImportDefaultSpecifier",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ImportDefaultSpecifier",
    "node",
    "TSESTree",
    "ImportExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ImportExpression",
    "node",
    "TSESTree",
    "ImportNamespaceSpecifier",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ImportNamespaceSpecifier",
    "node",
    "TSESTree",
    "ImportSpecifier",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ImportSpecifier",
    "node",
    "TSESTree",
    "JSXAttribute",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXAttribute",
    "node",
    "TSESTree",
    "JSXClosingElement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXClosingElement",
    "node",
    "TSESTree",
    "JSXClosingFragment",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXClosingFragment",
    "node",
    "TSESTree",
    "JSXElement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXElement",
    "node",
    "TSESTree",
    "JSXEmptyExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXEmptyExpression",
    "node",
    "TSESTree",
    "JSXExpressionContainer",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXExpressionContainer",
    "node",
    "TSESTree",
    "JSXFragment",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXFragment",
    "node",
    "TSESTree",
    "JSXIdentifier",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXIdentifier",
    "node",
    "TSESTree",
    "JSXMemberExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXMemberExpression",
    "node",
    "TSESTree",
    "JSXNamespacedName",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXNamespacedName",
    "node",
    "TSESTree",
    "JSXOpeningElement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXOpeningElement",
    "node",
    "TSESTree",
    "JSXOpeningFragment",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXOpeningFragment",
    "node",
    "TSESTree",
    "JSXSpreadAttribute",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXSpreadAttribute",
    "node",
    "TSESTree",
    "JSXSpreadChild",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXSpreadChild",
    "node",
    "TSESTree",
    "JSXText",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXText",
    "node",
    "TSESTree",
    "LabeledStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "LabeledStatement",
    "node",
    "TSESTree",
    "Literal",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "Literal",
    "node",
    "TSESTree",
    "LogicalExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "LogicalExpression",
    "node",
    "TSESTree",
    "MemberExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "MemberExpression",
    "node",
    "TSESTree",
    "MetaProperty",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "MetaProperty",
    "node",
    "TSESTree",
    "MethodDefinition",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "MethodDefinition",
    "node",
    "TSESTree",
    "NewExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "NewExpression",
    "node",
    "TSESTree",
    "ObjectExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ObjectExpression",
    "node",
    "TSESTree",
    "ObjectPattern",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ObjectPattern",
    "node",
    "TSESTree",
    "PrivateIdentifier",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "PrivateIdentifier",
    "node",
    "TSESTree",
    "Program",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "Program",
    "node",
    "TSESTree",
    "Property",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "Property",
    "node",
    "TSESTree",
    "PropertyDefinition",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "PropertyDefinition",
    "node",
    "TSESTree",
    "RestElement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "RestElement",
    "node",
    "TSESTree",
    "ReturnStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ReturnStatement",
    "node",
    "TSESTree",
    "SequenceExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "SequenceExpression",
    "node",
    "TSESTree",
    "SpreadElement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "SpreadElement",
    "node",
    "TSESTree",
    "StaticBlock",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "StaticBlock",
    "node",
    "TSESTree",
    "Super",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "Super",
    "node",
    "TSESTree",
    "SwitchCase",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "SwitchCase",
    "node",
    "TSESTree",
    "SwitchStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "SwitchStatement",
    "node",
    "TSESTree",
    "TaggedTemplateExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TaggedTemplateExpression",
    "node",
    "TSESTree",
    "TemplateElement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TemplateElement",
    "node",
    "TSESTree",
    "TemplateLiteral",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TemplateLiteral",
    "node",
    "TSESTree",
    "ThisExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ThisExpression",
    "node",
    "TSESTree",
    "ThrowStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ThrowStatement",
    "node",
    "TSESTree",
    "TryStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TryStatement",
    "node",
    "TSESTree",
    "UnaryExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "UnaryExpression",
    "node",
    "TSESTree",
    "UpdateExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "UpdateExpression",
    "node",
    "TSESTree",
    "VariableDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "VariableDeclaration",
    "node",
    "TSESTree",
    "VariableDeclarator",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "VariableDeclarator",
    "node",
    "TSESTree",
    "WhileStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "WhileStatement",
    "node",
    "TSESTree",
    "WithStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "WithStatement",
    "node",
    "TSESTree",
    "YieldExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "YieldExpression",
    "node",
    "TSESTree",
    "TSAbstractKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSAbstractKeyword",
    "node",
    "TSESTree",
    "TSAbstractMethodDefinition",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSAbstractMethodDefinition",
    "node",
    "TSESTree",
    "TSAbstractPropertyDefinition",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSAbstractPropertyDefinition",
    "node",
    "TSESTree",
    "TSAnyKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSAnyKeyword",
    "node",
    "TSESTree",
    "TSArrayType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSArrayType",
    "node",
    "TSESTree",
    "TSAsExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSAsExpression",
    "node",
    "TSESTree",
    "TSAsyncKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSAsyncKeyword",
    "node",
    "TSESTree",
    "TSBigIntKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSBigIntKeyword",
    "node",
    "TSESTree",
    "TSBooleanKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSBooleanKeyword",
    "node",
    "TSESTree",
    "TSCallSignatureDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSCallSignatureDeclaration",
    "node",
    "TSESTree",
    "TSClassImplements",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSClassImplements",
    "node",
    "TSESTree",
    "TSConditionalType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSConditionalType",
    "node",
    "TSESTree",
    "TSConstructorType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSConstructorType",
    "node",
    "TSESTree",
    "TSConstructSignatureDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSConstructSignatureDeclaration",
    "node",
    "TSESTree",
    "TSDeclareFunction",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSDeclareFunction",
    "node",
    "TSESTree",
    "TSDeclareKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSDeclareKeyword",
    "node",
    "TSESTree",
    "TSEmptyBodyFunctionExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSEmptyBodyFunctionExpression",
    "node",
    "TSESTree",
    "TSEnumDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSEnumDeclaration",
    "node",
    "TSESTree",
    "TSEnumMember",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSEnumMember",
    "node",
    "TSESTree",
    "TSExportAssignment",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSExportAssignment",
    "node",
    "TSESTree",
    "TSExportKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSExportKeyword",
    "node",
    "TSESTree",
    "TSExternalModuleReference",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSExternalModuleReference",
    "node",
    "TSESTree",
    "TSFunctionType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSFunctionType",
    "node",
    "TSESTree",
    "TSImportEqualsDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSImportEqualsDeclaration",
    "node",
    "TSESTree",
    "TSImportType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSImportType",
    "node",
    "TSESTree",
    "TSIndexedAccessType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSIndexedAccessType",
    "node",
    "TSESTree",
    "TSIndexSignature",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSIndexSignature",
    "node",
    "TSESTree",
    "TSInferType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSInferType",
    "node",
    "TSESTree",
    "TSInterfaceBody",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSInterfaceBody",
    "node",
    "TSESTree",
    "TSInterfaceDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSInterfaceDeclaration",
    "node",
    "TSESTree",
    "TSInterfaceHeritage",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSInterfaceHeritage",
    "node",
    "TSESTree",
    "TSIntersectionType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSIntersectionType",
    "node",
    "TSESTree",
    "Node",
    "AST_NODE_TYPES",
    "TSIntrinsicKeyword",
    "type",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSIntrinsicKeyword",
    "node",
    "TSESTree",
    "TSLiteralType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSLiteralType",
    "node",
    "TSESTree",
    "TSMappedType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSMappedType",
    "node",
    "TSESTree",
    "TSMethodSignature",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSMethodSignature",
    "node",
    "TSESTree",
    "TSModuleBlock",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSModuleBlock",
    "node",
    "TSESTree",
    "TSModuleDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSModuleDeclaration",
    "node",
    "TSESTree",
    "TSNamedTupleMember",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSNamedTupleMember",
    "node",
    "TSESTree",
    "TSNamespaceExportDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSNamespaceExportDeclaration",
    "node",
    "TSESTree",
    "TSNeverKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSNeverKeyword",
    "node",
    "TSESTree",
    "TSNonNullExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSNonNullExpression",
    "node",
    "TSESTree",
    "TSNullKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSNullKeyword",
    "node",
    "TSESTree",
    "TSNumberKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSNumberKeyword",
    "node",
    "TSESTree",
    "TSObjectKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSObjectKeyword",
    "node",
    "TSESTree",
    "TSOptionalType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSOptionalType",
    "node",
    "TSESTree",
    "TSParameterProperty",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSParameterProperty",
    "node",
    "TSESTree",
    "TSPrivateKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSPrivateKeyword",
    "node",
    "TSESTree",
    "TSPropertySignature",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSPropertySignature",
    "node",
    "TSESTree",
    "TSProtectedKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSProtectedKeyword",
    "node",
    "TSESTree",
    "TSPublicKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSPublicKeyword",
    "node",
    "TSESTree",
    "TSQualifiedName",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSQualifiedName",
    "node",
    "TSESTree",
    "TSReadonlyKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSReadonlyKeyword",
    "node",
    "TSESTree",
    "TSRestType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSRestType",
    "node",
    "TSESTree",
    "TSStaticKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSStaticKeyword",
    "node",
    "TSESTree",
    "TSStringKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSStringKeyword",
    "node",
    "TSESTree",
    "TSSymbolKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSSymbolKeyword",
    "node",
    "TSESTree",
    "TSTemplateLiteralType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTemplateLiteralType",
    "node",
    "TSESTree",
    "TSThisType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSThisType",
    "node",
    "TSESTree",
    "TSTupleType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTupleType",
    "node",
    "TSESTree",
    "TSTypeAliasDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTypeAliasDeclaration",
    "node",
    "TSESTree",
    "TSTypeAnnotation",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTypeAnnotation",
    "node",
    "TSESTree",
    "TSTypeAssertion",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTypeAssertion",
    "node",
    "TSESTree",
    "TSTypeLiteral",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTypeLiteral",
    "node",
    "TSESTree",
    "TSTypeOperator",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTypeOperator",
    "node",
    "TSESTree",
    "TSTypeParameter",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTypeParameter",
    "node",
    "TSESTree",
    "TSTypeParameterDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTypeParameterDeclaration",
    "node",
    "TSESTree",
    "TSTypeParameterInstantiation",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTypeParameterInstantiation",
    "node",
    "TSESTree",
    "TSTypePredicate",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTypePredicate",
    "node",
    "TSESTree",
    "TSTypeQuery",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTypeQuery",
    "node",
    "TSESTree",
    "TSTypeReference",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTypeReference",
    "node",
    "TSESTree",
    "TSUndefinedKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSUndefinedKeyword",
    "node",
    "TSESTree",
    "TSUnionType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSUnionType",
    "node",
    "TSESTree",
    "TSUnknownKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSUnknownKeyword",
    "node",
    "TSESTree",
    "TSVoidKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSVoidKeyword",
  ],
  "operators": Array [
    "type",
    "=",
    "{}",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    "&",
    ".",
    "{}",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.ArrayExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ArrayExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.ArrayPattern,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ArrayPattern",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.ArrowFunctionExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ArrowFunctionExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.AssignmentExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "AssignmentExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.AssignmentPattern,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "AssignmentPattern",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.AwaitExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "AwaitExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.BinaryExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "BinaryExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.BlockStatement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "BlockStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.BreakStatement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "BreakStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.CallExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "CallExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.CatchClause,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "CatchClause",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.ChainExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ChainExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.ClassDeclaration,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ClassDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.ClassExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ClassExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.ConditionalExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ConditionalExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.ContinueStatement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ContinueStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.DebuggerStatement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "DebuggerStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.DoWhileStatement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "DoWhileStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.EmptyStatement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "EmptyStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.ExportAllDeclaration,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ExportAllDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.ExportDefaultDeclaration,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ExportDefaultDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.ExportNamedDeclaration,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ExportNamedDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.ExportSpecifier,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ExportSpecifier",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.ExpressionStatement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ExpressionStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.ForInStatement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ForInStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.ForOfStatement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ForOfStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.ForStatement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ForStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.FunctionDeclaration,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "FunctionDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.FunctionExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "FunctionExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.Identifier,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "Identifier",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.IfStatement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "IfStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.ImportAttribute,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ImportAttribute",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.ImportDeclaration,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ImportDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.ImportDefaultSpecifier,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ImportDefaultSpecifier",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.ImportExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ImportExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.ImportNamespaceSpecifier,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ImportNamespaceSpecifier",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.ImportSpecifier,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ImportSpecifier",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.JSXAttribute,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "JSXAttribute",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.JSXClosingElement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "JSXClosingElement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.JSXClosingFragment,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "JSXClosingFragment",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.JSXElement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "JSXElement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.JSXEmptyExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "JSXEmptyExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.JSXExpressionContainer,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "JSXExpressionContainer",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.JSXFragment,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "JSXFragment",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.JSXIdentifier,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "JSXIdentifier",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.JSXMemberExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "JSXMemberExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.JSXNamespacedName,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "JSXNamespacedName",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.JSXOpeningElement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "JSXOpeningElement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.JSXOpeningFragment,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "JSXOpeningFragment",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.JSXSpreadAttribute,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "JSXSpreadAttribute",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.JSXSpreadChild,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "JSXSpreadChild",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.LabeledStatement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "LabeledStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.LogicalExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "LogicalExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.MemberExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "MemberExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.MetaProperty,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "MetaProperty",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.MethodDefinition,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "MethodDefinition",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.NewExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "NewExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.Node & { type: AST_NODE_TYPES.TSIntrinsicKeyword },
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "Node",
    "AST_NODE_TYPES",
    "TSIntrinsicKeyword",
    "type",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    "&",
    ".",
    "{}",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.ObjectExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ObjectExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.ObjectPattern,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ObjectPattern",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.PrivateIdentifier,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "PrivateIdentifier",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.PropertyDefinition,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "PropertyDefinition",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.RestElement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "RestElement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.ReturnStatement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ReturnStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.SequenceExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "SequenceExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.SpreadElement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "SpreadElement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.StaticBlock,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "StaticBlock",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.SwitchCase,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "SwitchCase",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.SwitchStatement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "SwitchStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSAbstractKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSAbstractKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSAbstractMethodDefinition,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSAbstractMethodDefinition",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSAbstractPropertyDefinition,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSAbstractPropertyDefinition",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSAnyKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSAnyKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSArrayType,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSArrayType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSAsExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSAsExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSAsyncKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSAsyncKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSBigIntKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSBigIntKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSBooleanKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSBooleanKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSCallSignatureDeclaration,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSCallSignatureDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSClassImplements,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSClassImplements",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSConditionalType,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSConditionalType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSConstructSignatureDeclaration,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSConstructSignatureDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSConstructorType,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSConstructorType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSDeclareFunction,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSDeclareFunction",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSDeclareKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSDeclareKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSEmptyBodyFunctionExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSEmptyBodyFunctionExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSEnumDeclaration,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSEnumDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSEnumMember,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSEnumMember",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSExportAssignment,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSExportAssignment",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSExportKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSExportKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSExternalModuleReference,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSExternalModuleReference",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSFunctionType,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSFunctionType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSImportEqualsDeclaration,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSImportEqualsDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSImportType,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSImportType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSIndexSignature,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSIndexSignature",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSIndexedAccessType,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSIndexedAccessType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSInferType,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSInferType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSInterfaceBody,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSInterfaceBody",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSInterfaceDeclaration,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSInterfaceDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSInterfaceHeritage,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSInterfaceHeritage",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSIntersectionType,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSIntersectionType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSLiteralType,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSLiteralType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSMappedType,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSMappedType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSMethodSignature,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSMethodSignature",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSModuleBlock,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSModuleBlock",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSModuleDeclaration,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSModuleDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSNamedTupleMember,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSNamedTupleMember",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSNamespaceExportDeclaration,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSNamespaceExportDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSNeverKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSNeverKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSNonNullExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSNonNullExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSNullKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSNullKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSNumberKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSNumberKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSObjectKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSObjectKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSOptionalType,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSOptionalType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSParameterProperty,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSParameterProperty",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSPrivateKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSPrivateKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSPropertySignature,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSPropertySignature",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSProtectedKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSProtectedKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSPublicKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSPublicKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSQualifiedName,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSQualifiedName",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSReadonlyKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSReadonlyKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSRestType,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSRestType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSStaticKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSStaticKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSStringKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSStringKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSSymbolKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSSymbolKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSTemplateLiteralType,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSTemplateLiteralType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSThisType,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSThisType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSTupleType,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSTupleType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSTypeAliasDeclaration,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSTypeAliasDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSTypeAnnotation,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSTypeAnnotation",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSTypeAssertion,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSTypeAssertion",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSTypeLiteral,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSTypeLiteral",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSTypeOperator,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSTypeOperator",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSTypeParameter,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSTypeParameter",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSTypeParameterDeclaration,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSTypeParameterDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSTypeParameterInstantiation,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSTypeParameterInstantiation",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSTypePredicate,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSTypePredicate",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSTypeQuery,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSTypeQuery",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSTypeReference,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSTypeReference",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSUndefinedKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSUndefinedKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSUnionType,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSUnionType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSUnknownKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSUnknownKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TSVoidKeyword,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TSVoidKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TaggedTemplateExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TaggedTemplateExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TemplateElement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TemplateElement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TemplateLiteral,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TemplateLiteral",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.ThisExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ThisExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.ThrowStatement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ThrowStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.TryStatement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "TryStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.UnaryExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "UnaryExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.UpdateExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "UpdateExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.VariableDeclaration,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "VariableDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.VariableDeclarator,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "VariableDeclarator",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.WhileStatement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "WhileStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.WithStatement,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "WithStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (
        node: TSESTree.YieldExpression,
        parent: TSESTree.Node | null,
    ) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "YieldExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (node: TSESTree.ClassBody, parent: TSESTree.Node | null) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ClassBody",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (node: TSESTree.Decorator, parent: TSESTree.Node | null) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "Decorator",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (node: TSESTree.JSXText, parent: TSESTree.Node | null) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "JSXText",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (node: TSESTree.Literal, parent: TSESTree.Node | null) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "Literal",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (node: TSESTree.Program, parent: TSESTree.Node | null) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "Program",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (node: TSESTree.Property, parent: TSESTree.Node | null) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "Property",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: (node: TSESTree.Super, parent: TSESTree.Node | null) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "Super",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: AST_NODE_TYPES.TSIntrinsicKeyword
\` 1`] = `
Object {
  "operands": Array [
    "AST_NODE_TYPES",
    "TSIntrinsicKeyword",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.ArrayExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ArrayExpression",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.ArrayPattern
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ArrayPattern",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.ArrowFunctionExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ArrowFunctionExpression",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.AssignmentExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "AssignmentExpression",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.AssignmentPattern
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "AssignmentPattern",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.AwaitExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "AwaitExpression",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.BinaryExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "BinaryExpression",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.BlockStatement
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "BlockStatement",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.BreakStatement
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "BreakStatement",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.CallExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "CallExpression",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.CatchClause
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "CatchClause",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.ChainExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ChainExpression",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.ClassBody
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ClassBody",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.ClassDeclaration
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ClassDeclaration",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.ClassExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ClassExpression",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.ConditionalExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ConditionalExpression",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.ContinueStatement
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ContinueStatement",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.DebuggerStatement
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "DebuggerStatement",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.Decorator
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "Decorator",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.DoWhileStatement
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "DoWhileStatement",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.EmptyStatement
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "EmptyStatement",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.ExportAllDeclaration
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ExportAllDeclaration",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.ExportDefaultDeclaration
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ExportDefaultDeclaration",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.ExportNamedDeclaration
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ExportNamedDeclaration",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.ExportSpecifier
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ExportSpecifier",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.ExpressionStatement
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ExpressionStatement",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.ForInStatement
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ForInStatement",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.ForOfStatement
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ForOfStatement",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.ForStatement
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ForStatement",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.FunctionDeclaration
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "FunctionDeclaration",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.FunctionExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "FunctionExpression",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.Identifier
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "Identifier",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.IfStatement
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "IfStatement",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.ImportAttribute
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ImportAttribute",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.ImportDeclaration
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ImportDeclaration",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.ImportDefaultSpecifier
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ImportDefaultSpecifier",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.ImportExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ImportExpression",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.ImportNamespaceSpecifier
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ImportNamespaceSpecifier",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.ImportSpecifier
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ImportSpecifier",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.JSXAttribute
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "JSXAttribute",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.JSXClosingElement
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "JSXClosingElement",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.JSXClosingFragment
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "JSXClosingFragment",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.JSXElement
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "JSXElement",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.JSXEmptyExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "JSXEmptyExpression",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.JSXExpressionContainer
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "JSXExpressionContainer",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.JSXFragment
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "JSXFragment",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.JSXIdentifier
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "JSXIdentifier",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.JSXMemberExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "JSXMemberExpression",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.JSXNamespacedName
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "JSXNamespacedName",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.JSXOpeningElement
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "JSXOpeningElement",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.JSXOpeningFragment
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "JSXOpeningFragment",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.JSXSpreadAttribute
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "JSXSpreadAttribute",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.JSXSpreadChild
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "JSXSpreadChild",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.JSXText
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "JSXText",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.LabeledStatement
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "LabeledStatement",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.Literal
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "Literal",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.LogicalExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "LogicalExpression",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.MemberExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "MemberExpression",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.MetaProperty
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "MetaProperty",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.MethodDefinition
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "MethodDefinition",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.NewExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "NewExpression",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.Node & { type: AST_NODE_TYPES.TSIntrinsicKeyword }
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "Node",
    "AST_NODE_TYPES",
    "TSIntrinsicKeyword",
    "type",
  ],
  "operators": Array [
    ":",
    "&",
    ".",
    "{}",
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.Node | null
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "Node",
    "null",
  ],
  "operators": Array [
    ":",
    "|",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.ObjectExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ObjectExpression",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.ObjectPattern
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ObjectPattern",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.PrivateIdentifier
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "PrivateIdentifier",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.Program
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "Program",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.Property
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "Property",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.PropertyDefinition
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "PropertyDefinition",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.RestElement
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "RestElement",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.ReturnStatement
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ReturnStatement",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.SequenceExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "SequenceExpression",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.SpreadElement
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "SpreadElement",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.StaticBlock
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "StaticBlock",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.Super
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "Super",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.SwitchCase
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "SwitchCase",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.SwitchStatement
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "SwitchStatement",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSAbstractKeyword
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSAbstractKeyword",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSAbstractMethodDefinition
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSAbstractMethodDefinition",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSAbstractPropertyDefinition
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSAbstractPropertyDefinition",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSAnyKeyword
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSAnyKeyword",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSArrayType
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSArrayType",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSAsExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSAsExpression",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSAsyncKeyword
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSAsyncKeyword",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSBigIntKeyword
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSBigIntKeyword",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSBooleanKeyword
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSBooleanKeyword",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSCallSignatureDeclaration
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSCallSignatureDeclaration",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSClassImplements
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSClassImplements",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSConditionalType
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSConditionalType",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSConstructSignatureDeclaration
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSConstructSignatureDeclaration",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSConstructorType
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSConstructorType",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSDeclareFunction
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSDeclareFunction",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSDeclareKeyword
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSDeclareKeyword",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSEmptyBodyFunctionExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSEmptyBodyFunctionExpression",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSEnumDeclaration
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSEnumDeclaration",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSEnumMember
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSEnumMember",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSExportAssignment
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSExportAssignment",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSExportKeyword
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSExportKeyword",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSExternalModuleReference
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSExternalModuleReference",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSFunctionType
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSFunctionType",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSImportEqualsDeclaration
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSImportEqualsDeclaration",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSImportType
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSImportType",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSIndexSignature
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSIndexSignature",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSIndexedAccessType
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSIndexedAccessType",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSInferType
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSInferType",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSInterfaceBody
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSInterfaceBody",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSInterfaceDeclaration
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSInterfaceDeclaration",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSInterfaceHeritage
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSInterfaceHeritage",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSIntersectionType
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSIntersectionType",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSLiteralType
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSLiteralType",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSMappedType
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSMappedType",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSMethodSignature
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSMethodSignature",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSModuleBlock
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSModuleBlock",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSModuleDeclaration
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSModuleDeclaration",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSNamedTupleMember
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSNamedTupleMember",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSNamespaceExportDeclaration
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSNamespaceExportDeclaration",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSNeverKeyword
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSNeverKeyword",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSNonNullExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSNonNullExpression",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSNullKeyword
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSNullKeyword",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSNumberKeyword
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSNumberKeyword",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSObjectKeyword
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSObjectKeyword",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSOptionalType
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSOptionalType",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSParameterProperty
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSParameterProperty",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSPrivateKeyword
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSPrivateKeyword",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSPropertySignature
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSPropertySignature",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSProtectedKeyword
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSProtectedKeyword",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSPublicKeyword
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSPublicKeyword",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSQualifiedName
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSQualifiedName",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSReadonlyKeyword
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSReadonlyKeyword",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSRestType
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSRestType",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSStaticKeyword
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSStaticKeyword",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSStringKeyword
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSStringKeyword",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSSymbolKeyword
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSSymbolKeyword",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSTemplateLiteralType
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSTemplateLiteralType",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSThisType
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSThisType",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSTupleType
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSTupleType",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSTypeAliasDeclaration
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSTypeAliasDeclaration",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSTypeAnnotation
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSTypeAnnotation",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSTypeAssertion
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSTypeAssertion",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSTypeLiteral
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSTypeLiteral",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSTypeOperator
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSTypeOperator",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSTypeParameter
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSTypeParameter",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSTypeParameterDeclaration
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSTypeParameterDeclaration",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSTypeParameterInstantiation
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSTypeParameterInstantiation",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSTypePredicate
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSTypePredicate",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSTypeQuery
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSTypeQuery",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSTypeReference
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSTypeReference",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSUndefinedKeyword
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSUndefinedKeyword",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSUnionType
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSUnionType",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSUnknownKeyword
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSUnknownKeyword",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TSVoidKeyword
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSVoidKeyword",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TaggedTemplateExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TaggedTemplateExpression",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TemplateElement
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TemplateElement",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TemplateLiteral
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TemplateLiteral",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.ThisExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ThisExpression",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.ThrowStatement
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ThrowStatement",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.TryStatement
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TryStatement",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.UnaryExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "UnaryExpression",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.UpdateExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "UpdateExpression",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.VariableDeclaration
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "VariableDeclaration",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.VariableDeclarator
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "VariableDeclarator",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.WhileStatement
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "WhileStatement",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.WithStatement
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "WithStatement",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
: TSESTree.YieldExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "YieldExpression",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeAnnotation\`
=> void
\` 1`] = `
Object {
  "operands": Array [
    "void",
  ],
  "operators": Array [
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeLiteral\`
{
    ArrayExpression?: (
        node: TSESTree.ArrayExpression,
        parent: TSESTree.Node | null,
    ) => void
    ArrayPattern?: (
        node: TSESTree.ArrayPattern,
        parent: TSESTree.Node | null,
    ) => void
    ArrowFunctionExpression?: (
        node: TSESTree.ArrowFunctionExpression,
        parent: TSESTree.Node | null,
    ) => void
    AssignmentExpression?: (
        node: TSESTree.AssignmentExpression,
        parent: TSESTree.Node | null,
    ) => void
    AssignmentPattern?: (
        node: TSESTree.AssignmentPattern,
        parent: TSESTree.Node | null,
    ) => void
    AwaitExpression?: (
        node: TSESTree.AwaitExpression,
        parent: TSESTree.Node | null,
    ) => void
    BinaryExpression?: (
        node: TSESTree.BinaryExpression,
        parent: TSESTree.Node | null,
    ) => void
    BlockStatement?: (
        node: TSESTree.BlockStatement,
        parent: TSESTree.Node | null,
    ) => void
    BreakStatement?: (
        node: TSESTree.BreakStatement,
        parent: TSESTree.Node | null,
    ) => void
    CallExpression?: (
        node: TSESTree.CallExpression,
        parent: TSESTree.Node | null,
    ) => void
    CatchClause?: (
        node: TSESTree.CatchClause,
        parent: TSESTree.Node | null,
    ) => void
    ChainExpression?: (
        node: TSESTree.ChainExpression,
        parent: TSESTree.Node | null,
    ) => void
    ClassBody?: (node: TSESTree.ClassBody, parent: TSESTree.Node | null) => void
    ClassDeclaration?: (
        node: TSESTree.ClassDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    ClassExpression?: (
        node: TSESTree.ClassExpression,
        parent: TSESTree.Node | null,
    ) => void
    ConditionalExpression?: (
        node: TSESTree.ConditionalExpression,
        parent: TSESTree.Node | null,
    ) => void
    ContinueStatement?: (
        node: TSESTree.ContinueStatement,
        parent: TSESTree.Node | null,
    ) => void
    DebuggerStatement?: (
        node: TSESTree.DebuggerStatement,
        parent: TSESTree.Node | null,
    ) => void
    Decorator?: (node: TSESTree.Decorator, parent: TSESTree.Node | null) => void
    DoWhileStatement?: (
        node: TSESTree.DoWhileStatement,
        parent: TSESTree.Node | null,
    ) => void
    EmptyStatement?: (
        node: TSESTree.EmptyStatement,
        parent: TSESTree.Node | null,
    ) => void
    ExportAllDeclaration?: (
        node: TSESTree.ExportAllDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    ExportDefaultDeclaration?: (
        node: TSESTree.ExportDefaultDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    ExportNamedDeclaration?: (
        node: TSESTree.ExportNamedDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    ExportSpecifier?: (
        node: TSESTree.ExportSpecifier,
        parent: TSESTree.Node | null,
    ) => void
    ExpressionStatement?: (
        node: TSESTree.ExpressionStatement,
        parent: TSESTree.Node | null,
    ) => void
    ForInStatement?: (
        node: TSESTree.ForInStatement,
        parent: TSESTree.Node | null,
    ) => void
    ForOfStatement?: (
        node: TSESTree.ForOfStatement,
        parent: TSESTree.Node | null,
    ) => void
    ForStatement?: (
        node: TSESTree.ForStatement,
        parent: TSESTree.Node | null,
    ) => void
    FunctionDeclaration?: (
        node: TSESTree.FunctionDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    FunctionExpression?: (
        node: TSESTree.FunctionExpression,
        parent: TSESTree.Node | null,
    ) => void
    Identifier?: (
        node: TSESTree.Identifier,
        parent: TSESTree.Node | null,
    ) => void
    IfStatement?: (
        node: TSESTree.IfStatement,
        parent: TSESTree.Node | null,
    ) => void
    ImportAttribute?: (
        node: TSESTree.ImportAttribute,
        parent: TSESTree.Node | null,
    ) => void
    ImportDeclaration?: (
        node: TSESTree.ImportDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    ImportDefaultSpecifier?: (
        node: TSESTree.ImportDefaultSpecifier,
        parent: TSESTree.Node | null,
    ) => void
    ImportExpression?: (
        node: TSESTree.ImportExpression,
        parent: TSESTree.Node | null,
    ) => void
    ImportNamespaceSpecifier?: (
        node: TSESTree.ImportNamespaceSpecifier,
        parent: TSESTree.Node | null,
    ) => void
    ImportSpecifier?: (
        node: TSESTree.ImportSpecifier,
        parent: TSESTree.Node | null,
    ) => void
    JSXAttribute?: (
        node: TSESTree.JSXAttribute,
        parent: TSESTree.Node | null,
    ) => void
    JSXClosingElement?: (
        node: TSESTree.JSXClosingElement,
        parent: TSESTree.Node | null,
    ) => void
    JSXClosingFragment?: (
        node: TSESTree.JSXClosingFragment,
        parent: TSESTree.Node | null,
    ) => void
    JSXElement?: (
        node: TSESTree.JSXElement,
        parent: TSESTree.Node | null,
    ) => void
    JSXEmptyExpression?: (
        node: TSESTree.JSXEmptyExpression,
        parent: TSESTree.Node | null,
    ) => void
    JSXExpressionContainer?: (
        node: TSESTree.JSXExpressionContainer,
        parent: TSESTree.Node | null,
    ) => void
    JSXFragment?: (
        node: TSESTree.JSXFragment,
        parent: TSESTree.Node | null,
    ) => void
    JSXIdentifier?: (
        node: TSESTree.JSXIdentifier,
        parent: TSESTree.Node | null,
    ) => void
    JSXMemberExpression?: (
        node: TSESTree.JSXMemberExpression,
        parent: TSESTree.Node | null,
    ) => void
    JSXNamespacedName?: (
        node: TSESTree.JSXNamespacedName,
        parent: TSESTree.Node | null,
    ) => void
    JSXOpeningElement?: (
        node: TSESTree.JSXOpeningElement,
        parent: TSESTree.Node | null,
    ) => void
    JSXOpeningFragment?: (
        node: TSESTree.JSXOpeningFragment,
        parent: TSESTree.Node | null,
    ) => void
    JSXSpreadAttribute?: (
        node: TSESTree.JSXSpreadAttribute,
        parent: TSESTree.Node | null,
    ) => void
    JSXSpreadChild?: (
        node: TSESTree.JSXSpreadChild,
        parent: TSESTree.Node | null,
    ) => void
    JSXText?: (node: TSESTree.JSXText, parent: TSESTree.Node | null) => void
    LabeledStatement?: (
        node: TSESTree.LabeledStatement,
        parent: TSESTree.Node | null,
    ) => void
    Literal?: (node: TSESTree.Literal, parent: TSESTree.Node | null) => void
    LogicalExpression?: (
        node: TSESTree.LogicalExpression,
        parent: TSESTree.Node | null,
    ) => void
    MemberExpression?: (
        node: TSESTree.MemberExpression,
        parent: TSESTree.Node | null,
    ) => void
    MetaProperty?: (
        node: TSESTree.MetaProperty,
        parent: TSESTree.Node | null,
    ) => void
    MethodDefinition?: (
        node: TSESTree.MethodDefinition,
        parent: TSESTree.Node | null,
    ) => void
    NewExpression?: (
        node: TSESTree.NewExpression,
        parent: TSESTree.Node | null,
    ) => void
    ObjectExpression?: (
        node: TSESTree.ObjectExpression,
        parent: TSESTree.Node | null,
    ) => void
    ObjectPattern?: (
        node: TSESTree.ObjectPattern,
        parent: TSESTree.Node | null,
    ) => void
    PrivateIdentifier?: (
        node: TSESTree.PrivateIdentifier,
        parent: TSESTree.Node | null,
    ) => void
    Program?: (node: TSESTree.Program, parent: TSESTree.Node | null) => void
    Property?: (node: TSESTree.Property, parent: TSESTree.Node | null) => void
    PropertyDefinition?: (
        node: TSESTree.PropertyDefinition,
        parent: TSESTree.Node | null,
    ) => void
    RestElement?: (
        node: TSESTree.RestElement,
        parent: TSESTree.Node | null,
    ) => void
    ReturnStatement?: (
        node: TSESTree.ReturnStatement,
        parent: TSESTree.Node | null,
    ) => void
    SequenceExpression?: (
        node: TSESTree.SequenceExpression,
        parent: TSESTree.Node | null,
    ) => void
    SpreadElement?: (
        node: TSESTree.SpreadElement,
        parent: TSESTree.Node | null,
    ) => void
    StaticBlock?: (
        node: TSESTree.StaticBlock,
        parent: TSESTree.Node | null,
    ) => void
    Super?: (node: TSESTree.Super, parent: TSESTree.Node | null) => void
    SwitchCase?: (
        node: TSESTree.SwitchCase,
        parent: TSESTree.Node | null,
    ) => void
    SwitchStatement?: (
        node: TSESTree.SwitchStatement,
        parent: TSESTree.Node | null,
    ) => void
    TaggedTemplateExpression?: (
        node: TSESTree.TaggedTemplateExpression,
        parent: TSESTree.Node | null,
    ) => void
    TemplateElement?: (
        node: TSESTree.TemplateElement,
        parent: TSESTree.Node | null,
    ) => void
    TemplateLiteral?: (
        node: TSESTree.TemplateLiteral,
        parent: TSESTree.Node | null,
    ) => void
    ThisExpression?: (
        node: TSESTree.ThisExpression,
        parent: TSESTree.Node | null,
    ) => void
    ThrowStatement?: (
        node: TSESTree.ThrowStatement,
        parent: TSESTree.Node | null,
    ) => void
    TryStatement?: (
        node: TSESTree.TryStatement,
        parent: TSESTree.Node | null,
    ) => void
    UnaryExpression?: (
        node: TSESTree.UnaryExpression,
        parent: TSESTree.Node | null,
    ) => void
    UpdateExpression?: (
        node: TSESTree.UpdateExpression,
        parent: TSESTree.Node | null,
    ) => void
    VariableDeclaration?: (
        node: TSESTree.VariableDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    VariableDeclarator?: (
        node: TSESTree.VariableDeclarator,
        parent: TSESTree.Node | null,
    ) => void
    WhileStatement?: (
        node: TSESTree.WhileStatement,
        parent: TSESTree.Node | null,
    ) => void
    WithStatement?: (
        node: TSESTree.WithStatement,
        parent: TSESTree.Node | null,
    ) => void
    YieldExpression?: (
        node: TSESTree.YieldExpression,
        parent: TSESTree.Node | null,
    ) => void
    TSAbstractKeyword?: (
        node: TSESTree.TSAbstractKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSAbstractMethodDefinition?: (
        node: TSESTree.TSAbstractMethodDefinition,
        parent: TSESTree.Node | null,
    ) => void
    TSAbstractPropertyDefinition?: (
        node: TSESTree.TSAbstractPropertyDefinition,
        parent: TSESTree.Node | null,
    ) => void
    TSAnyKeyword?: (
        node: TSESTree.TSAnyKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSArrayType?: (
        node: TSESTree.TSArrayType,
        parent: TSESTree.Node | null,
    ) => void
    TSAsExpression?: (
        node: TSESTree.TSAsExpression,
        parent: TSESTree.Node | null,
    ) => void
    TSAsyncKeyword?: (
        node: TSESTree.TSAsyncKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSBigIntKeyword?: (
        node: TSESTree.TSBigIntKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSBooleanKeyword?: (
        node: TSESTree.TSBooleanKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSCallSignatureDeclaration?: (
        node: TSESTree.TSCallSignatureDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    TSClassImplements?: (
        node: TSESTree.TSClassImplements,
        parent: TSESTree.Node | null,
    ) => void
    TSConditionalType?: (
        node: TSESTree.TSConditionalType,
        parent: TSESTree.Node | null,
    ) => void
    TSConstructorType?: (
        node: TSESTree.TSConstructorType,
        parent: TSESTree.Node | null,
    ) => void
    TSConstructSignatureDeclaration?: (
        node: TSESTree.TSConstructSignatureDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    TSDeclareFunction?: (
        node: TSESTree.TSDeclareFunction,
        parent: TSESTree.Node | null,
    ) => void
    TSDeclareKeyword?: (
        node: TSESTree.TSDeclareKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSEmptyBodyFunctionExpression?: (
        node: TSESTree.TSEmptyBodyFunctionExpression,
        parent: TSESTree.Node | null,
    ) => void
    TSEnumDeclaration?: (
        node: TSESTree.TSEnumDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    TSEnumMember?: (
        node: TSESTree.TSEnumMember,
        parent: TSESTree.Node | null,
    ) => void
    TSExportAssignment?: (
        node: TSESTree.TSExportAssignment,
        parent: TSESTree.Node | null,
    ) => void
    TSExportKeyword?: (
        node: TSESTree.TSExportKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSExternalModuleReference?: (
        node: TSESTree.TSExternalModuleReference,
        parent: TSESTree.Node | null,
    ) => void
    TSFunctionType?: (
        node: TSESTree.TSFunctionType,
        parent: TSESTree.Node | null,
    ) => void
    TSImportEqualsDeclaration?: (
        node: TSESTree.TSImportEqualsDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    TSImportType?: (
        node: TSESTree.TSImportType,
        parent: TSESTree.Node | null,
    ) => void
    TSIndexedAccessType?: (
        node: TSESTree.TSIndexedAccessType,
        parent: TSESTree.Node | null,
    ) => void
    TSIndexSignature?: (
        node: TSESTree.TSIndexSignature,
        parent: TSESTree.Node | null,
    ) => void
    TSInferType?: (
        node: TSESTree.TSInferType,
        parent: TSESTree.Node | null,
    ) => void
    TSInterfaceBody?: (
        node: TSESTree.TSInterfaceBody,
        parent: TSESTree.Node | null,
    ) => void
    TSInterfaceDeclaration?: (
        node: TSESTree.TSInterfaceDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    TSInterfaceHeritage?: (
        node: TSESTree.TSInterfaceHeritage,
        parent: TSESTree.Node | null,
    ) => void
    TSIntersectionType?: (
        node: TSESTree.TSIntersectionType,
        parent: TSESTree.Node | null,
    ) => void
    TSIntrinsicKeyword?: (
        node: TSESTree.Node & { type: AST_NODE_TYPES.TSIntrinsicKeyword },
        parent: TSESTree.Node | null,
    ) => void
    TSLiteralType?: (
        node: TSESTree.TSLiteralType,
        parent: TSESTree.Node | null,
    ) => void
    TSMappedType?: (
        node: TSESTree.TSMappedType,
        parent: TSESTree.Node | null,
    ) => void
    TSMethodSignature?: (
        node: TSESTree.TSMethodSignature,
        parent: TSESTree.Node | null,
    ) => void
    TSModuleBlock?: (
        node: TSESTree.TSModuleBlock,
        parent: TSESTree.Node | null,
    ) => void
    TSModuleDeclaration?: (
        node: TSESTree.TSModuleDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    TSNamedTupleMember?: (
        node: TSESTree.TSNamedTupleMember,
        parent: TSESTree.Node | null,
    ) => void
    TSNamespaceExportDeclaration?: (
        node: TSESTree.TSNamespaceExportDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    TSNeverKeyword?: (
        node: TSESTree.TSNeverKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSNonNullExpression?: (
        node: TSESTree.TSNonNullExpression,
        parent: TSESTree.Node | null,
    ) => void
    TSNullKeyword?: (
        node: TSESTree.TSNullKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSNumberKeyword?: (
        node: TSESTree.TSNumberKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSObjectKeyword?: (
        node: TSESTree.TSObjectKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSOptionalType?: (
        node: TSESTree.TSOptionalType,
        parent: TSESTree.Node | null,
    ) => void
    TSParameterProperty?: (
        node: TSESTree.TSParameterProperty,
        parent: TSESTree.Node | null,
    ) => void
    TSPrivateKeyword?: (
        node: TSESTree.TSPrivateKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSPropertySignature?: (
        node: TSESTree.TSPropertySignature,
        parent: TSESTree.Node | null,
    ) => void
    TSProtectedKeyword?: (
        node: TSESTree.TSProtectedKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSPublicKeyword?: (
        node: TSESTree.TSPublicKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSQualifiedName?: (
        node: TSESTree.TSQualifiedName,
        parent: TSESTree.Node | null,
    ) => void
    TSReadonlyKeyword?: (
        node: TSESTree.TSReadonlyKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSRestType?: (
        node: TSESTree.TSRestType,
        parent: TSESTree.Node | null,
    ) => void
    TSStaticKeyword?: (
        node: TSESTree.TSStaticKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSStringKeyword?: (
        node: TSESTree.TSStringKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSSymbolKeyword?: (
        node: TSESTree.TSSymbolKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSTemplateLiteralType?: (
        node: TSESTree.TSTemplateLiteralType,
        parent: TSESTree.Node | null,
    ) => void
    TSThisType?: (
        node: TSESTree.TSThisType,
        parent: TSESTree.Node | null,
    ) => void
    TSTupleType?: (
        node: TSESTree.TSTupleType,
        parent: TSESTree.Node | null,
    ) => void
    TSTypeAliasDeclaration?: (
        node: TSESTree.TSTypeAliasDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    TSTypeAnnotation?: (
        node: TSESTree.TSTypeAnnotation,
        parent: TSESTree.Node | null,
    ) => void
    TSTypeAssertion?: (
        node: TSESTree.TSTypeAssertion,
        parent: TSESTree.Node | null,
    ) => void
    TSTypeLiteral?: (
        node: TSESTree.TSTypeLiteral,
        parent: TSESTree.Node | null,
    ) => void
    TSTypeOperator?: (
        node: TSESTree.TSTypeOperator,
        parent: TSESTree.Node | null,
    ) => void
    TSTypeParameter?: (
        node: TSESTree.TSTypeParameter,
        parent: TSESTree.Node | null,
    ) => void
    TSTypeParameterDeclaration?: (
        node: TSESTree.TSTypeParameterDeclaration,
        parent: TSESTree.Node | null,
    ) => void
    TSTypeParameterInstantiation?: (
        node: TSESTree.TSTypeParameterInstantiation,
        parent: TSESTree.Node | null,
    ) => void
    TSTypePredicate?: (
        node: TSESTree.TSTypePredicate,
        parent: TSESTree.Node | null,
    ) => void
    TSTypeQuery?: (
        node: TSESTree.TSTypeQuery,
        parent: TSESTree.Node | null,
    ) => void
    TSTypeReference?: (
        node: TSESTree.TSTypeReference,
        parent: TSESTree.Node | null,
    ) => void
    TSUndefinedKeyword?: (
        node: TSESTree.TSUndefinedKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSUnionType?: (
        node: TSESTree.TSUnionType,
        parent: TSESTree.Node | null,
    ) => void
    TSUnknownKeyword?: (
        node: TSESTree.TSUnknownKeyword,
        parent: TSESTree.Node | null,
    ) => void
    TSVoidKeyword?: (
        node: TSESTree.TSVoidKeyword,
        parent: TSESTree.Node | null,
    ) => void
}
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "ArrayExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ArrayExpression",
    "node",
    "TSESTree",
    "ArrayPattern",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ArrayPattern",
    "node",
    "TSESTree",
    "ArrowFunctionExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ArrowFunctionExpression",
    "node",
    "TSESTree",
    "AssignmentExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "AssignmentExpression",
    "node",
    "TSESTree",
    "AssignmentPattern",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "AssignmentPattern",
    "node",
    "TSESTree",
    "AwaitExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "AwaitExpression",
    "node",
    "TSESTree",
    "BinaryExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "BinaryExpression",
    "node",
    "TSESTree",
    "BlockStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "BlockStatement",
    "node",
    "TSESTree",
    "BreakStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "BreakStatement",
    "node",
    "TSESTree",
    "CallExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "CallExpression",
    "node",
    "TSESTree",
    "CatchClause",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "CatchClause",
    "node",
    "TSESTree",
    "ChainExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ChainExpression",
    "node",
    "TSESTree",
    "ClassBody",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ClassBody",
    "node",
    "TSESTree",
    "ClassDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ClassDeclaration",
    "node",
    "TSESTree",
    "ClassExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ClassExpression",
    "node",
    "TSESTree",
    "ConditionalExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ConditionalExpression",
    "node",
    "TSESTree",
    "ContinueStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ContinueStatement",
    "node",
    "TSESTree",
    "DebuggerStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "DebuggerStatement",
    "node",
    "TSESTree",
    "Decorator",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "Decorator",
    "node",
    "TSESTree",
    "DoWhileStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "DoWhileStatement",
    "node",
    "TSESTree",
    "EmptyStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "EmptyStatement",
    "node",
    "TSESTree",
    "ExportAllDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ExportAllDeclaration",
    "node",
    "TSESTree",
    "ExportDefaultDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ExportDefaultDeclaration",
    "node",
    "TSESTree",
    "ExportNamedDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ExportNamedDeclaration",
    "node",
    "TSESTree",
    "ExportSpecifier",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ExportSpecifier",
    "node",
    "TSESTree",
    "ExpressionStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ExpressionStatement",
    "node",
    "TSESTree",
    "ForInStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ForInStatement",
    "node",
    "TSESTree",
    "ForOfStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ForOfStatement",
    "node",
    "TSESTree",
    "ForStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ForStatement",
    "node",
    "TSESTree",
    "FunctionDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "FunctionDeclaration",
    "node",
    "TSESTree",
    "FunctionExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "FunctionExpression",
    "node",
    "TSESTree",
    "Identifier",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "Identifier",
    "node",
    "TSESTree",
    "IfStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "IfStatement",
    "node",
    "TSESTree",
    "ImportAttribute",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ImportAttribute",
    "node",
    "TSESTree",
    "ImportDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ImportDeclaration",
    "node",
    "TSESTree",
    "ImportDefaultSpecifier",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ImportDefaultSpecifier",
    "node",
    "TSESTree",
    "ImportExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ImportExpression",
    "node",
    "TSESTree",
    "ImportNamespaceSpecifier",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ImportNamespaceSpecifier",
    "node",
    "TSESTree",
    "ImportSpecifier",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ImportSpecifier",
    "node",
    "TSESTree",
    "JSXAttribute",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXAttribute",
    "node",
    "TSESTree",
    "JSXClosingElement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXClosingElement",
    "node",
    "TSESTree",
    "JSXClosingFragment",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXClosingFragment",
    "node",
    "TSESTree",
    "JSXElement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXElement",
    "node",
    "TSESTree",
    "JSXEmptyExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXEmptyExpression",
    "node",
    "TSESTree",
    "JSXExpressionContainer",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXExpressionContainer",
    "node",
    "TSESTree",
    "JSXFragment",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXFragment",
    "node",
    "TSESTree",
    "JSXIdentifier",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXIdentifier",
    "node",
    "TSESTree",
    "JSXMemberExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXMemberExpression",
    "node",
    "TSESTree",
    "JSXNamespacedName",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXNamespacedName",
    "node",
    "TSESTree",
    "JSXOpeningElement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXOpeningElement",
    "node",
    "TSESTree",
    "JSXOpeningFragment",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXOpeningFragment",
    "node",
    "TSESTree",
    "JSXSpreadAttribute",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXSpreadAttribute",
    "node",
    "TSESTree",
    "JSXSpreadChild",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXSpreadChild",
    "node",
    "TSESTree",
    "JSXText",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "JSXText",
    "node",
    "TSESTree",
    "LabeledStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "LabeledStatement",
    "node",
    "TSESTree",
    "Literal",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "Literal",
    "node",
    "TSESTree",
    "LogicalExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "LogicalExpression",
    "node",
    "TSESTree",
    "MemberExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "MemberExpression",
    "node",
    "TSESTree",
    "MetaProperty",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "MetaProperty",
    "node",
    "TSESTree",
    "MethodDefinition",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "MethodDefinition",
    "node",
    "TSESTree",
    "NewExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "NewExpression",
    "node",
    "TSESTree",
    "ObjectExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ObjectExpression",
    "node",
    "TSESTree",
    "ObjectPattern",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ObjectPattern",
    "node",
    "TSESTree",
    "PrivateIdentifier",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "PrivateIdentifier",
    "node",
    "TSESTree",
    "Program",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "Program",
    "node",
    "TSESTree",
    "Property",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "Property",
    "node",
    "TSESTree",
    "PropertyDefinition",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "PropertyDefinition",
    "node",
    "TSESTree",
    "RestElement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "RestElement",
    "node",
    "TSESTree",
    "ReturnStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ReturnStatement",
    "node",
    "TSESTree",
    "SequenceExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "SequenceExpression",
    "node",
    "TSESTree",
    "SpreadElement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "SpreadElement",
    "node",
    "TSESTree",
    "StaticBlock",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "StaticBlock",
    "node",
    "TSESTree",
    "Super",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "Super",
    "node",
    "TSESTree",
    "SwitchCase",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "SwitchCase",
    "node",
    "TSESTree",
    "SwitchStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "SwitchStatement",
    "node",
    "TSESTree",
    "TaggedTemplateExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TaggedTemplateExpression",
    "node",
    "TSESTree",
    "TemplateElement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TemplateElement",
    "node",
    "TSESTree",
    "TemplateLiteral",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TemplateLiteral",
    "node",
    "TSESTree",
    "ThisExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ThisExpression",
    "node",
    "TSESTree",
    "ThrowStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "ThrowStatement",
    "node",
    "TSESTree",
    "TryStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TryStatement",
    "node",
    "TSESTree",
    "UnaryExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "UnaryExpression",
    "node",
    "TSESTree",
    "UpdateExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "UpdateExpression",
    "node",
    "TSESTree",
    "VariableDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "VariableDeclaration",
    "node",
    "TSESTree",
    "VariableDeclarator",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "VariableDeclarator",
    "node",
    "TSESTree",
    "WhileStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "WhileStatement",
    "node",
    "TSESTree",
    "WithStatement",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "WithStatement",
    "node",
    "TSESTree",
    "YieldExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "YieldExpression",
    "node",
    "TSESTree",
    "TSAbstractKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSAbstractKeyword",
    "node",
    "TSESTree",
    "TSAbstractMethodDefinition",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSAbstractMethodDefinition",
    "node",
    "TSESTree",
    "TSAbstractPropertyDefinition",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSAbstractPropertyDefinition",
    "node",
    "TSESTree",
    "TSAnyKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSAnyKeyword",
    "node",
    "TSESTree",
    "TSArrayType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSArrayType",
    "node",
    "TSESTree",
    "TSAsExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSAsExpression",
    "node",
    "TSESTree",
    "TSAsyncKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSAsyncKeyword",
    "node",
    "TSESTree",
    "TSBigIntKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSBigIntKeyword",
    "node",
    "TSESTree",
    "TSBooleanKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSBooleanKeyword",
    "node",
    "TSESTree",
    "TSCallSignatureDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSCallSignatureDeclaration",
    "node",
    "TSESTree",
    "TSClassImplements",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSClassImplements",
    "node",
    "TSESTree",
    "TSConditionalType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSConditionalType",
    "node",
    "TSESTree",
    "TSConstructorType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSConstructorType",
    "node",
    "TSESTree",
    "TSConstructSignatureDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSConstructSignatureDeclaration",
    "node",
    "TSESTree",
    "TSDeclareFunction",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSDeclareFunction",
    "node",
    "TSESTree",
    "TSDeclareKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSDeclareKeyword",
    "node",
    "TSESTree",
    "TSEmptyBodyFunctionExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSEmptyBodyFunctionExpression",
    "node",
    "TSESTree",
    "TSEnumDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSEnumDeclaration",
    "node",
    "TSESTree",
    "TSEnumMember",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSEnumMember",
    "node",
    "TSESTree",
    "TSExportAssignment",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSExportAssignment",
    "node",
    "TSESTree",
    "TSExportKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSExportKeyword",
    "node",
    "TSESTree",
    "TSExternalModuleReference",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSExternalModuleReference",
    "node",
    "TSESTree",
    "TSFunctionType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSFunctionType",
    "node",
    "TSESTree",
    "TSImportEqualsDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSImportEqualsDeclaration",
    "node",
    "TSESTree",
    "TSImportType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSImportType",
    "node",
    "TSESTree",
    "TSIndexedAccessType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSIndexedAccessType",
    "node",
    "TSESTree",
    "TSIndexSignature",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSIndexSignature",
    "node",
    "TSESTree",
    "TSInferType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSInferType",
    "node",
    "TSESTree",
    "TSInterfaceBody",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSInterfaceBody",
    "node",
    "TSESTree",
    "TSInterfaceDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSInterfaceDeclaration",
    "node",
    "TSESTree",
    "TSInterfaceHeritage",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSInterfaceHeritage",
    "node",
    "TSESTree",
    "TSIntersectionType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSIntersectionType",
    "node",
    "TSESTree",
    "Node",
    "AST_NODE_TYPES",
    "TSIntrinsicKeyword",
    "type",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSIntrinsicKeyword",
    "node",
    "TSESTree",
    "TSLiteralType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSLiteralType",
    "node",
    "TSESTree",
    "TSMappedType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSMappedType",
    "node",
    "TSESTree",
    "TSMethodSignature",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSMethodSignature",
    "node",
    "TSESTree",
    "TSModuleBlock",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSModuleBlock",
    "node",
    "TSESTree",
    "TSModuleDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSModuleDeclaration",
    "node",
    "TSESTree",
    "TSNamedTupleMember",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSNamedTupleMember",
    "node",
    "TSESTree",
    "TSNamespaceExportDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSNamespaceExportDeclaration",
    "node",
    "TSESTree",
    "TSNeverKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSNeverKeyword",
    "node",
    "TSESTree",
    "TSNonNullExpression",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSNonNullExpression",
    "node",
    "TSESTree",
    "TSNullKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSNullKeyword",
    "node",
    "TSESTree",
    "TSNumberKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSNumberKeyword",
    "node",
    "TSESTree",
    "TSObjectKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSObjectKeyword",
    "node",
    "TSESTree",
    "TSOptionalType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSOptionalType",
    "node",
    "TSESTree",
    "TSParameterProperty",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSParameterProperty",
    "node",
    "TSESTree",
    "TSPrivateKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSPrivateKeyword",
    "node",
    "TSESTree",
    "TSPropertySignature",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSPropertySignature",
    "node",
    "TSESTree",
    "TSProtectedKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSProtectedKeyword",
    "node",
    "TSESTree",
    "TSPublicKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSPublicKeyword",
    "node",
    "TSESTree",
    "TSQualifiedName",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSQualifiedName",
    "node",
    "TSESTree",
    "TSReadonlyKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSReadonlyKeyword",
    "node",
    "TSESTree",
    "TSRestType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSRestType",
    "node",
    "TSESTree",
    "TSStaticKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSStaticKeyword",
    "node",
    "TSESTree",
    "TSStringKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSStringKeyword",
    "node",
    "TSESTree",
    "TSSymbolKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSSymbolKeyword",
    "node",
    "TSESTree",
    "TSTemplateLiteralType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTemplateLiteralType",
    "node",
    "TSESTree",
    "TSThisType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSThisType",
    "node",
    "TSESTree",
    "TSTupleType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTupleType",
    "node",
    "TSESTree",
    "TSTypeAliasDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTypeAliasDeclaration",
    "node",
    "TSESTree",
    "TSTypeAnnotation",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTypeAnnotation",
    "node",
    "TSESTree",
    "TSTypeAssertion",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTypeAssertion",
    "node",
    "TSESTree",
    "TSTypeLiteral",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTypeLiteral",
    "node",
    "TSESTree",
    "TSTypeOperator",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTypeOperator",
    "node",
    "TSESTree",
    "TSTypeParameter",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTypeParameter",
    "node",
    "TSESTree",
    "TSTypeParameterDeclaration",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTypeParameterDeclaration",
    "node",
    "TSESTree",
    "TSTypeParameterInstantiation",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTypeParameterInstantiation",
    "node",
    "TSESTree",
    "TSTypePredicate",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTypePredicate",
    "node",
    "TSESTree",
    "TSTypeQuery",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTypeQuery",
    "node",
    "TSESTree",
    "TSTypeReference",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSTypeReference",
    "node",
    "TSESTree",
    "TSUndefinedKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSUndefinedKeyword",
    "node",
    "TSESTree",
    "TSUnionType",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSUnionType",
    "node",
    "TSESTree",
    "TSUnknownKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSUnknownKeyword",
    "node",
    "TSESTree",
    "TSVoidKeyword",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "TSVoidKeyword",
  ],
  "operators": Array [
    "{}",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    "&",
    ".",
    "{}",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    "?",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeLiteral\`
{ type: AST_NODE_TYPES.TSIntrinsicKeyword }
\` 1`] = `
Object {
  "operands": Array [
    "AST_NODE_TYPES",
    "TSIntrinsicKeyword",
    "type",
  ],
  "operators": Array [
    "{}",
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
AST_NODE_TYPES.TSIntrinsicKeyword
\` 1`] = `
Object {
  "operands": Array [
    "AST_NODE_TYPES",
    "TSIntrinsicKeyword",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.ArrayExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ArrayExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.ArrayPattern
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ArrayPattern",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.ArrowFunctionExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ArrowFunctionExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.AssignmentExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "AssignmentExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.AssignmentPattern
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "AssignmentPattern",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.AwaitExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "AwaitExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.BinaryExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "BinaryExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.BlockStatement
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "BlockStatement",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.BreakStatement
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "BreakStatement",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.CallExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "CallExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.CatchClause
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "CatchClause",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.ChainExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ChainExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.ClassBody
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ClassBody",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.ClassDeclaration
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ClassDeclaration",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.ClassExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ClassExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.ConditionalExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ConditionalExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.ContinueStatement
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ContinueStatement",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.DebuggerStatement
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "DebuggerStatement",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.Decorator
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "Decorator",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.DoWhileStatement
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "DoWhileStatement",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.EmptyStatement
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "EmptyStatement",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.ExportAllDeclaration
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ExportAllDeclaration",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.ExportDefaultDeclaration
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ExportDefaultDeclaration",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.ExportNamedDeclaration
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ExportNamedDeclaration",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.ExportSpecifier
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ExportSpecifier",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.ExpressionStatement
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ExpressionStatement",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.ForInStatement
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ForInStatement",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.ForOfStatement
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ForOfStatement",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.ForStatement
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ForStatement",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.FunctionDeclaration
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "FunctionDeclaration",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.FunctionExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "FunctionExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.Identifier
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "Identifier",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.IfStatement
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "IfStatement",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.ImportAttribute
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ImportAttribute",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.ImportDeclaration
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ImportDeclaration",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.ImportDefaultSpecifier
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ImportDefaultSpecifier",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.ImportExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ImportExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.ImportNamespaceSpecifier
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ImportNamespaceSpecifier",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.ImportSpecifier
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ImportSpecifier",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.JSXAttribute
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "JSXAttribute",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.JSXClosingElement
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "JSXClosingElement",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.JSXClosingFragment
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "JSXClosingFragment",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.JSXElement
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "JSXElement",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.JSXEmptyExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "JSXEmptyExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.JSXExpressionContainer
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "JSXExpressionContainer",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.JSXFragment
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "JSXFragment",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.JSXIdentifier
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "JSXIdentifier",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.JSXMemberExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "JSXMemberExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.JSXNamespacedName
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "JSXNamespacedName",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.JSXOpeningElement
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "JSXOpeningElement",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.JSXOpeningFragment
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "JSXOpeningFragment",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.JSXSpreadAttribute
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "JSXSpreadAttribute",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.JSXSpreadChild
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "JSXSpreadChild",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.JSXText
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "JSXText",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.LabeledStatement
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "LabeledStatement",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.Literal
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "Literal",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.LogicalExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "LogicalExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.MemberExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "MemberExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.MetaProperty
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "MetaProperty",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.MethodDefinition
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "MethodDefinition",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.NewExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "NewExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.Node
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "Node",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.ObjectExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ObjectExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.ObjectPattern
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ObjectPattern",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.PrivateIdentifier
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "PrivateIdentifier",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.Program
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "Program",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.Property
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "Property",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.PropertyDefinition
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "PropertyDefinition",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.RestElement
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "RestElement",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.ReturnStatement
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ReturnStatement",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.SequenceExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "SequenceExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.SpreadElement
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "SpreadElement",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.StaticBlock
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "StaticBlock",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.Super
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "Super",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.SwitchCase
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "SwitchCase",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.SwitchStatement
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "SwitchStatement",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSAbstractKeyword
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSAbstractKeyword",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSAbstractMethodDefinition
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSAbstractMethodDefinition",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSAbstractPropertyDefinition
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSAbstractPropertyDefinition",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSAnyKeyword
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSAnyKeyword",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSArrayType
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSArrayType",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSAsExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSAsExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSAsyncKeyword
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSAsyncKeyword",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSBigIntKeyword
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSBigIntKeyword",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSBooleanKeyword
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSBooleanKeyword",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSCallSignatureDeclaration
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSCallSignatureDeclaration",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSClassImplements
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSClassImplements",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSConditionalType
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSConditionalType",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSConstructSignatureDeclaration
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSConstructSignatureDeclaration",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSConstructorType
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSConstructorType",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSDeclareFunction
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSDeclareFunction",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSDeclareKeyword
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSDeclareKeyword",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSEmptyBodyFunctionExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSEmptyBodyFunctionExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSEnumDeclaration
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSEnumDeclaration",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSEnumMember
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSEnumMember",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSExportAssignment
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSExportAssignment",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSExportKeyword
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSExportKeyword",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSExternalModuleReference
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSExternalModuleReference",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSFunctionType
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSFunctionType",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSImportEqualsDeclaration
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSImportEqualsDeclaration",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSImportType
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSImportType",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSIndexSignature
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSIndexSignature",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSIndexedAccessType
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSIndexedAccessType",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSInferType
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSInferType",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSInterfaceBody
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSInterfaceBody",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSInterfaceDeclaration
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSInterfaceDeclaration",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSInterfaceHeritage
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSInterfaceHeritage",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSIntersectionType
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSIntersectionType",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSLiteralType
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSLiteralType",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSMappedType
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSMappedType",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSMethodSignature
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSMethodSignature",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSModuleBlock
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSModuleBlock",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSModuleDeclaration
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSModuleDeclaration",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSNamedTupleMember
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSNamedTupleMember",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSNamespaceExportDeclaration
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSNamespaceExportDeclaration",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSNeverKeyword
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSNeverKeyword",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSNonNullExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSNonNullExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSNullKeyword
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSNullKeyword",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSNumberKeyword
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSNumberKeyword",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSObjectKeyword
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSObjectKeyword",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSOptionalType
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSOptionalType",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSParameterProperty
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSParameterProperty",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSPrivateKeyword
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSPrivateKeyword",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSPropertySignature
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSPropertySignature",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSProtectedKeyword
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSProtectedKeyword",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSPublicKeyword
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSPublicKeyword",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSQualifiedName
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSQualifiedName",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSReadonlyKeyword
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSReadonlyKeyword",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSRestType
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSRestType",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSStaticKeyword
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSStaticKeyword",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSStringKeyword
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSStringKeyword",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSSymbolKeyword
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSSymbolKeyword",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSTemplateLiteralType
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSTemplateLiteralType",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSThisType
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSThisType",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSTupleType
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSTupleType",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSTypeAliasDeclaration
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSTypeAliasDeclaration",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSTypeAnnotation
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSTypeAnnotation",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSTypeAssertion
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSTypeAssertion",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSTypeLiteral
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSTypeLiteral",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSTypeOperator
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSTypeOperator",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSTypeParameter
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSTypeParameter",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSTypeParameterDeclaration
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSTypeParameterDeclaration",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSTypeParameterInstantiation
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSTypeParameterInstantiation",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSTypePredicate
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSTypePredicate",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSTypeQuery
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSTypeQuery",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSTypeReference
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSTypeReference",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSUndefinedKeyword
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSUndefinedKeyword",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSUnionType
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSUnionType",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSUnknownKeyword
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSUnknownKeyword",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TSVoidKeyword
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TSVoidKeyword",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TaggedTemplateExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TaggedTemplateExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TemplateElement
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TemplateElement",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TemplateLiteral
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TemplateLiteral",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.ThisExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ThisExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.ThrowStatement
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "ThrowStatement",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.TryStatement
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "TryStatement",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.UnaryExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "UnaryExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.UpdateExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "UpdateExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.VariableDeclaration
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "VariableDeclaration",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.VariableDeclarator
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "VariableDeclarator",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.WhileStatement
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "WhileStatement",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.WithStatement
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "WithStatement",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSTypeReference\`
TSESTree.YieldExpression
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "YieldExpression",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSUnionType\`
TSESTree.Node | null
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "Node",
    "null",
  ],
  "operators": Array [
    "|",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/visitor.ts TSVoidKeyword\`
void
\` 1`] = `
Object {
  "operands": Array [
    "void",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/walker.ts ArrayExpression\`
[
        { node, parent: null },
    ]
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "parent",
    "null",
  ],
  "operators": Array [
    "[]",
    "{}",
    ",",
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts ArrayExpression\`
[
    ...new Set([...visitorKeys.TSInterfaceDeclaration || [], "implements"]),
]
\` 1`] = `
Object {
  "operands": Array [
    "Set",
    "visitorKeys",
    "TSInterfaceDeclaration",
    "\\"implements\\"",
  ],
  "operators": Array [
    "[]",
    "...",
    "new",
    "()",
    "[]",
    ",",
    "...",
    "||",
    ".",
    "[]",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts ArrayExpression\`
[
    ...new Set([...visitorKeys.TSNamedTupleMember || [], "label"]),
]
\` 1`] = `
Object {
  "operands": Array [
    "Set",
    "visitorKeys",
    "TSNamedTupleMember",
    "\\"label\\"",
  ],
  "operators": Array [
    "[]",
    "...",
    "new",
    "()",
    "[]",
    ",",
    "...",
    "||",
    ".",
    "[]",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts ArrayExpression\`
[...visitorKeys.TSInterfaceDeclaration || [], "implements"]
\` 1`] = `
Object {
  "operands": Array [
    "visitorKeys",
    "TSInterfaceDeclaration",
    "\\"implements\\"",
  ],
  "operators": Array [
    "[]",
    ",",
    "...",
    "||",
    ".",
    "[]",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts ArrayExpression\`
[...visitorKeys.TSNamedTupleMember || [], "label"]
\` 1`] = `
Object {
  "operands": Array [
    "visitorKeys",
    "TSNamedTupleMember",
    "\\"label\\"",
  ],
  "operators": Array [
    "[]",
    ",",
    "...",
    "||",
    ".",
    "[]",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts ArrayExpression\`
[]
\` 1`] = `
Object {
  "operands": Array [],
  "operators": Array [
    "[]",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts AssignmentExpression\`
e = nodes.pop()
\` 1`] = `
Object {
  "operands": Array [
    "e",
    "nodes",
    "pop",
  ],
  "operators": Array [
    "=",
    "()",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts BinaryExpression\`
i >= 0
\` 1`] = `
Object {
  "operands": Array [
    "i",
    "0",
  ],
  "operators": Array [
    ">=",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts BinaryExpression\`
index >= 0
\` 1`] = `
Object {
  "operands": Array [
    "index",
    "0",
  ],
  "operators": Array [
    ">=",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts BinaryExpression\`
keys.length - 1
\` 1`] = `
Object {
  "operands": Array [
    "keys",
    "length",
    "1",
  ],
  "operators": Array [
    "-",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts BinaryExpression\`
typeof (x as any).type === "string"
\` 1`] = `
Object {
  "operands": Array [
    "x",
    "any",
    "type",
    "\\"string\\"",
  ],
  "operators": Array [
    "===",
    "typeof",
    "()",
    ".",
    "as",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts BinaryExpression\`
typeof x === "object"
\` 1`] = `
Object {
  "operands": Array [
    "x",
    "\\"object\\"",
  ],
  "operators": Array [
    "===",
    "typeof",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts BinaryExpression\`
value.length - 1
\` 1`] = `
Object {
  "operands": Array [
    "value",
    "length",
    "1",
  ],
  "operators": Array [
    "-",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts BinaryExpression\`
x !== null
\` 1`] = `
Object {
  "operands": Array [
    "x",
    "null",
  ],
  "operators": Array [
    "!==",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts BlockStatement\`
{
                        nodes.push({ node: v, parent: node })
                    }
\` 1`] = `
Object {
  "operands": Array [
    "nodes",
    "push",
    "node",
    "v",
    "parent",
    "node",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    "{}",
    ",",
    ":",
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts BlockStatement\`
{
                    const v = value[i]
                    if (isNode(v)) {
                        nodes.push({ node: v, parent: node })
                    }
                }
\` 1`] = `
Object {
  "operands": Array [
    "v",
    "value",
    "i",
    "isNode",
    "v",
    "nodes",
    "push",
    "node",
    "v",
    "parent",
    "node",
  ],
  "operators": Array [
    "{}",
    "const",
    "=",
    "[]",
    "if()",
    "()",
    "{}",
    "()",
    ".",
    "{}",
    ",",
    ":",
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts BlockStatement\`
{
                for (let i = value.length - 1; i >= 0; i--) {
                    const v = value[i]
                    if (isNode(v)) {
                        nodes.push({ node: v, parent: node })
                    }
                }
            }
\` 1`] = `
Object {
  "operands": Array [
    "i",
    "value",
    "length",
    "1",
    "i",
    "0",
    "i",
    "v",
    "value",
    "i",
    "isNode",
    "v",
    "nodes",
    "push",
    "node",
    "v",
    "parent",
    "node",
  ],
  "operators": Array [
    "{}",
    "for()",
    ";",
    ";",
    "let",
    "=",
    "-",
    ".",
    ">=",
    "--",
    "{}",
    "const",
    "=",
    "[]",
    "if()",
    "()",
    "{}",
    "()",
    ".",
    "{}",
    ",",
    ":",
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts BlockStatement\`
{
                nodes.push({ node: value, parent: node })
            }
\` 1`] = `
Object {
  "operands": Array [
    "nodes",
    "push",
    "node",
    "value",
    "parent",
    "node",
  ],
  "operators": Array [
    "{}",
    "()",
    ".",
    "{}",
    ",",
    ":",
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts BlockStatement\`
{
            const key = keys[index]
            const value = (node as any)[key]

            if (isNode(value)) {
                nodes.push({ node: value, parent: node })
            } else if (Array.isArray(value)) {
                for (let i = value.length - 1; i >= 0; i--) {
                    const v = value[i]
                    if (isNode(v)) {
                        nodes.push({ node: v, parent: node })
                    }
                }
            }
        }
\` 1`] = `
Object {
  "operands": Array [
    "key",
    "keys",
    "index",
    "value",
    "node",
    "any",
    "key",
    "isNode",
    "value",
    "nodes",
    "push",
    "node",
    "value",
    "parent",
    "node",
    "Array",
    "isArray",
    "value",
    "i",
    "value",
    "length",
    "1",
    "i",
    "0",
    "i",
    "v",
    "value",
    "i",
    "isNode",
    "v",
    "nodes",
    "push",
    "node",
    "v",
    "parent",
    "node",
  ],
  "operators": Array [
    "{}",
    "const",
    "=",
    "[]",
    "const",
    "=",
    "()",
    "[]",
    "as",
    "if()",
    "else",
    "()",
    "{}",
    "()",
    ".",
    "{}",
    ",",
    ":",
    ":",
    "if()",
    "()",
    ".",
    "{}",
    "for()",
    ";",
    ";",
    "let",
    "=",
    "-",
    ".",
    ">=",
    "--",
    "{}",
    "const",
    "=",
    "[]",
    "if()",
    "()",
    "{}",
    "()",
    ".",
    "{}",
    ",",
    ":",
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts BlockStatement\`
{
        const node = e.node
        visit(node, node.parent || e.parent)
        const keys = visitorKeys[node.type] || getKeys(node)

        for (let index = keys.length - 1; index >= 0; index--) {
            const key = keys[index]
            const value = (node as any)[key]

            if (isNode(value)) {
                nodes.push({ node: value, parent: node })
            } else if (Array.isArray(value)) {
                for (let i = value.length - 1; i >= 0; i--) {
                    const v = value[i]
                    if (isNode(v)) {
                        nodes.push({ node: v, parent: node })
                    }
                }
            }
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "e",
    "node",
    "visit",
    "node",
    "node",
    "parent",
    "e",
    "parent",
    "keys",
    "visitorKeys",
    "node",
    "type",
    "getKeys",
    "node",
    "index",
    "keys",
    "length",
    "1",
    "index",
    "0",
    "index",
    "key",
    "keys",
    "index",
    "value",
    "node",
    "any",
    "key",
    "isNode",
    "value",
    "nodes",
    "push",
    "node",
    "value",
    "parent",
    "node",
    "Array",
    "isArray",
    "value",
    "i",
    "value",
    "length",
    "1",
    "i",
    "0",
    "i",
    "v",
    "value",
    "i",
    "isNode",
    "v",
    "nodes",
    "push",
    "node",
    "v",
    "parent",
    "node",
  ],
  "operators": Array [
    "{}",
    "const",
    "=",
    ".",
    "()",
    ",",
    "||",
    ".",
    ".",
    "const",
    "=",
    "||",
    "[]",
    ".",
    "()",
    "for()",
    ";",
    ";",
    "let",
    "=",
    "-",
    ".",
    ">=",
    "--",
    "{}",
    "const",
    "=",
    "[]",
    "const",
    "=",
    "()",
    "[]",
    "as",
    "if()",
    "else",
    "()",
    "{}",
    "()",
    ".",
    "{}",
    ",",
    ":",
    ":",
    "if()",
    "()",
    ".",
    "{}",
    "for()",
    ";",
    ";",
    "let",
    "=",
    "-",
    ".",
    ">=",
    "--",
    "{}",
    "const",
    "=",
    "[]",
    "if()",
    "()",
    "{}",
    "()",
    ".",
    "{}",
    ",",
    ":",
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts BlockStatement\`
{
    const nodes: { node: TSESTree.Node; parent: TSESTree.Node | null }[] = [
        { node, parent: null },
    ]

    let e
    while ((e = nodes.pop())) {
        const node = e.node
        visit(node, node.parent || e.parent)
        const keys = visitorKeys[node.type] || getKeys(node)

        for (let index = keys.length - 1; index >= 0; index--) {
            const key = keys[index]
            const value = (node as any)[key]

            if (isNode(value)) {
                nodes.push({ node: value, parent: node })
            } else if (Array.isArray(value)) {
                for (let i = value.length - 1; i >= 0; i--) {
                    const v = value[i]
                    if (isNode(v)) {
                        nodes.push({ node: v, parent: node })
                    }
                }
            }
        }
    }
}
\` 1`] = `
Object {
  "operands": Array [
    "nodes",
    "TSESTree",
    "Node",
    "node",
    "TSESTree",
    "Node",
    "null",
    "parent",
    "node",
    "parent",
    "null",
    "e",
    "e",
    "nodes",
    "pop",
    "node",
    "e",
    "node",
    "visit",
    "node",
    "node",
    "parent",
    "e",
    "parent",
    "keys",
    "visitorKeys",
    "node",
    "type",
    "getKeys",
    "node",
    "index",
    "keys",
    "length",
    "1",
    "index",
    "0",
    "index",
    "key",
    "keys",
    "index",
    "value",
    "node",
    "any",
    "key",
    "isNode",
    "value",
    "nodes",
    "push",
    "node",
    "value",
    "parent",
    "node",
    "Array",
    "isArray",
    "value",
    "i",
    "value",
    "length",
    "1",
    "i",
    "0",
    "i",
    "v",
    "value",
    "i",
    "isNode",
    "v",
    "nodes",
    "push",
    "node",
    "v",
    "parent",
    "node",
  ],
  "operators": Array [
    "{}",
    "const",
    "=",
    ":",
    "[]",
    "{}",
    ":",
    ".",
    ":",
    "|",
    ".",
    "[]",
    "{}",
    ",",
    ":",
    "let",
    "while()",
    "=",
    "()",
    ".",
    "{}",
    "const",
    "=",
    ".",
    "()",
    ",",
    "||",
    ".",
    ".",
    "const",
    "=",
    "||",
    "[]",
    ".",
    "()",
    "for()",
    ";",
    ";",
    "let",
    "=",
    "-",
    ".",
    ">=",
    "--",
    "{}",
    "const",
    "=",
    "[]",
    "const",
    "=",
    "()",
    "[]",
    "as",
    "if()",
    "else",
    "()",
    "{}",
    "()",
    ".",
    "{}",
    ",",
    ":",
    ":",
    "if()",
    "()",
    ".",
    "{}",
    "for()",
    ";",
    ";",
    "let",
    "=",
    "-",
    ".",
    ">=",
    "--",
    "{}",
    "const",
    "=",
    "[]",
    "if()",
    "()",
    "{}",
    "()",
    ".",
    "{}",
    ",",
    ":",
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts BlockStatement\`
{
    return (
        x !== null &&
        typeof x === "object" &&
        typeof (x as any).type === "string"
    )
}
\` 1`] = `
Object {
  "operands": Array [
    "x",
    "null",
    "x",
    "\\"object\\"",
    "x",
    "any",
    "type",
    "\\"string\\"",
  ],
  "operators": Array [
    "{}",
    "return",
    "&&",
    "&&",
    "!==",
    "===",
    "typeof",
    "===",
    "typeof",
    "()",
    ".",
    "as",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts CallExpression\`
Array.isArray(value)
\` 1`] = `
Object {
  "operands": Array [
    "Array",
    "isArray",
    "value",
  ],
  "operators": Array [
    "()",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts CallExpression\`
getKeys(node)
\` 1`] = `
Object {
  "operands": Array [
    "getKeys",
    "node",
  ],
  "operators": Array [
    "()",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts CallExpression\`
isNode(v)
\` 1`] = `
Object {
  "operands": Array [
    "isNode",
    "v",
  ],
  "operators": Array [
    "()",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts CallExpression\`
isNode(value)
\` 1`] = `
Object {
  "operands": Array [
    "isNode",
    "value",
  ],
  "operators": Array [
    "()",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts CallExpression\`
nodes.pop()
\` 1`] = `
Object {
  "operands": Array [
    "nodes",
    "pop",
  ],
  "operators": Array [
    "()",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts ExportNamedDeclaration\`
export function walk(
    node: TSESTree.Node,
    visit: (node: TSESTree.Node, parent: TSESTree.Node | null) => void,
): void {
    const nodes: { node: TSESTree.Node; parent: TSESTree.Node | null }[] = [
        { node, parent: null },
    ]

    let e
    while ((e = nodes.pop())) {
        const node = e.node
        visit(node, node.parent || e.parent)
        const keys = visitorKeys[node.type] || getKeys(node)

        for (let index = keys.length - 1; index >= 0; index--) {
            const key = keys[index]
            const value = (node as any)[key]

            if (isNode(value)) {
                nodes.push({ node: value, parent: node })
            } else if (Array.isArray(value)) {
                for (let i = value.length - 1; i >= 0; i--) {
                    const v = value[i]
                    if (isNode(v)) {
                        nodes.push({ node: v, parent: node })
                    }
                }
            }
        }
    }
}
\` 1`] = `
Object {
  "operands": Array [
    "walk",
    "node",
    "TSESTree",
    "Node",
    "visit",
    "node",
    "TSESTree",
    "Node",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "void",
    "nodes",
    "TSESTree",
    "Node",
    "node",
    "TSESTree",
    "Node",
    "null",
    "parent",
    "node",
    "parent",
    "null",
    "e",
    "e",
    "nodes",
    "pop",
    "node",
    "e",
    "node",
    "visit",
    "node",
    "node",
    "parent",
    "e",
    "parent",
    "keys",
    "visitorKeys",
    "node",
    "type",
    "getKeys",
    "node",
    "index",
    "keys",
    "length",
    "1",
    "index",
    "0",
    "index",
    "key",
    "keys",
    "index",
    "value",
    "node",
    "any",
    "key",
    "isNode",
    "value",
    "nodes",
    "push",
    "node",
    "value",
    "parent",
    "node",
    "Array",
    "isArray",
    "value",
    "i",
    "value",
    "length",
    "1",
    "i",
    "0",
    "i",
    "v",
    "value",
    "i",
    "isNode",
    "v",
    "nodes",
    "push",
    "node",
    "v",
    "parent",
    "node",
  ],
  "operators": Array [
    "export",
    "function",
    "()",
    ",",
    ":",
    ".",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    ":",
    "{}",
    "const",
    "=",
    ":",
    "[]",
    "{}",
    ":",
    ".",
    ":",
    "|",
    ".",
    "[]",
    "{}",
    ",",
    ":",
    "let",
    "while()",
    "=",
    "()",
    ".",
    "{}",
    "const",
    "=",
    ".",
    "()",
    ",",
    "||",
    ".",
    ".",
    "const",
    "=",
    "||",
    "[]",
    ".",
    "()",
    "for()",
    ";",
    ";",
    "let",
    "=",
    "-",
    ".",
    ">=",
    "--",
    "{}",
    "const",
    "=",
    "[]",
    "const",
    "=",
    "()",
    "[]",
    "as",
    "if()",
    "else",
    "()",
    "{}",
    "()",
    ".",
    "{}",
    ",",
    ":",
    ":",
    "if()",
    "()",
    ".",
    "{}",
    "for()",
    ";",
    ";",
    "let",
    "=",
    "-",
    ".",
    ">=",
    "--",
    "{}",
    "const",
    "=",
    "[]",
    "if()",
    "()",
    "{}",
    "()",
    ".",
    "{}",
    ",",
    ":",
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts ExpressionStatement\`
nodes.push({ node: v, parent: node })
\` 1`] = `
Object {
  "operands": Array [
    "nodes",
    "push",
    "node",
    "v",
    "parent",
    "node",
  ],
  "operators": Array [
    "()",
    ".",
    "{}",
    ",",
    ":",
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts ExpressionStatement\`
nodes.push({ node: value, parent: node })
\` 1`] = `
Object {
  "operands": Array [
    "nodes",
    "push",
    "node",
    "value",
    "parent",
    "node",
  ],
  "operators": Array [
    "()",
    ".",
    "{}",
    ",",
    ":",
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts ExpressionStatement\`
visit(node, node.parent || e.parent)
\` 1`] = `
Object {
  "operands": Array [
    "visit",
    "node",
    "node",
    "parent",
    "e",
    "parent",
  ],
  "operators": Array [
    "()",
    ",",
    "||",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts ExpressionStatement\`
visitorKeys.TSInterfaceDeclaration = [
    ...new Set([...visitorKeys.TSInterfaceDeclaration || [], "implements"]),
]
\` 1`] = `
Object {
  "operands": Array [
    "visitorKeys",
    "TSInterfaceDeclaration",
    "Set",
    "visitorKeys",
    "TSInterfaceDeclaration",
    "\\"implements\\"",
  ],
  "operators": Array [
    "=",
    ".",
    "[]",
    "...",
    "new",
    "()",
    "[]",
    ",",
    "...",
    "||",
    ".",
    "[]",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts ExpressionStatement\`
visitorKeys.TSNamedTupleMember = [
    ...new Set([...visitorKeys.TSNamedTupleMember || [], "label"]),
]
\` 1`] = `
Object {
  "operands": Array [
    "visitorKeys",
    "TSNamedTupleMember",
    "Set",
    "visitorKeys",
    "TSNamedTupleMember",
    "\\"label\\"",
  ],
  "operators": Array [
    "=",
    ".",
    "[]",
    "...",
    "new",
    "()",
    "[]",
    ",",
    "...",
    "||",
    ".",
    "[]",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts ForStatement\`
for (let i = value.length - 1; i >= 0; i--) {
                    const v = value[i]
                    if (isNode(v)) {
                        nodes.push({ node: v, parent: node })
                    }
                }
\` 1`] = `
Object {
  "operands": Array [
    "i",
    "value",
    "length",
    "1",
    "i",
    "0",
    "i",
    "v",
    "value",
    "i",
    "isNode",
    "v",
    "nodes",
    "push",
    "node",
    "v",
    "parent",
    "node",
  ],
  "operators": Array [
    "for()",
    ";",
    ";",
    "let",
    "=",
    "-",
    ".",
    ">=",
    "--",
    "{}",
    "const",
    "=",
    "[]",
    "if()",
    "()",
    "{}",
    "()",
    ".",
    "{}",
    ",",
    ":",
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts ForStatement\`
for (let index = keys.length - 1; index >= 0; index--) {
            const key = keys[index]
            const value = (node as any)[key]

            if (isNode(value)) {
                nodes.push({ node: value, parent: node })
            } else if (Array.isArray(value)) {
                for (let i = value.length - 1; i >= 0; i--) {
                    const v = value[i]
                    if (isNode(v)) {
                        nodes.push({ node: v, parent: node })
                    }
                }
            }
        }
\` 1`] = `
Object {
  "operands": Array [
    "index",
    "keys",
    "length",
    "1",
    "index",
    "0",
    "index",
    "key",
    "keys",
    "index",
    "value",
    "node",
    "any",
    "key",
    "isNode",
    "value",
    "nodes",
    "push",
    "node",
    "value",
    "parent",
    "node",
    "Array",
    "isArray",
    "value",
    "i",
    "value",
    "length",
    "1",
    "i",
    "0",
    "i",
    "v",
    "value",
    "i",
    "isNode",
    "v",
    "nodes",
    "push",
    "node",
    "v",
    "parent",
    "node",
  ],
  "operators": Array [
    "for()",
    ";",
    ";",
    "let",
    "=",
    "-",
    ".",
    ">=",
    "--",
    "{}",
    "const",
    "=",
    "[]",
    "const",
    "=",
    "()",
    "[]",
    "as",
    "if()",
    "else",
    "()",
    "{}",
    "()",
    ".",
    "{}",
    ",",
    ":",
    ":",
    "if()",
    "()",
    ".",
    "{}",
    "for()",
    ";",
    ";",
    "let",
    "=",
    "-",
    ".",
    ">=",
    "--",
    "{}",
    "const",
    "=",
    "[]",
    "if()",
    "()",
    "{}",
    "()",
    ".",
    "{}",
    ",",
    ":",
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts FunctionDeclaration\`
function isNode(x: unknown): x is TSESTree.Node {
    return (
        x !== null &&
        typeof x === "object" &&
        typeof (x as any).type === "string"
    )
}
\` 1`] = `
Object {
  "operands": Array [
    "isNode",
    "x",
    "unknown",
    "TSESTree",
    "Node",
    "x",
    "x",
    "null",
    "x",
    "\\"object\\"",
    "x",
    "any",
    "type",
    "\\"string\\"",
  ],
  "operators": Array [
    "function",
    "()",
    ":",
    ":",
    "is",
    ".",
    "{}",
    "return",
    "&&",
    "&&",
    "!==",
    "===",
    "typeof",
    "===",
    "typeof",
    "()",
    ".",
    "as",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts FunctionDeclaration\`
function walk(
    node: TSESTree.Node,
    visit: (node: TSESTree.Node, parent: TSESTree.Node | null) => void,
): void {
    const nodes: { node: TSESTree.Node; parent: TSESTree.Node | null }[] = [
        { node, parent: null },
    ]

    let e
    while ((e = nodes.pop())) {
        const node = e.node
        visit(node, node.parent || e.parent)
        const keys = visitorKeys[node.type] || getKeys(node)

        for (let index = keys.length - 1; index >= 0; index--) {
            const key = keys[index]
            const value = (node as any)[key]

            if (isNode(value)) {
                nodes.push({ node: value, parent: node })
            } else if (Array.isArray(value)) {
                for (let i = value.length - 1; i >= 0; i--) {
                    const v = value[i]
                    if (isNode(v)) {
                        nodes.push({ node: v, parent: node })
                    }
                }
            }
        }
    }
}
\` 1`] = `
Object {
  "operands": Array [
    "walk",
    "node",
    "TSESTree",
    "Node",
    "visit",
    "node",
    "TSESTree",
    "Node",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "void",
    "nodes",
    "TSESTree",
    "Node",
    "node",
    "TSESTree",
    "Node",
    "null",
    "parent",
    "node",
    "parent",
    "null",
    "e",
    "e",
    "nodes",
    "pop",
    "node",
    "e",
    "node",
    "visit",
    "node",
    "node",
    "parent",
    "e",
    "parent",
    "keys",
    "visitorKeys",
    "node",
    "type",
    "getKeys",
    "node",
    "index",
    "keys",
    "length",
    "1",
    "index",
    "0",
    "index",
    "key",
    "keys",
    "index",
    "value",
    "node",
    "any",
    "key",
    "isNode",
    "value",
    "nodes",
    "push",
    "node",
    "value",
    "parent",
    "node",
    "Array",
    "isArray",
    "value",
    "i",
    "value",
    "length",
    "1",
    "i",
    "0",
    "i",
    "v",
    "value",
    "i",
    "isNode",
    "v",
    "nodes",
    "push",
    "node",
    "v",
    "parent",
    "node",
  ],
  "operators": Array [
    "function",
    "()",
    ",",
    ":",
    ".",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    ":",
    "{}",
    "const",
    "=",
    ":",
    "[]",
    "{}",
    ":",
    ".",
    ":",
    "|",
    ".",
    "[]",
    "{}",
    ",",
    ":",
    "let",
    "while()",
    "=",
    "()",
    ".",
    "{}",
    "const",
    "=",
    ".",
    "()",
    ",",
    "||",
    ".",
    ".",
    "const",
    "=",
    "||",
    "[]",
    ".",
    "()",
    "for()",
    ";",
    ";",
    "let",
    "=",
    "-",
    ".",
    ">=",
    "--",
    "{}",
    "const",
    "=",
    "[]",
    "const",
    "=",
    "()",
    "[]",
    "as",
    "if()",
    "else",
    "()",
    "{}",
    "()",
    ".",
    "{}",
    ",",
    ":",
    ":",
    "if()",
    "()",
    ".",
    "{}",
    "for()",
    ";",
    ";",
    "let",
    "=",
    "-",
    ".",
    ">=",
    "--",
    "{}",
    "const",
    "=",
    "[]",
    "if()",
    "()",
    "{}",
    "()",
    ".",
    "{}",
    ",",
    ":",
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts IfStatement\`
if (Array.isArray(value)) {
                for (let i = value.length - 1; i >= 0; i--) {
                    const v = value[i]
                    if (isNode(v)) {
                        nodes.push({ node: v, parent: node })
                    }
                }
            }
\` 1`] = `
Object {
  "operands": Array [
    "Array",
    "isArray",
    "value",
    "i",
    "value",
    "length",
    "1",
    "i",
    "0",
    "i",
    "v",
    "value",
    "i",
    "isNode",
    "v",
    "nodes",
    "push",
    "node",
    "v",
    "parent",
    "node",
  ],
  "operators": Array [
    "if()",
    "()",
    ".",
    "{}",
    "for()",
    ";",
    ";",
    "let",
    "=",
    "-",
    ".",
    ">=",
    "--",
    "{}",
    "const",
    "=",
    "[]",
    "if()",
    "()",
    "{}",
    "()",
    ".",
    "{}",
    ",",
    ":",
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts IfStatement\`
if (isNode(v)) {
                        nodes.push({ node: v, parent: node })
                    }
\` 1`] = `
Object {
  "operands": Array [
    "isNode",
    "v",
    "nodes",
    "push",
    "node",
    "v",
    "parent",
    "node",
  ],
  "operators": Array [
    "if()",
    "()",
    "{}",
    "()",
    ".",
    "{}",
    ",",
    ":",
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts IfStatement\`
if (isNode(value)) {
                nodes.push({ node: value, parent: node })
            } else if (Array.isArray(value)) {
                for (let i = value.length - 1; i >= 0; i--) {
                    const v = value[i]
                    if (isNode(v)) {
                        nodes.push({ node: v, parent: node })
                    }
                }
            }
\` 1`] = `
Object {
  "operands": Array [
    "isNode",
    "value",
    "nodes",
    "push",
    "node",
    "value",
    "parent",
    "node",
    "Array",
    "isArray",
    "value",
    "i",
    "value",
    "length",
    "1",
    "i",
    "0",
    "i",
    "v",
    "value",
    "i",
    "isNode",
    "v",
    "nodes",
    "push",
    "node",
    "v",
    "parent",
    "node",
  ],
  "operators": Array [
    "if()",
    "else",
    "()",
    "{}",
    "()",
    ".",
    "{}",
    ",",
    ":",
    ":",
    "if()",
    "()",
    ".",
    "{}",
    "for()",
    ";",
    ";",
    "let",
    "=",
    "-",
    ".",
    ">=",
    "--",
    "{}",
    "const",
    "=",
    "[]",
    "if()",
    "()",
    "{}",
    "()",
    ".",
    "{}",
    ",",
    ":",
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts ImportDeclaration\`
import {
    visitorKeys as baseVisitorKeys,
    getKeys,
} from "@typescript-eslint/visitor-keys"
\` 1`] = `
Object {
  "operands": Array [
    "visitorKeys",
    "baseVisitorKeys",
    "getKeys",
    "\\"@typescript-eslint/visitor-keys\\"",
  ],
  "operators": Array [
    "import",
    "{}",
    ",",
    "from",
    "as",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts ImportDeclaration\`
import type { TSESTree } from "@typescript-eslint/types"
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "\\"@typescript-eslint/types\\"",
  ],
  "operators": Array [
    "import",
    "type",
    "{}",
    "from",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts ImportSpecifier\`
TSESTree
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/walker.ts ImportSpecifier\`
getKeys
\` 1`] = `
Object {
  "operands": Array [
    "getKeys",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/walker.ts ImportSpecifier\`
visitorKeys as baseVisitorKeys
\` 1`] = `
Object {
  "operands": Array [
    "visitorKeys",
    "baseVisitorKeys",
  ],
  "operators": Array [
    "as",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts Literal\`
"@typescript-eslint/types"
\` 1`] = `
Object {
  "operands": Array [
    "\\"@typescript-eslint/types\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/walker.ts Literal\`
"@typescript-eslint/visitor-keys"
\` 1`] = `
Object {
  "operands": Array [
    "\\"@typescript-eslint/visitor-keys\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/walker.ts Literal\`
"implements"
\` 1`] = `
Object {
  "operands": Array [
    "\\"implements\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/walker.ts Literal\`
"label"
\` 1`] = `
Object {
  "operands": Array [
    "\\"label\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/walker.ts Literal\`
"object"
\` 1`] = `
Object {
  "operands": Array [
    "\\"object\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/walker.ts Literal\`
"string"
\` 1`] = `
Object {
  "operands": Array [
    "\\"string\\"",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/walker.ts Literal\`
0
\` 1`] = `
Object {
  "operands": Array [
    "0",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/walker.ts Literal\`
1
\` 1`] = `
Object {
  "operands": Array [
    "1",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/walker.ts LogicalExpression\`
node.parent || e.parent
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "parent",
    "e",
    "parent",
  ],
  "operators": Array [
    "||",
    ".",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts LogicalExpression\`
visitorKeys.TSInterfaceDeclaration || []
\` 1`] = `
Object {
  "operands": Array [
    "visitorKeys",
    "TSInterfaceDeclaration",
  ],
  "operators": Array [
    "||",
    ".",
    "[]",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts LogicalExpression\`
visitorKeys.TSNamedTupleMember || []
\` 1`] = `
Object {
  "operands": Array [
    "visitorKeys",
    "TSNamedTupleMember",
  ],
  "operators": Array [
    "||",
    ".",
    "[]",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts LogicalExpression\`
visitorKeys[node.type] || getKeys(node)
\` 1`] = `
Object {
  "operands": Array [
    "visitorKeys",
    "node",
    "type",
    "getKeys",
    "node",
  ],
  "operators": Array [
    "||",
    "[]",
    ".",
    "()",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts LogicalExpression\`
x !== null &&
        typeof x === "object"
\` 1`] = `
Object {
  "operands": Array [
    "x",
    "null",
    "x",
    "\\"object\\"",
  ],
  "operators": Array [
    "&&",
    "!==",
    "===",
    "typeof",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts LogicalExpression\`
x !== null &&
        typeof x === "object" &&
        typeof (x as any).type === "string"
\` 1`] = `
Object {
  "operands": Array [
    "x",
    "null",
    "x",
    "\\"object\\"",
    "x",
    "any",
    "type",
    "\\"string\\"",
  ],
  "operators": Array [
    "&&",
    "&&",
    "!==",
    "===",
    "typeof",
    "===",
    "typeof",
    "()",
    ".",
    "as",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts MemberExpression\`
(node as any)[key]
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "any",
    "key",
  ],
  "operators": Array [
    "()",
    "[]",
    "as",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts MemberExpression\`
(x as any).type
\` 1`] = `
Object {
  "operands": Array [
    "x",
    "any",
    "type",
  ],
  "operators": Array [
    "()",
    ".",
    "as",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts MemberExpression\`
Array.isArray
\` 1`] = `
Object {
  "operands": Array [
    "Array",
    "isArray",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts MemberExpression\`
e.node
\` 1`] = `
Object {
  "operands": Array [
    "e",
    "node",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts MemberExpression\`
e.parent
\` 1`] = `
Object {
  "operands": Array [
    "e",
    "parent",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts MemberExpression\`
keys.length
\` 1`] = `
Object {
  "operands": Array [
    "keys",
    "length",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts MemberExpression\`
keys[index]
\` 1`] = `
Object {
  "operands": Array [
    "keys",
    "index",
  ],
  "operators": Array [
    "[]",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts MemberExpression\`
node.parent
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "parent",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts MemberExpression\`
node.type
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "type",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts MemberExpression\`
nodes.pop
\` 1`] = `
Object {
  "operands": Array [
    "nodes",
    "pop",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts MemberExpression\`
nodes.push
\` 1`] = `
Object {
  "operands": Array [
    "nodes",
    "push",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts MemberExpression\`
value.length
\` 1`] = `
Object {
  "operands": Array [
    "value",
    "length",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts MemberExpression\`
value[i]
\` 1`] = `
Object {
  "operands": Array [
    "value",
    "i",
  ],
  "operators": Array [
    "[]",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts MemberExpression\`
visitorKeys.TSInterfaceDeclaration
\` 1`] = `
Object {
  "operands": Array [
    "visitorKeys",
    "TSInterfaceDeclaration",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts MemberExpression\`
visitorKeys.TSNamedTupleMember
\` 1`] = `
Object {
  "operands": Array [
    "visitorKeys",
    "TSNamedTupleMember",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts MemberExpression\`
visitorKeys[node.type]
\` 1`] = `
Object {
  "operands": Array [
    "visitorKeys",
    "node",
    "type",
  ],
  "operators": Array [
    "[]",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts NewExpression\`
new Set([...visitorKeys.TSInterfaceDeclaration || [], "implements"])
\` 1`] = `
Object {
  "operands": Array [
    "Set",
    "visitorKeys",
    "TSInterfaceDeclaration",
    "\\"implements\\"",
  ],
  "operators": Array [
    "new",
    "()",
    "[]",
    ",",
    "...",
    "||",
    ".",
    "[]",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts NewExpression\`
new Set([...visitorKeys.TSNamedTupleMember || [], "label"])
\` 1`] = `
Object {
  "operands": Array [
    "Set",
    "visitorKeys",
    "TSNamedTupleMember",
    "\\"label\\"",
  ],
  "operators": Array [
    "new",
    "()",
    "[]",
    ",",
    "...",
    "||",
    ".",
    "[]",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts ObjectExpression\`
{ ...baseVisitorKeys }
\` 1`] = `
Object {
  "operands": Array [
    "baseVisitorKeys",
  ],
  "operators": Array [
    "{}",
    "...",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts ObjectExpression\`
{ node, parent: null }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "parent",
    "null",
  ],
  "operators": Array [
    "{}",
    ",",
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts ObjectExpression\`
{ node: v, parent: node }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "v",
    "parent",
    "node",
  ],
  "operators": Array [
    "{}",
    ",",
    ":",
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts ObjectExpression\`
{ node: value, parent: node }
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "value",
    "parent",
    "node",
  ],
  "operators": Array [
    "{}",
    ",",
    ":",
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts Program\`
import type { TSESTree } from "@typescript-eslint/types"
import {
    visitorKeys as baseVisitorKeys,
    getKeys,
} from "@typescript-eslint/visitor-keys"

const visitorKeys = { ...baseVisitorKeys }
visitorKeys.TSNamedTupleMember = [
    ...new Set([...visitorKeys.TSNamedTupleMember || [], "label"]),
]
visitorKeys.TSInterfaceDeclaration = [
    ...new Set([...visitorKeys.TSInterfaceDeclaration || [], "implements"]),
]

/**
 * Traverse node
 */
export function walk(
    node: TSESTree.Node,
    visit: (node: TSESTree.Node, parent: TSESTree.Node | null) => void,
): void {
    const nodes: { node: TSESTree.Node; parent: TSESTree.Node | null }[] = [
        { node, parent: null },
    ]

    let e
    while ((e = nodes.pop())) {
        const node = e.node
        visit(node, node.parent || e.parent)
        const keys = visitorKeys[node.type] || getKeys(node)

        for (let index = keys.length - 1; index >= 0; index--) {
            const key = keys[index]
            const value = (node as any)[key]

            if (isNode(value)) {
                nodes.push({ node: value, parent: node })
            } else if (Array.isArray(value)) {
                for (let i = value.length - 1; i >= 0; i--) {
                    const v = value[i]
                    if (isNode(v)) {
                        nodes.push({ node: v, parent: node })
                    }
                }
            }
        }
    }
}

/**
 * Check whether the given value is an ASTNode or not.
 */
function isNode(x: unknown): x is TSESTree.Node {
    return (
        x !== null &&
        typeof x === "object" &&
        typeof (x as any).type === "string"
    )
}

\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "\\"@typescript-eslint/types\\"",
    "visitorKeys",
    "baseVisitorKeys",
    "getKeys",
    "\\"@typescript-eslint/visitor-keys\\"",
    "visitorKeys",
    "baseVisitorKeys",
    "visitorKeys",
    "TSNamedTupleMember",
    "Set",
    "visitorKeys",
    "TSNamedTupleMember",
    "\\"label\\"",
    "visitorKeys",
    "TSInterfaceDeclaration",
    "Set",
    "visitorKeys",
    "TSInterfaceDeclaration",
    "\\"implements\\"",
    "walk",
    "node",
    "TSESTree",
    "Node",
    "visit",
    "node",
    "TSESTree",
    "Node",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
    "void",
    "nodes",
    "TSESTree",
    "Node",
    "node",
    "TSESTree",
    "Node",
    "null",
    "parent",
    "node",
    "parent",
    "null",
    "e",
    "e",
    "nodes",
    "pop",
    "node",
    "e",
    "node",
    "visit",
    "node",
    "node",
    "parent",
    "e",
    "parent",
    "keys",
    "visitorKeys",
    "node",
    "type",
    "getKeys",
    "node",
    "index",
    "keys",
    "length",
    "1",
    "index",
    "0",
    "index",
    "key",
    "keys",
    "index",
    "value",
    "node",
    "any",
    "key",
    "isNode",
    "value",
    "nodes",
    "push",
    "node",
    "value",
    "parent",
    "node",
    "Array",
    "isArray",
    "value",
    "i",
    "value",
    "length",
    "1",
    "i",
    "0",
    "i",
    "v",
    "value",
    "i",
    "isNode",
    "v",
    "nodes",
    "push",
    "node",
    "v",
    "parent",
    "node",
    "isNode",
    "x",
    "unknown",
    "TSESTree",
    "Node",
    "x",
    "x",
    "null",
    "x",
    "\\"object\\"",
    "x",
    "any",
    "type",
    "\\"string\\"",
  ],
  "operators": Array [
    "import",
    "type",
    "{}",
    "from",
    "import",
    "{}",
    ",",
    "from",
    "as",
    "const",
    "=",
    "{}",
    "...",
    "=",
    ".",
    "[]",
    "...",
    "new",
    "()",
    "[]",
    ",",
    "...",
    "||",
    ".",
    "[]",
    "=",
    ".",
    "[]",
    "...",
    "new",
    "()",
    "[]",
    ",",
    "...",
    "||",
    ".",
    "[]",
    "export",
    "function",
    "()",
    ",",
    ":",
    ".",
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
    ":",
    "{}",
    "const",
    "=",
    ":",
    "[]",
    "{}",
    ":",
    ".",
    ":",
    "|",
    ".",
    "[]",
    "{}",
    ",",
    ":",
    "let",
    "while()",
    "=",
    "()",
    ".",
    "{}",
    "const",
    "=",
    ".",
    "()",
    ",",
    "||",
    ".",
    ".",
    "const",
    "=",
    "||",
    "[]",
    ".",
    "()",
    "for()",
    ";",
    ";",
    "let",
    "=",
    "-",
    ".",
    ">=",
    "--",
    "{}",
    "const",
    "=",
    "[]",
    "const",
    "=",
    "()",
    "[]",
    "as",
    "if()",
    "else",
    "()",
    "{}",
    "()",
    ".",
    "{}",
    ",",
    ":",
    ":",
    "if()",
    "()",
    ".",
    "{}",
    "for()",
    ";",
    ";",
    "let",
    "=",
    "-",
    ".",
    ">=",
    "--",
    "{}",
    "const",
    "=",
    "[]",
    "if()",
    "()",
    "{}",
    "()",
    ".",
    "{}",
    ",",
    ":",
    ":",
    "function",
    "()",
    ":",
    ":",
    "is",
    ".",
    "{}",
    "return",
    "&&",
    "&&",
    "!==",
    "===",
    "typeof",
    "===",
    "typeof",
    "()",
    ".",
    "as",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts Property\`
node
\` 1`] = `
Object {
  "operands": Array [
    "node",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/walker.ts Property\`
node: v
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "v",
  ],
  "operators": Array [
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts Property\`
node: value
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "value",
  ],
  "operators": Array [
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts Property\`
parent: node
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "node",
  ],
  "operators": Array [
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts Property\`
parent: null
\` 1`] = `
Object {
  "operands": Array [
    "parent",
    "null",
  ],
  "operators": Array [
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts ReturnStatement\`
return (
        x !== null &&
        typeof x === "object" &&
        typeof (x as any).type === "string"
    )
\` 1`] = `
Object {
  "operands": Array [
    "x",
    "null",
    "x",
    "\\"object\\"",
    "x",
    "any",
    "type",
    "\\"string\\"",
  ],
  "operators": Array [
    "return",
    "&&",
    "&&",
    "!==",
    "===",
    "typeof",
    "===",
    "typeof",
    "()",
    ".",
    "as",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts SpreadElement\`
...baseVisitorKeys
\` 1`] = `
Object {
  "operands": Array [
    "baseVisitorKeys",
  ],
  "operators": Array [
    "...",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts SpreadElement\`
...new Set([...visitorKeys.TSInterfaceDeclaration || [], "implements"])
\` 1`] = `
Object {
  "operands": Array [
    "Set",
    "visitorKeys",
    "TSInterfaceDeclaration",
    "\\"implements\\"",
  ],
  "operators": Array [
    "...",
    "new",
    "()",
    "[]",
    ",",
    "...",
    "||",
    ".",
    "[]",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts SpreadElement\`
...new Set([...visitorKeys.TSNamedTupleMember || [], "label"])
\` 1`] = `
Object {
  "operands": Array [
    "Set",
    "visitorKeys",
    "TSNamedTupleMember",
    "\\"label\\"",
  ],
  "operators": Array [
    "...",
    "new",
    "()",
    "[]",
    ",",
    "...",
    "||",
    ".",
    "[]",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts SpreadElement\`
...visitorKeys.TSInterfaceDeclaration || []
\` 1`] = `
Object {
  "operands": Array [
    "visitorKeys",
    "TSInterfaceDeclaration",
  ],
  "operators": Array [
    "...",
    "||",
    ".",
    "[]",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts SpreadElement\`
...visitorKeys.TSNamedTupleMember || []
\` 1`] = `
Object {
  "operands": Array [
    "visitorKeys",
    "TSNamedTupleMember",
  ],
  "operators": Array [
    "...",
    "||",
    ".",
    "[]",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts TSAnyKeyword\`
any
\` 1`] = `
Object {
  "operands": Array [
    "any",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/walker.ts TSArrayType\`
{ node: TSESTree.Node; parent: TSESTree.Node | null }[]
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "Node",
    "node",
    "TSESTree",
    "Node",
    "null",
    "parent",
  ],
  "operators": Array [
    "[]",
    "{}",
    ":",
    ".",
    ":",
    "|",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts TSAsExpression\`
node as any
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "any",
  ],
  "operators": Array [
    "as",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts TSAsExpression\`
x as any
\` 1`] = `
Object {
  "operands": Array [
    "x",
    "any",
  ],
  "operators": Array [
    "as",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts TSFunctionType\`
(node: TSESTree.Node, parent: TSESTree.Node | null) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "Node",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts TSNullKeyword\`
null
\` 1`] = `
Object {
  "operands": Array [
    "null",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/walker.ts TSPropertySignature\`
node: TSESTree.Node;
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "Node",
    "node",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts TSPropertySignature\`
parent: TSESTree.Node | null
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "Node",
    "null",
    "parent",
  ],
  "operators": Array [
    ":",
    "|",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts TSTypeAnnotation\`
: (node: TSESTree.Node, parent: TSESTree.Node | null) => void
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "TSESTree",
    "Node",
    "parent",
    "TSESTree",
    "Node",
    "null",
    "void",
  ],
  "operators": Array [
    ":",
    "()",
    ",",
    ":",
    ".",
    ":",
    "|",
    ".",
    "=>",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts TSTypeAnnotation\`
: { node: TSESTree.Node; parent: TSESTree.Node | null }[]
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "Node",
    "node",
    "TSESTree",
    "Node",
    "null",
    "parent",
  ],
  "operators": Array [
    ":",
    "[]",
    "{}",
    ":",
    ".",
    ":",
    "|",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts TSTypeAnnotation\`
: TSESTree.Node
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "Node",
  ],
  "operators": Array [
    ":",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts TSTypeAnnotation\`
: TSESTree.Node | null
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "Node",
    "null",
  ],
  "operators": Array [
    ":",
    "|",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts TSTypeAnnotation\`
: unknown
\` 1`] = `
Object {
  "operands": Array [
    "unknown",
  ],
  "operators": Array [
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts TSTypeAnnotation\`
: void
\` 1`] = `
Object {
  "operands": Array [
    "void",
  ],
  "operators": Array [
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts TSTypeAnnotation\`
: x is TSESTree.Node
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "Node",
    "x",
  ],
  "operators": Array [
    ":",
    "is",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts TSTypeAnnotation\`
=> void
\` 1`] = `
Object {
  "operands": Array [
    "void",
  ],
  "operators": Array [
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts TSTypeLiteral\`
{ node: TSESTree.Node; parent: TSESTree.Node | null }
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "Node",
    "node",
    "TSESTree",
    "Node",
    "null",
    "parent",
  ],
  "operators": Array [
    "{}",
    ":",
    ".",
    ":",
    "|",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts TSTypePredicate\`
x is TSESTree.Node
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "Node",
    "x",
  ],
  "operators": Array [
    "is",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts TSTypeReference\`
TSESTree.Node
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "Node",
  ],
  "operators": Array [
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts TSUnionType\`
TSESTree.Node | null
\` 1`] = `
Object {
  "operands": Array [
    "TSESTree",
    "Node",
    "null",
  ],
  "operators": Array [
    "|",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts TSUnknownKeyword\`
unknown
\` 1`] = `
Object {
  "operands": Array [
    "unknown",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/walker.ts TSVoidKeyword\`
void
\` 1`] = `
Object {
  "operands": Array [
    "void",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/walker.ts UnaryExpression\`
typeof (x as any).type
\` 1`] = `
Object {
  "operands": Array [
    "x",
    "any",
    "type",
  ],
  "operators": Array [
    "typeof",
    "()",
    ".",
    "as",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts UnaryExpression\`
typeof x
\` 1`] = `
Object {
  "operands": Array [
    "x",
  ],
  "operators": Array [
    "typeof",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts UpdateExpression\`
i--
\` 1`] = `
Object {
  "operands": Array [
    "i",
  ],
  "operators": Array [
    "--",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts UpdateExpression\`
index--
\` 1`] = `
Object {
  "operands": Array [
    "index",
  ],
  "operators": Array [
    "--",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts VariableDeclaration\`
const key = keys[index]
\` 1`] = `
Object {
  "operands": Array [
    "key",
    "keys",
    "index",
  ],
  "operators": Array [
    "const",
    "=",
    "[]",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts VariableDeclaration\`
const keys = visitorKeys[node.type] || getKeys(node)
\` 1`] = `
Object {
  "operands": Array [
    "keys",
    "visitorKeys",
    "node",
    "type",
    "getKeys",
    "node",
  ],
  "operators": Array [
    "const",
    "=",
    "||",
    "[]",
    ".",
    "()",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts VariableDeclaration\`
const node = e.node
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "e",
    "node",
  ],
  "operators": Array [
    "const",
    "=",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts VariableDeclaration\`
const nodes: { node: TSESTree.Node; parent: TSESTree.Node | null }[] = [
        { node, parent: null },
    ]
\` 1`] = `
Object {
  "operands": Array [
    "nodes",
    "TSESTree",
    "Node",
    "node",
    "TSESTree",
    "Node",
    "null",
    "parent",
    "node",
    "parent",
    "null",
  ],
  "operators": Array [
    "const",
    "=",
    ":",
    "[]",
    "{}",
    ":",
    ".",
    ":",
    "|",
    ".",
    "[]",
    "{}",
    ",",
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts VariableDeclaration\`
const v = value[i]
\` 1`] = `
Object {
  "operands": Array [
    "v",
    "value",
    "i",
  ],
  "operators": Array [
    "const",
    "=",
    "[]",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts VariableDeclaration\`
const value = (node as any)[key]
\` 1`] = `
Object {
  "operands": Array [
    "value",
    "node",
    "any",
    "key",
  ],
  "operators": Array [
    "const",
    "=",
    "()",
    "[]",
    "as",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts VariableDeclaration\`
const visitorKeys = { ...baseVisitorKeys }
\` 1`] = `
Object {
  "operands": Array [
    "visitorKeys",
    "baseVisitorKeys",
  ],
  "operators": Array [
    "const",
    "=",
    "{}",
    "...",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts VariableDeclaration\`
let e
\` 1`] = `
Object {
  "operands": Array [
    "e",
  ],
  "operators": Array [
    "let",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts VariableDeclaration\`
let i = value.length - 1
\` 1`] = `
Object {
  "operands": Array [
    "i",
    "value",
    "length",
    "1",
  ],
  "operators": Array [
    "let",
    "=",
    "-",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts VariableDeclaration\`
let index = keys.length - 1
\` 1`] = `
Object {
  "operands": Array [
    "index",
    "keys",
    "length",
    "1",
  ],
  "operators": Array [
    "let",
    "=",
    "-",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts VariableDeclarator\`
e
\` 1`] = `
Object {
  "operands": Array [
    "e",
  ],
  "operators": Array [],
}
`;

exports[`test for extractTokens /ts/src/walker.ts VariableDeclarator\`
i = value.length - 1
\` 1`] = `
Object {
  "operands": Array [
    "i",
    "value",
    "length",
    "1",
  ],
  "operators": Array [
    "=",
    "-",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts VariableDeclarator\`
index = keys.length - 1
\` 1`] = `
Object {
  "operands": Array [
    "index",
    "keys",
    "length",
    "1",
  ],
  "operators": Array [
    "=",
    "-",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts VariableDeclarator\`
key = keys[index]
\` 1`] = `
Object {
  "operands": Array [
    "key",
    "keys",
    "index",
  ],
  "operators": Array [
    "=",
    "[]",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts VariableDeclarator\`
keys = visitorKeys[node.type] || getKeys(node)
\` 1`] = `
Object {
  "operands": Array [
    "keys",
    "visitorKeys",
    "node",
    "type",
    "getKeys",
    "node",
  ],
  "operators": Array [
    "=",
    "||",
    "[]",
    ".",
    "()",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts VariableDeclarator\`
node = e.node
\` 1`] = `
Object {
  "operands": Array [
    "node",
    "e",
    "node",
  ],
  "operators": Array [
    "=",
    ".",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts VariableDeclarator\`
nodes: { node: TSESTree.Node; parent: TSESTree.Node | null }[] = [
        { node, parent: null },
    ]
\` 1`] = `
Object {
  "operands": Array [
    "nodes",
    "TSESTree",
    "Node",
    "node",
    "TSESTree",
    "Node",
    "null",
    "parent",
    "node",
    "parent",
    "null",
  ],
  "operators": Array [
    "=",
    ":",
    "[]",
    "{}",
    ":",
    ".",
    ":",
    "|",
    ".",
    "[]",
    "{}",
    ",",
    ":",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts VariableDeclarator\`
v = value[i]
\` 1`] = `
Object {
  "operands": Array [
    "v",
    "value",
    "i",
  ],
  "operators": Array [
    "=",
    "[]",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts VariableDeclarator\`
value = (node as any)[key]
\` 1`] = `
Object {
  "operands": Array [
    "value",
    "node",
    "any",
    "key",
  ],
  "operators": Array [
    "=",
    "()",
    "[]",
    "as",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts VariableDeclarator\`
visitorKeys = { ...baseVisitorKeys }
\` 1`] = `
Object {
  "operands": Array [
    "visitorKeys",
    "baseVisitorKeys",
  ],
  "operators": Array [
    "=",
    "{}",
    "...",
  ],
}
`;

exports[`test for extractTokens /ts/src/walker.ts WhileStatement\`
while ((e = nodes.pop())) {
        const node = e.node
        visit(node, node.parent || e.parent)
        const keys = visitorKeys[node.type] || getKeys(node)

        for (let index = keys.length - 1; index >= 0; index--) {
            const key = keys[index]
            const value = (node as any)[key]

            if (isNode(value)) {
                nodes.push({ node: value, parent: node })
            } else if (Array.isArray(value)) {
                for (let i = value.length - 1; i >= 0; i--) {
                    const v = value[i]
                    if (isNode(v)) {
                        nodes.push({ node: v, parent: node })
                    }
                }
            }
        }
    }
\` 1`] = `
Object {
  "operands": Array [
    "e",
    "nodes",
    "pop",
    "node",
    "e",
    "node",
    "visit",
    "node",
    "node",
    "parent",
    "e",
    "parent",
    "keys",
    "visitorKeys",
    "node",
    "type",
    "getKeys",
    "node",
    "index",
    "keys",
    "length",
    "1",
    "index",
    "0",
    "index",
    "key",
    "keys",
    "index",
    "value",
    "node",
    "any",
    "key",
    "isNode",
    "value",
    "nodes",
    "push",
    "node",
    "value",
    "parent",
    "node",
    "Array",
    "isArray",
    "value",
    "i",
    "value",
    "length",
    "1",
    "i",
    "0",
    "i",
    "v",
    "value",
    "i",
    "isNode",
    "v",
    "nodes",
    "push",
    "node",
    "v",
    "parent",
    "node",
  ],
  "operators": Array [
    "while()",
    "=",
    "()",
    ".",
    "{}",
    "const",
    "=",
    ".",
    "()",
    ",",
    "||",
    ".",
    ".",
    "const",
    "=",
    "||",
    "[]",
    ".",
    "()",
    "for()",
    ";",
    ";",
    "let",
    "=",
    "-",
    ".",
    ">=",
    "--",
    "{}",
    "const",
    "=",
    "[]",
    "const",
    "=",
    "()",
    "[]",
    "as",
    "if()",
    "else",
    "()",
    "{}",
    "()",
    ".",
    "{}",
    ",",
    ":",
    ":",
    "if()",
    "()",
    ".",
    "{}",
    "for()",
    ";",
    ";",
    "let",
    "=",
    "-",
    ".",
    ">=",
    "--",
    "{}",
    "const",
    "=",
    "[]",
    "if()",
    "()",
    "{}",
    "()",
    ".",
    "{}",
    ",",
    ":",
    ":",
  ],
}
`;
